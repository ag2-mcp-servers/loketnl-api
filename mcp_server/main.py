# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T04:38:55+00:00



import argparse
import json
import os
from datetime import date as date_aliased
from typing import *
from typing import Optional, Union
from uuid import UUID

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Header, Path, Query, UploadFile
from pydantic import conint, constr

from models import (
    AchmeainsurancecontractsAchmeaInsuranceContractIdInsuredwagecalculationpercentagesGetResponse,
    AchmeainsurancecontractsAchmeaInsuranceContractIdInsuredwagecalculationpercentagesGetResponse1,
    AchmeainsurancecontractsAchmeaInsuranceContractIdInsuredwagecalculationpercentagesGetResponse2,
    AchmeainsurancecontractsAchmeaInsuranceContractIdInsuredwagecalculationpercentagesGetResponse3,
    AchmeainsurancecontractsGetResponse,
    AchmeainsurancecontractsGetResponse1,
    AchmeainsurancecontractsGetResponse2,
    AchmeainsurancecontractsGetResponse3,
    AowDateGetResponse,
    AowDateGetResponse1,
    AowDateGetResponse2,
    AowDateGetResponse3,
    ApplicationsApplicationIdAuthorizationsGetResponse,
    ApplicationsApplicationIdAuthorizationsGetResponse1,
    ApplicationsApplicationIdAuthorizationsGetResponse2,
    ApplicationsApplicationIdAuthorizationsGetResponse3,
    ApplicationsApplicationIdLogoGetResponse,
    ApplicationsApplicationIdLogoGetResponse1,
    BatchBooking,
    ChamberofcommerceChamberOfCommerceNumberCompanyinformationGetResponse,
    ChamberofcommerceChamberOfCommerceNumberCompanyinformationGetResponse1,
    ChamberofcommerceChamberOfCommerceNumberCompanyinformationGetResponse2,
    ChamberofcommerceChamberOfCommerceNumberCompanyinformationGetResponse3,
    DatanewbusinessFunctionsGetResponse,
    DatanewbusinessFunctionsGetResponse1,
    DatanewbusinessFunctionsGetResponse2,
    DatanewbusinessFunctionsGetResponse3,
    DatanewbusinessTokenGetResponse,
    DatanewbusinessTokenGetResponse1,
    DatanewbusinessTokenGetResponse2,
    DatanewbusinessTokenGetResponse3,
    GroupBy,
    GroupingType,
    LeaveType20,
    LeaveType23,
    LocationservicesAddressGetResponse,
    LocationservicesAddressGetResponse1,
    LocationservicesAddressGetResponse2,
    LocationservicesAddressGetResponse3,
    PaymentType,
    PayrollComponents,
    ProvidersApplicationsetsApplicationSetIdDeleteResponse,
    ProvidersApplicationsetsApplicationSetIdDeleteResponse1,
    ProvidersApplicationsetsApplicationSetIdDeleteResponse2,
    ProvidersApplicationsetsApplicationSetIdDeleteResponse3,
    ProvidersApplicationsetsApplicationSetIdPutResponse,
    ProvidersApplicationsetsApplicationSetIdPutResponse1,
    ProvidersApplicationsetsApplicationSetIdPutResponse2,
    ProvidersApplicationsetsApplicationSetIdPutResponse3,
    ProvidersApplicationsetsApplicationSetIdPutResponse4,
    ProvidersAuthorizationsetsAuthorizationsetidGetResponse,
    ProvidersAuthorizationsetsAuthorizationsetidGetResponse1,
    ProvidersAuthorizationsetsAuthorizationsetidGetResponse2,
    ProvidersAuthorizationsetsAuthorizationsetidGetResponse3,
    ProvidersEmailidentitiesEmailIdentityIdDeleteResponse,
    ProvidersEmailidentitiesEmailIdentityIdDeleteResponse1,
    ProvidersEmailidentitiesEmailIdentityIdDeleteResponse2,
    ProvidersEmailidentitiesEmailIdentityIdDeleteResponse3,
    ProvidersEmailidentitiesEmailIdentityIdSendtestemailPostResponse,
    ProvidersEmailidentitiesEmailIdentityIdSendtestemailPostResponse1,
    ProvidersEmailidentitiesEmailIdentityIdSendtestemailPostResponse2,
    ProvidersEmployersAnnouncementsPatchRequest,
    ProvidersEmployersAnnouncementsPatchResponse,
    ProvidersEmployersAnnouncementsPatchResponse1,
    ProvidersEmployersAnnouncementsPatchResponse2,
    ProvidersEmployersAnnouncementsPatchResponse3,
    ProvidersEmployersBenefitinkindtypesBenefitInKindTypeIdDeleteResponse,
    ProvidersEmployersBenefitinkindtypesBenefitInKindTypeIdDeleteResponse1,
    ProvidersEmployersBenefitinkindtypesBenefitInKindTypeIdDeleteResponse2,
    ProvidersEmployersBenefitinkindtypesBenefitInKindTypeIdDeleteResponse3,
    ProvidersEmployersBenefitinkindtypesBenefitInKindTypeIdGetResponse,
    ProvidersEmployersBenefitinkindtypesBenefitInKindTypeIdGetResponse1,
    ProvidersEmployersBenefitinkindtypesBenefitInKindTypeIdGetResponse2,
    ProvidersEmployersBenefitinkindtypesBenefitInKindTypeIdGetResponse3,
    ProvidersEmployersBenefitinkindtypesBenefitInKindTypeIdPutResponse,
    ProvidersEmployersBenefitinkindtypesBenefitInKindTypeIdPutResponse1,
    ProvidersEmployersBenefitinkindtypesBenefitInKindTypeIdPutResponse2,
    ProvidersEmployersBenefitinkindtypesBenefitInKindTypeIdPutResponse3,
    ProvidersEmployersBenefitinkindtypesBenefitInKindTypeIdPutResponse4,
    ProvidersEmployersConceptemployeesConceptEmployeeIdAssessmentInitiatePostResponse,
    ProvidersEmployersConceptemployeesConceptEmployeeIdAssessmentInitiatePostResponse1,
    ProvidersEmployersConceptemployeesConceptEmployeeIdAssessmentInitiatePostResponse2,
    ProvidersEmployersConceptemployeesConceptEmployeeIdCitizenservicenumberGetResponse,
    ProvidersEmployersConceptemployeesConceptEmployeeIdCitizenservicenumberGetResponse1,
    ProvidersEmployersConceptemployeesConceptEmployeeIdCitizenservicenumberGetResponse2,
    ProvidersEmployersConceptemployeesConceptEmployeeIdCitizenservicenumberGetResponse3,
    ProvidersEmployersConceptemployeesConceptEmployeeIdCitizenservicenumberPutResponse,
    ProvidersEmployersConceptemployeesConceptEmployeeIdCitizenservicenumberPutResponse1,
    ProvidersEmployersConceptemployeesConceptEmployeeIdCitizenservicenumberPutResponse2,
    ProvidersEmployersConceptemployeesConceptEmployeeIdCitizenservicenumberPutResponse3,
    ProvidersEmployersConceptemployeesConceptEmployeeIdCitizenservicenumberPutResponse4,
    ProvidersEmployersConceptemployeesConceptEmployeeIdConvertToEmployeePatchResponse,
    ProvidersEmployersConceptemployeesConceptEmployeeIdConvertToEmployeePatchResponse1,
    ProvidersEmployersConceptemployeesConceptEmployeeIdConvertToEmployeePatchResponse2,
    ProvidersEmployersConceptemployeesConceptEmployeeIdConvertToEmployeePatchResponse3,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDeleteResponse,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDeleteResponse1,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDeleteResponse2,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDeleteResponse3,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumentsDocumentIdAudittrailGetResponse,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumentsDocumentIdAudittrailGetResponse1,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumentsDocumentIdAudittrailGetResponse2,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumentsDocumentIdAudittrailGetResponse3,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumentsDocumentIdDeleteResponse,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumentsDocumentIdDeleteResponse1,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumentsDocumentIdDeleteResponse2,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumentsDocumentIdDeleteResponse3,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumentsDocumentIdGetResponse,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumentsDocumentIdGetResponse1,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumentsDocumentIdPutResponse,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumentsDocumentIdPutResponse1,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumentsDocumentIdPutResponse2,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumentsDocumentIdPutResponse3,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumentsDocumentIdSignatureDeleteResponse,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumentsDocumentIdSignatureDeleteResponse1,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumentsDocumentIdSignatureDeleteResponse2,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumentsDocumentIdSignatureGetResponse,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumentsDocumentIdSignatureGetResponse1,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumentsDocumentIdSignatureGetResponse2,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumentsDocumentIdSignatureGetResponse3,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumentsDocumentIdSignatureInitiatePostResponse,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumentsDocumentIdSignatureInitiatePostResponse1,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumentsDocumentIdSignatureInitiatePostResponse2,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumentsDocumentIdSignatureInitiatePostResponse3,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumentsDocumentIdSignatureReportGetResponse,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumentsDocumentIdSignatureReportGetResponse1,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumentsDocumentIdSignatureReportGetResponse2,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumentsGetResponse,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumentsGetResponse1,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumentsGetResponse2,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumentsGetResponse3,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumentsPostResponse,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumentsPostResponse1,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumentsPostResponse2,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumenttemplatesDocumentIdGeneratedocumentPostResponse,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumenttemplatesDocumentIdGeneratedocumentPostResponse1,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumenttemplatesDocumentIdGeneratedocumentPostResponse2,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumenttemplatesDocumentIdGeneratedocumentPreviewPostResponse,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumenttemplatesDocumentIdGeneratedocumentPreviewPostResponse1,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDocumenttemplatesDocumentIdGeneratedocumentPreviewPostResponse2,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDossierDeleteResponse,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDossierDeleteResponse1,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDossierDeleteResponse2,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDossierDeleteResponse3,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDossierGetResponse,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDossierGetResponse1,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDossierGetResponse2,
    ProvidersEmployersConceptemployeesConceptEmployeeIdDossierGetResponse3,
    ProvidersEmployersConceptemployeesConceptEmployeeIdGetResponse,
    ProvidersEmployersConceptemployeesConceptEmployeeIdGetResponse1,
    ProvidersEmployersConceptemployeesConceptEmployeeIdGetResponse2,
    ProvidersEmployersConceptemployeesConceptEmployeeIdGetResponse3,
    ProvidersEmployersConceptemployeesConceptEmployeeIdPreboardingtrajectoryPatchResponse,
    ProvidersEmployersConceptemployeesConceptEmployeeIdPreboardingtrajectoryPatchResponse1,
    ProvidersEmployersConceptemployeesConceptEmployeeIdPreboardingtrajectoryPatchResponse2,
    ProvidersEmployersConceptemployeesConceptEmployeeIdPreboardingtrajectoryPatchResponse3,
    ProvidersEmployersConceptemployeesConceptEmployeeIdPreboardingtrajectoryPostResponse,
    ProvidersEmployersConceptemployeesConceptEmployeeIdPreboardingtrajectoryPostResponse1,
    ProvidersEmployersConceptemployeesConceptEmployeeIdPreboardingtrajectoryPostResponse2,
    ProvidersEmployersConceptemployeesConceptEmployeeIdPreboardingtrajectoryPostResponse3,
    ProvidersEmployersConceptemployeesConceptEmployeeIdPutResponse,
    ProvidersEmployersConceptemployeesConceptEmployeeIdPutResponse1,
    ProvidersEmployersConceptemployeesConceptEmployeeIdPutResponse2,
    ProvidersEmployersConceptemployeesConceptEmployeeIdPutResponse3,
    ProvidersEmployersConceptemployeesConceptEmployeeIdPutResponse4,
    ProvidersEmployersConceptemployeesConceptEmployeeIdSelfserviceGetResponse,
    ProvidersEmployersConceptemployeesConceptEmployeeIdSelfserviceGetResponse1,
    ProvidersEmployersConceptemployeesConceptEmployeeIdSelfserviceGetResponse2,
    ProvidersEmployersConceptemployeesConceptEmployeeIdSelfserviceGetResponse3,
    ProvidersEmployersConceptemployeesImportPayrollAdministrationIdPatchResponse,
    ProvidersEmployersConceptemployeesImportPayrollAdministrationIdPatchResponse1,
    ProvidersEmployersConceptemployeesImportPayrollAdministrationIdPatchResponse2,
    ProvidersEmployersConceptemployeesImportPayrollAdministrationIdPatchResponse3,
    ProvidersEmployersConceptemployeesMetadataPayrollAdministrationPayrollAdministrationIdPayScalePayscaleKeyPaygradePaygradeKeyGetResponse,
    ProvidersEmployersConceptemployeesMinimizedConceptEmployeeIdGetResponse,
    ProvidersEmployersConceptemployeesMinimizedConceptEmployeeIdGetResponse1,
    ProvidersEmployersConceptemployeesMinimizedConceptEmployeeIdGetResponse2,
    ProvidersEmployersConceptemployeesMinimizedConceptEmployeeIdGetResponse3,
    ProvidersEmployersConceptemployeesMinimizedConceptEmployeeIdPutResponse,
    ProvidersEmployersConceptemployeesMinimizedConceptEmployeeIdPutResponse1,
    ProvidersEmployersConceptemployeesMinimizedConceptEmployeeIdPutResponse2,
    ProvidersEmployersConceptemployeesMinimizedConceptEmployeeIdPutResponse3,
    ProvidersEmployersConceptemployeesMinimizedConceptEmployeeIdPutResponse4,
    ProvidersEmployersContractcodesContractCodeIdDeleteResponse,
    ProvidersEmployersContractcodesContractCodeIdDeleteResponse1,
    ProvidersEmployersContractcodesContractCodeIdDeleteResponse2,
    ProvidersEmployersContractcodesContractCodeIdDeleteResponse3,
    ProvidersEmployersContractcodesContractCodeIdGetResponse,
    ProvidersEmployersContractcodesContractCodeIdGetResponse1,
    ProvidersEmployersContractcodesContractCodeIdGetResponse2,
    ProvidersEmployersContractcodesContractCodeIdGetResponse3,
    ProvidersEmployersContractcodesContractCodeIdPutResponse,
    ProvidersEmployersContractcodesContractCodeIdPutResponse1,
    ProvidersEmployersContractcodesContractCodeIdPutResponse2,
    ProvidersEmployersContractcodesContractCodeIdPutResponse3,
    ProvidersEmployersContractcodesContractCodeIdPutResponse4,
    ProvidersEmployersCustomfieldsCustomFieldIdDeleteResponse,
    ProvidersEmployersCustomfieldsCustomFieldIdDeleteResponse1,
    ProvidersEmployersCustomfieldsCustomFieldIdDeleteResponse2,
    ProvidersEmployersCustomfieldsCustomFieldIdDeleteResponse3,
    ProvidersEmployersCustomfieldsCustomFieldIdGetResponse,
    ProvidersEmployersCustomfieldsCustomFieldIdGetResponse1,
    ProvidersEmployersCustomfieldsCustomFieldIdGetResponse2,
    ProvidersEmployersCustomfieldsCustomFieldIdGetResponse3,
    ProvidersEmployersCustomfieldsCustomFieldIdPutResponse,
    ProvidersEmployersCustomfieldsCustomFieldIdPutResponse1,
    ProvidersEmployersCustomfieldsCustomFieldIdPutResponse2,
    ProvidersEmployersCustomfieldsCustomFieldIdPutResponse3,
    ProvidersEmployersCustomfieldsCustomFieldIdPutResponse4,
    ProvidersEmployersCustomholidaysCustomHolidayIdDeleteResponse,
    ProvidersEmployersCustomholidaysCustomHolidayIdDeleteResponse1,
    ProvidersEmployersCustomholidaysCustomHolidayIdDeleteResponse2,
    ProvidersEmployersCustomholidaysCustomHolidayIdDeleteResponse3,
    ProvidersEmployersCustomholidaysCustomHolidayIdGetResponse,
    ProvidersEmployersCustomholidaysCustomHolidayIdGetResponse1,
    ProvidersEmployersCustomholidaysCustomHolidayIdGetResponse2,
    ProvidersEmployersCustomholidaysCustomHolidayIdGetResponse3,
    ProvidersEmployersCustomholidaysCustomHolidayIdPutResponse,
    ProvidersEmployersCustomholidaysCustomHolidayIdPutResponse1,
    ProvidersEmployersCustomholidaysCustomHolidayIdPutResponse2,
    ProvidersEmployersCustomholidaysCustomHolidayIdPutResponse3,
    ProvidersEmployersCustomholidaysCustomHolidayIdPutResponse4,
    ProvidersEmployersDepartmentsDepartmentIdGetResponse,
    ProvidersEmployersDepartmentsDepartmentIdGetResponse1,
    ProvidersEmployersDepartmentsDepartmentIdGetResponse2,
    ProvidersEmployersDepartmentsDepartmentIdGetResponse3,
    ProvidersEmployersDepartmentsDepartmentIdPutResponse,
    ProvidersEmployersDepartmentsDepartmentIdPutResponse1,
    ProvidersEmployersDepartmentsDepartmentIdPutResponse2,
    ProvidersEmployersDepartmentsDepartmentIdPutResponse3,
    ProvidersEmployersDepartmentsDepartmentIdPutResponse4,
    ProvidersEmployersEducationfurtherindicationsEducationFurtherIndicationIdDeleteResponse,
    ProvidersEmployersEducationfurtherindicationsEducationFurtherIndicationIdDeleteResponse1,
    ProvidersEmployersEducationfurtherindicationsEducationFurtherIndicationIdDeleteResponse2,
    ProvidersEmployersEducationfurtherindicationsEducationFurtherIndicationIdDeleteResponse3,
    ProvidersEmployersEducationfurtherindicationsEducationFurtherIndicationIdGetResponse,
    ProvidersEmployersEducationfurtherindicationsEducationFurtherIndicationIdGetResponse1,
    ProvidersEmployersEducationfurtherindicationsEducationFurtherIndicationIdGetResponse2,
    ProvidersEmployersEducationfurtherindicationsEducationFurtherIndicationIdGetResponse3,
    ProvidersEmployersEducationfurtherindicationsEducationFurtherIndicationIdPutResponse,
    ProvidersEmployersEducationfurtherindicationsEducationFurtherIndicationIdPutResponse1,
    ProvidersEmployersEducationfurtherindicationsEducationFurtherIndicationIdPutResponse2,
    ProvidersEmployersEducationfurtherindicationsEducationFurtherIndicationIdPutResponse3,
    ProvidersEmployersEducationfurtherindicationsEducationFurtherIndicationIdPutResponse4,
    ProvidersEmployersEducationtypesEducationTypeIdDeleteResponse,
    ProvidersEmployersEducationtypesEducationTypeIdDeleteResponse1,
    ProvidersEmployersEducationtypesEducationTypeIdDeleteResponse2,
    ProvidersEmployersEducationtypesEducationTypeIdDeleteResponse3,
    ProvidersEmployersEducationtypesEducationTypeIdGetResponse,
    ProvidersEmployersEducationtypesEducationTypeIdGetResponse1,
    ProvidersEmployersEducationtypesEducationTypeIdGetResponse2,
    ProvidersEmployersEducationtypesEducationTypeIdGetResponse3,
    ProvidersEmployersEducationtypesEducationTypeIdPutResponse,
    ProvidersEmployersEducationtypesEducationTypeIdPutResponse1,
    ProvidersEmployersEducationtypesEducationTypeIdPutResponse2,
    ProvidersEmployersEducationtypesEducationTypeIdPutResponse3,
    ProvidersEmployersEducationtypesEducationTypeIdPutResponse4,
    ProvidersEmployersEmailidentitiesEmailIdentityIdDeleteResponse,
    ProvidersEmployersEmailidentitiesEmailIdentityIdDeleteResponse1,
    ProvidersEmployersEmailidentitiesEmailIdentityIdDeleteResponse2,
    ProvidersEmployersEmailidentitiesEmailIdentityIdDeleteResponse3,
    ProvidersEmployersEmailidentitiesEmailIdentityIdSendtestemailPostResponse,
    ProvidersEmployersEmailidentitiesEmailIdentityIdSendtestemailPostResponse1,
    ProvidersEmployersEmailidentitiesEmailIdentityIdSendtestemailPostResponse2,
    ProvidersEmployersEmployeesAbsencesAbsencecontactHistoryAbsencecontactHistoryIdDeleteResponse,
    ProvidersEmployersEmployeesAbsencesAbsencecontactHistoryAbsencecontactHistoryIdDeleteResponse1,
    ProvidersEmployersEmployeesAbsencesAbsencecontactHistoryAbsencecontactHistoryIdDeleteResponse2,
    ProvidersEmployersEmployeesAbsencesAbsencecontactHistoryAbsencecontactHistoryIdDeleteResponse3,
    ProvidersEmployersEmployeesAbsencesAbsencecontactHistoryAbsencecontactHistoryIdGetResponse,
    ProvidersEmployersEmployeesAbsencesAbsencecontactHistoryAbsencecontactHistoryIdGetResponse1,
    ProvidersEmployersEmployeesAbsencesAbsencecontactHistoryAbsencecontactHistoryIdGetResponse2,
    ProvidersEmployersEmployeesAbsencesAbsencecontactHistoryAbsencecontactHistoryIdGetResponse3,
    ProvidersEmployersEmployeesAbsencesAbsencecontactHistoryAbsencecontactHistoryIdPutResponse,
    ProvidersEmployersEmployeesAbsencesAbsencecontactHistoryAbsencecontactHistoryIdPutResponse1,
    ProvidersEmployersEmployeesAbsencesAbsencecontactHistoryAbsencecontactHistoryIdPutResponse2,
    ProvidersEmployersEmployeesAbsencesAbsencecontactHistoryAbsencecontactHistoryIdPutResponse3,
    ProvidersEmployersEmployeesAbsencesAbsencecontactHistoryAbsencecontactHistoryIdPutResponse4,
    ProvidersEmployersEmployeesAbsencesAbsenceIdAbsencecontactHistoryGetResponse,
    ProvidersEmployersEmployeesAbsencesAbsenceIdAbsencecontactHistoryGetResponse1,
    ProvidersEmployersEmployeesAbsencesAbsenceIdAbsencecontactHistoryGetResponse2,
    ProvidersEmployersEmployeesAbsencesAbsenceIdAbsencecontactHistoryGetResponse3,
    ProvidersEmployersEmployeesAbsencesAbsenceIdAbsencecontactHistoryPostResponse,
    ProvidersEmployersEmployeesAbsencesAbsenceIdAbsencecontactHistoryPostResponse1,
    ProvidersEmployersEmployeesAbsencesAbsenceIdAbsencecontactHistoryPostResponse2,
    ProvidersEmployersEmployeesAbsencesAbsenceIdAbsencecontactHistoryPostResponse3,
    ProvidersEmployersEmployeesAbsencesAbsenceIdAbsenceprogressGetResponse,
    ProvidersEmployersEmployeesAbsencesAbsenceIdAbsenceprogressGetResponse1,
    ProvidersEmployersEmployeesAbsencesAbsenceIdAbsenceprogressGetResponse2,
    ProvidersEmployersEmployeesAbsencesAbsenceIdAbsenceprogressGetResponse3,
    ProvidersEmployersEmployeesAbsencesAbsenceIdAbsenceprogressPostResponse,
    ProvidersEmployersEmployeesAbsencesAbsenceIdAbsenceprogressPostResponse1,
    ProvidersEmployersEmployeesAbsencesAbsenceIdAbsenceprogressPostResponse2,
    ProvidersEmployersEmployeesAbsencesAbsenceIdAbsenceprogressPostResponse3,
    ProvidersEmployersEmployeesAbsencesAbsenceIdCloseabsencePatchResponse,
    ProvidersEmployersEmployeesAbsencesAbsenceIdCloseabsencePatchResponse1,
    ProvidersEmployersEmployeesAbsencesAbsenceIdCloseabsencePatchResponse2,
    ProvidersEmployersEmployeesAbsencesAbsenceIdCloseabsencePatchResponse3,
    ProvidersEmployersEmployeesAbsencesAbsenceIdDeleteResponse,
    ProvidersEmployersEmployeesAbsencesAbsenceIdDeleteResponse1,
    ProvidersEmployersEmployeesAbsencesAbsenceIdDeleteResponse2,
    ProvidersEmployersEmployeesAbsencesAbsenceIdDeleteResponse3,
    ProvidersEmployersEmployeesAbsencesAbsenceIdGetResponse,
    ProvidersEmployersEmployeesAbsencesAbsenceIdGetResponse1,
    ProvidersEmployersEmployeesAbsencesAbsenceIdGetResponse2,
    ProvidersEmployersEmployeesAbsencesAbsenceIdGetResponse3,
    ProvidersEmployersEmployeesAbsencesAbsenceIdPutResponse,
    ProvidersEmployersEmployeesAbsencesAbsenceIdPutResponse1,
    ProvidersEmployersEmployeesAbsencesAbsenceIdPutResponse2,
    ProvidersEmployersEmployeesAbsencesAbsenceIdPutResponse3,
    ProvidersEmployersEmployeesAbsencesAbsenceIdPutResponse4,
    ProvidersEmployersEmployeesAbsencesAbsenceIdReopenabsencePatchResponse,
    ProvidersEmployersEmployeesAbsencesAbsenceIdReopenabsencePatchResponse1,
    ProvidersEmployersEmployeesAbsencesAbsenceIdReopenabsencePatchResponse2,
    ProvidersEmployersEmployeesAbsencesAbsenceIdReopenabsencePatchResponse3,
    ProvidersEmployersEmployeesAbsencesAbsenceprogressAbsenceProgressIdDeleteResponse,
    ProvidersEmployersEmployeesAbsencesAbsenceprogressAbsenceProgressIdDeleteResponse1,
    ProvidersEmployersEmployeesAbsencesAbsenceprogressAbsenceProgressIdDeleteResponse2,
    ProvidersEmployersEmployeesAbsencesAbsenceprogressAbsenceProgressIdDeleteResponse3,
    ProvidersEmployersEmployeesAbsencesAbsenceprogressAbsenceProgressIdGetResponse,
    ProvidersEmployersEmployeesAbsencesAbsenceprogressAbsenceProgressIdGetResponse1,
    ProvidersEmployersEmployeesAbsencesAbsenceprogressAbsenceProgressIdGetResponse2,
    ProvidersEmployersEmployeesAbsencesAbsenceprogressAbsenceProgressIdGetResponse3,
    ProvidersEmployersEmployeesAbsencesAbsenceprogressAbsenceProgressIdPutResponse,
    ProvidersEmployersEmployeesAbsencesAbsenceprogressAbsenceProgressIdPutResponse1,
    ProvidersEmployersEmployeesAbsencesAbsenceprogressAbsenceProgressIdPutResponse2,
    ProvidersEmployersEmployeesAbsencesAbsenceprogressAbsenceProgressIdPutResponse3,
    ProvidersEmployersEmployeesAbsencesAbsenceprogressAbsenceProgressIdPutResponse4,
    ProvidersEmployersEmployeesChildrenChildIdDeleteResponse,
    ProvidersEmployersEmployeesChildrenChildIdDeleteResponse1,
    ProvidersEmployersEmployeesChildrenChildIdDeleteResponse2,
    ProvidersEmployersEmployeesChildrenChildIdDeleteResponse3,
    ProvidersEmployersEmployeesChildrenChildIdGetResponse,
    ProvidersEmployersEmployeesChildrenChildIdGetResponse1,
    ProvidersEmployersEmployeesChildrenChildIdGetResponse2,
    ProvidersEmployersEmployeesChildrenChildIdGetResponse3,
    ProvidersEmployersEmployeesChildrenChildIdPutResponse,
    ProvidersEmployersEmployeesChildrenChildIdPutResponse1,
    ProvidersEmployersEmployeesChildrenChildIdPutResponse2,
    ProvidersEmployersEmployeesChildrenChildIdPutResponse3,
    ProvidersEmployersEmployeesChildrenChildIdPutResponse4,
    ProvidersEmployersEmployeesContactsContactIdDeleteResponse,
    ProvidersEmployersEmployeesContactsContactIdDeleteResponse1,
    ProvidersEmployersEmployeesContactsContactIdDeleteResponse2,
    ProvidersEmployersEmployeesContactsContactIdDeleteResponse3,
    ProvidersEmployersEmployeesContactsContactIdGetResponse,
    ProvidersEmployersEmployeesContactsContactIdGetResponse1,
    ProvidersEmployersEmployeesContactsContactIdGetResponse2,
    ProvidersEmployersEmployeesContactsContactIdGetResponse3,
    ProvidersEmployersEmployeesContactsContactIdPutResponse,
    ProvidersEmployersEmployeesContactsContactIdPutResponse1,
    ProvidersEmployersEmployeesContactsContactIdPutResponse2,
    ProvidersEmployersEmployeesContactsContactIdPutResponse3,
    ProvidersEmployersEmployeesContactsContactIdPutResponse4,
    ProvidersEmployersEmployeesCustomfieldsEmployeeCustomFieldIdDeleteResponse,
    ProvidersEmployersEmployeesCustomfieldsEmployeeCustomFieldIdDeleteResponse1,
    ProvidersEmployersEmployeesCustomfieldsEmployeeCustomFieldIdDeleteResponse2,
    ProvidersEmployersEmployeesCustomfieldsEmployeeCustomFieldIdDeleteResponse3,
    ProvidersEmployersEmployeesCustomfieldsEmployeeCustomFieldIdGetResponse,
    ProvidersEmployersEmployeesCustomfieldsEmployeeCustomFieldIdGetResponse1,
    ProvidersEmployersEmployeesCustomfieldsEmployeeCustomFieldIdGetResponse2,
    ProvidersEmployersEmployeesCustomfieldsEmployeeCustomFieldIdGetResponse3,
    ProvidersEmployersEmployeesCustomfieldsEmployeeCustomFieldIdPutResponse,
    ProvidersEmployersEmployeesCustomfieldsEmployeeCustomFieldIdPutResponse1,
    ProvidersEmployersEmployeesCustomfieldsEmployeeCustomFieldIdPutResponse2,
    ProvidersEmployersEmployeesCustomfieldsEmployeeCustomFieldIdPutResponse3,
    ProvidersEmployersEmployeesCustomfieldsEmployeeCustomFieldIdPutResponse4,
    ProvidersEmployersEmployeesEducationsEmployeeEducationIdDeleteResponse,
    ProvidersEmployersEmployeesEducationsEmployeeEducationIdDeleteResponse1,
    ProvidersEmployersEmployeesEducationsEmployeeEducationIdDeleteResponse2,
    ProvidersEmployersEmployeesEducationsEmployeeEducationIdDeleteResponse3,
    ProvidersEmployersEmployeesEducationsEmployeeEducationIdGetResponse,
    ProvidersEmployersEmployeesEducationsEmployeeEducationIdGetResponse1,
    ProvidersEmployersEmployeesEducationsEmployeeEducationIdGetResponse2,
    ProvidersEmployersEmployeesEducationsEmployeeEducationIdGetResponse3,
    ProvidersEmployersEmployeesEducationsEmployeeEducationIdPutResponse,
    ProvidersEmployersEmployeesEducationsEmployeeEducationIdPutResponse1,
    ProvidersEmployersEmployeesEducationsEmployeeEducationIdPutResponse2,
    ProvidersEmployersEmployeesEducationsEmployeeEducationIdPutResponse3,
    ProvidersEmployersEmployeesEducationsEmployeeEducationIdPutResponse4,
    ProvidersEmployersEmployeesEmployeeIdAbsencesGetResponse,
    ProvidersEmployersEmployeesEmployeeIdAbsencesGetResponse1,
    ProvidersEmployersEmployeesEmployeeIdAbsencesGetResponse2,
    ProvidersEmployersEmployeesEmployeeIdAbsencesGetResponse3,
    ProvidersEmployersEmployeesEmployeeIdAbsencesOverviewGetResponse,
    ProvidersEmployersEmployeesEmployeeIdAbsencesOverviewGetResponse1,
    ProvidersEmployersEmployeesEmployeeIdAbsencesOverviewGetResponse2,
    ProvidersEmployersEmployeesEmployeeIdAbsencesPostResponse,
    ProvidersEmployersEmployeesEmployeeIdAbsencesPostResponse1,
    ProvidersEmployersEmployeesEmployeeIdAbsencesPostResponse2,
    ProvidersEmployersEmployeesEmployeeIdAbsencesPostResponse3,
    ProvidersEmployersEmployeesEmployeeIdBenifyurlGetResponse,
    ProvidersEmployersEmployeesEmployeeIdBenifyurlGetResponse1,
    ProvidersEmployersEmployeesEmployeeIdBenifyurlGetResponse2,
    ProvidersEmployersEmployeesEmployeeIdBenifyurlGetResponse3,
    ProvidersEmployersEmployeesEmployeeIdChangeaddressrequestPostResponse,
    ProvidersEmployersEmployeesEmployeeIdChangeaddressrequestPostResponse1,
    ProvidersEmployersEmployeesEmployeeIdChangeaddressrequestPostResponse2,
    ProvidersEmployersEmployeesEmployeeIdChangeaddressrequestPostResponse3,
    ProvidersEmployersEmployeesEmployeeIdChangecontactinformationrequestPostResponse,
    ProvidersEmployersEmployeesEmployeeIdChangecontactinformationrequestPostResponse1,
    ProvidersEmployersEmployeesEmployeeIdChangecontactinformationrequestPostResponse2,
    ProvidersEmployersEmployeesEmployeeIdChangecontactinformationrequestPostResponse3,
    ProvidersEmployersEmployeesEmployeeIdChildrenGetResponse,
    ProvidersEmployersEmployeesEmployeeIdChildrenGetResponse1,
    ProvidersEmployersEmployeesEmployeeIdChildrenGetResponse2,
    ProvidersEmployersEmployeesEmployeeIdChildrenGetResponse3,
    ProvidersEmployersEmployeesEmployeeIdChildrenPostResponse,
    ProvidersEmployersEmployeesEmployeeIdChildrenPostResponse1,
    ProvidersEmployersEmployeesEmployeeIdChildrenPostResponse2,
    ProvidersEmployersEmployeesEmployeeIdChildrenPostResponse3,
    ProvidersEmployersEmployeesEmployeeIdCitizenservicenumberGetResponse,
    ProvidersEmployersEmployeesEmployeeIdCitizenservicenumberGetResponse1,
    ProvidersEmployersEmployeesEmployeeIdCitizenservicenumberGetResponse2,
    ProvidersEmployersEmployeesEmployeeIdCitizenservicenumberGetResponse3,
    ProvidersEmployersEmployeesEmployeeIdCitizenservicenumberPutResponse,
    ProvidersEmployersEmployeesEmployeeIdCitizenservicenumberPutResponse1,
    ProvidersEmployersEmployeesEmployeeIdCitizenservicenumberPutResponse2,
    ProvidersEmployersEmployeesEmployeeIdCitizenservicenumberPutResponse3,
    ProvidersEmployersEmployeesEmployeeIdContactsGetResponse,
    ProvidersEmployersEmployeesEmployeeIdContactsGetResponse1,
    ProvidersEmployersEmployeesEmployeeIdContactsGetResponse2,
    ProvidersEmployersEmployeesEmployeeIdContactsGetResponse3,
    ProvidersEmployersEmployeesEmployeeIdContactsPostResponse,
    ProvidersEmployersEmployeesEmployeeIdContactsPostResponse1,
    ProvidersEmployersEmployeesEmployeeIdContactsPostResponse2,
    ProvidersEmployersEmployeesEmployeeIdContactsPostResponse3,
    ProvidersEmployersEmployeesEmployeeIdCustomfieldsGetResponse,
    ProvidersEmployersEmployeesEmployeeIdCustomfieldsGetResponse1,
    ProvidersEmployersEmployeesEmployeeIdCustomfieldsGetResponse2,
    ProvidersEmployersEmployeesEmployeeIdCustomfieldsGetResponse3,
    ProvidersEmployersEmployeesEmployeeIdCustomfieldsPostResponse,
    ProvidersEmployersEmployeesEmployeeIdCustomfieldsPostResponse1,
    ProvidersEmployersEmployeesEmployeeIdCustomfieldsPostResponse2,
    ProvidersEmployersEmployeesEmployeeIdCustomfieldsPostResponse3,
    ProvidersEmployersEmployeesEmployeeIdEducationsGetResponse,
    ProvidersEmployersEmployeesEmployeeIdEducationsGetResponse1,
    ProvidersEmployersEmployeesEmployeeIdEducationsGetResponse2,
    ProvidersEmployersEmployeesEmployeeIdEducationsGetResponse3,
    ProvidersEmployersEmployeesEmployeeIdEducationsPostResponse,
    ProvidersEmployersEmployeesEmployeeIdEducationsPostResponse1,
    ProvidersEmployersEmployeesEmployeeIdEducationsPostResponse2,
    ProvidersEmployersEmployeesEmployeeIdEducationsPostResponse3,
    ProvidersEmployersEmployeesEmployeeIdEmploymentsGetResponse,
    ProvidersEmployersEmployeesEmployeeIdEmploymentsGetResponse1,
    ProvidersEmployersEmployeesEmployeeIdEmploymentsGetResponse2,
    ProvidersEmployersEmployeesEmployeeIdEmploymentsGetResponse3,
    ProvidersEmployersEmployeesEmployeeIdEmploymentsPostResponse,
    ProvidersEmployersEmployeesEmployeeIdEmploymentsPostResponse1,
    ProvidersEmployersEmployeesEmployeeIdEmploymentsPostResponse2,
    ProvidersEmployersEmployeesEmployeeIdEmploymentsPostResponse3,
    ProvidersEmployersEmployeesEmployeeIdGetResponse,
    ProvidersEmployersEmployeesEmployeeIdGetResponse2,
    ProvidersEmployersEmployeesEmployeeIdGetResponse3,
    ProvidersEmployersEmployeesEmployeeIdGetResponse4,
    ProvidersEmployersEmployeesEmployeeIdNotesGetResponse,
    ProvidersEmployersEmployeesEmployeeIdNotesGetResponse1,
    ProvidersEmployersEmployeesEmployeeIdNotesGetResponse2,
    ProvidersEmployersEmployeesEmployeeIdNotesGetResponse3,
    ProvidersEmployersEmployeesEmployeeIdNotesPostResponse,
    ProvidersEmployersEmployeesEmployeeIdNotesPostResponse1,
    ProvidersEmployersEmployeesEmployeeIdNotesPostResponse2,
    ProvidersEmployersEmployeesEmployeeIdNotesPostResponse3,
    ProvidersEmployersEmployeesEmployeeIdOccupationaldisabilitiesGetResponse,
    ProvidersEmployersEmployeesEmployeeIdOccupationaldisabilitiesGetResponse1,
    ProvidersEmployersEmployeesEmployeeIdOccupationaldisabilitiesGetResponse2,
    ProvidersEmployersEmployeesEmployeeIdOccupationaldisabilitiesGetResponse3,
    ProvidersEmployersEmployeesEmployeeIdPartnersGetResponse,
    ProvidersEmployersEmployeesEmployeeIdPartnersGetResponse1,
    ProvidersEmployersEmployeesEmployeeIdPartnersGetResponse2,
    ProvidersEmployersEmployeesEmployeeIdPartnersGetResponse3,
    ProvidersEmployersEmployeesEmployeeIdPartnersPostResponse,
    ProvidersEmployersEmployeesEmployeeIdPartnersPostResponse1,
    ProvidersEmployersEmployeesEmployeeIdPartnersPostResponse2,
    ProvidersEmployersEmployeesEmployeeIdPartnersPostResponse3,
    ProvidersEmployersEmployeesEmployeeIdPhotoDeleteResponse,
    ProvidersEmployersEmployeesEmployeeIdPhotoDeleteResponse1,
    ProvidersEmployersEmployeesEmployeeIdPhotoDeleteResponse2,
    ProvidersEmployersEmployeesEmployeeIdPhotoDeleteResponse3,
    ProvidersEmployersEmployeesEmployeeIdPhotoGetResponse,
    ProvidersEmployersEmployeesEmployeeIdPhotoGetResponse1,
    ProvidersEmployersEmployeesEmployeeIdPhotoPostResponse,
    ProvidersEmployersEmployeesEmployeeIdPhotoPostResponse1,
    ProvidersEmployersEmployeesEmployeeIdPhotoVersionGetResponse,
    ProvidersEmployersEmployeesEmployeeIdPhotoVersionGetResponse1,
    ProvidersEmployersEmployeesEmployeeIdPutResponse,
    ProvidersEmployersEmployeesEmployeeIdPutResponse2,
    ProvidersEmployersEmployeesEmployeeIdPutResponse3,
    ProvidersEmployersEmployeesEmployeeIdPutResponse4,
    ProvidersEmployersEmployeesEmployeeIdRevokeEmployeeSelfServiceAccessPatchResponse,
    ProvidersEmployersEmployeesEmployeeIdRevokeEmployeeSelfServiceAccessPatchResponse1,
    ProvidersEmployersEmployeesEmployeeIdRevokeEmployeeSelfServiceAccessPatchResponse2,
    ProvidersEmployersEmployeesEmployeeIdRevokeEmployeeSelfServiceAccessPatchResponse3,
    ProvidersEmployersEmployeesEmployeeIdRevokeEmployeeSelfServiceAccessPatchResponse4,
    ProvidersEmployersEmployeesEmployeeIdSelfserviceGetResponse,
    ProvidersEmployersEmployeesEmployeeIdSelfserviceGetResponse1,
    ProvidersEmployersEmployeesEmployeeIdSelfserviceGetResponse2,
    ProvidersEmployersEmployeesEmployeeIdSelfserviceGetResponse3,
    ProvidersEmployersEmployeesEmploymentsAbpfundsAbpFundIdDeleteResponse,
    ProvidersEmployersEmployeesEmploymentsAbpfundsAbpFundIdDeleteResponse1,
    ProvidersEmployersEmployeesEmploymentsAbpfundsAbpFundIdDeleteResponse2,
    ProvidersEmployersEmployeesEmploymentsAbpfundsAbpFundIdDeleteResponse3,
    ProvidersEmployersEmployeesEmploymentsAbpfundsAbpFundIdGetResponse,
    ProvidersEmployersEmployeesEmploymentsAbpfundsAbpFundIdGetResponse1,
    ProvidersEmployersEmployeesEmploymentsAbpfundsAbpFundIdGetResponse2,
    ProvidersEmployersEmployeesEmploymentsAbpfundsAbpFundIdGetResponse3,
    ProvidersEmployersEmployeesEmploymentsAbpfundsAbpFundIdPutResponse,
    ProvidersEmployersEmployeesEmploymentsAbpfundsAbpFundIdPutResponse1,
    ProvidersEmployersEmployeesEmploymentsAbpfundsAbpFundIdPutResponse2,
    ProvidersEmployersEmployeesEmploymentsAbpfundsAbpFundIdPutResponse3,
    ProvidersEmployersEmployeesEmploymentsAbpfundsAbpFundIdPutResponse4,
    ProvidersEmployersEmployeesEmploymentsAttachmentsofearningsAttachmentOfEarningsIdDeleteResponse,
    ProvidersEmployersEmployeesEmploymentsAttachmentsofearningsAttachmentOfEarningsIdDeleteResponse1,
    ProvidersEmployersEmployeesEmploymentsAttachmentsofearningsAttachmentOfEarningsIdDeleteResponse2,
    ProvidersEmployersEmployeesEmploymentsAttachmentsofearningsAttachmentOfEarningsIdDeleteResponse3,
    ProvidersEmployersEmployeesEmploymentsAttachmentsofearningsAttachmentOfEarningsIdGetResponse,
    ProvidersEmployersEmployeesEmploymentsAttachmentsofearningsAttachmentOfEarningsIdGetResponse1,
    ProvidersEmployersEmployeesEmploymentsAttachmentsofearningsAttachmentOfEarningsIdGetResponse2,
    ProvidersEmployersEmployeesEmploymentsAttachmentsofearningsAttachmentOfEarningsIdGetResponse3,
    ProvidersEmployersEmployeesEmploymentsAttachmentsofearningsAttachmentOfEarningsIdPutResponse,
    ProvidersEmployersEmployeesEmploymentsAttachmentsofearningsAttachmentOfEarningsIdPutResponse1,
    ProvidersEmployersEmployeesEmploymentsAttachmentsofearningsAttachmentOfEarningsIdPutResponse2,
    ProvidersEmployersEmployeesEmploymentsAttachmentsofearningsAttachmentOfEarningsIdPutResponse3,
    ProvidersEmployersEmployeesEmploymentsAttachmentsofearningsAttachmentOfEarningsIdPutResponse4,
    ProvidersEmployersEmployeesEmploymentsBasesforcalculationBaseforcalculationIdDeleteResponse,
    ProvidersEmployersEmployeesEmploymentsBasesforcalculationBaseforcalculationIdDeleteResponse1,
    ProvidersEmployersEmployeesEmploymentsBasesforcalculationBaseforcalculationIdDeleteResponse2,
    ProvidersEmployersEmployeesEmploymentsBasesforcalculationBaseforcalculationIdDeleteResponse3,
    ProvidersEmployersEmployeesEmploymentsBasesforcalculationBaseforcalculationIdGetResponse,
    ProvidersEmployersEmployeesEmploymentsBasesforcalculationBaseforcalculationIdGetResponse1,
    ProvidersEmployersEmployeesEmploymentsBasesforcalculationBaseforcalculationIdGetResponse2,
    ProvidersEmployersEmployeesEmploymentsBasesforcalculationBaseforcalculationIdGetResponse3,
    ProvidersEmployersEmployeesEmploymentsBasesforcalculationBaseforcalculationIdPutResponse,
    ProvidersEmployersEmployeesEmploymentsBasesforcalculationBaseforcalculationIdPutResponse1,
    ProvidersEmployersEmployeesEmploymentsBasesforcalculationBaseforcalculationIdPutResponse2,
    ProvidersEmployersEmployeesEmploymentsBasesforcalculationBaseforcalculationIdPutResponse3,
    ProvidersEmployersEmployeesEmploymentsBasesforcalculationBaseforcalculationIdPutResponse4,
    ProvidersEmployersEmployeesEmploymentsBasesforemploymentfundcalculationBaseforemploymentfundcalculationIdDeleteResponse,
    ProvidersEmployersEmployeesEmploymentsBasesforemploymentfundcalculationBaseforemploymentfundcalculationIdDeleteResponse1,
    ProvidersEmployersEmployeesEmploymentsBasesforemploymentfundcalculationBaseforemploymentfundcalculationIdDeleteResponse2,
    ProvidersEmployersEmployeesEmploymentsBasesforemploymentfundcalculationBaseforemploymentfundcalculationIdDeleteResponse3,
    ProvidersEmployersEmployeesEmploymentsBasesforemploymentfundcalculationBaseforemploymentfundcalculationIdGetResponse,
    ProvidersEmployersEmployeesEmploymentsBasesforemploymentfundcalculationBaseforemploymentfundcalculationIdGetResponse1,
    ProvidersEmployersEmployeesEmploymentsBasesforemploymentfundcalculationBaseforemploymentfundcalculationIdGetResponse2,
    ProvidersEmployersEmployeesEmploymentsBasesforemploymentfundcalculationBaseforemploymentfundcalculationIdGetResponse3,
    ProvidersEmployersEmployeesEmploymentsBasesforemploymentfundcalculationBaseforemploymentfundcalculationIdPutResponse,
    ProvidersEmployersEmployeesEmploymentsBasesforemploymentfundcalculationBaseforemploymentfundcalculationIdPutResponse1,
    ProvidersEmployersEmployeesEmploymentsBasesforemploymentfundcalculationBaseforemploymentfundcalculationIdPutResponse2,
    ProvidersEmployersEmployeesEmploymentsBasesforemploymentfundcalculationBaseforemploymentfundcalculationIdPutResponse3,
    ProvidersEmployersEmployeesEmploymentsBasesforemploymentfundcalculationBaseforemploymentfundcalculationIdPutResponse4,
    ProvidersEmployersEmployeesEmploymentsBenefitsAndDeductionsBenefitsanddeductionsIdDeleteResponse,
    ProvidersEmployersEmployeesEmploymentsBenefitsAndDeductionsBenefitsanddeductionsIdDeleteResponse1,
    ProvidersEmployersEmployeesEmploymentsBenefitsAndDeductionsBenefitsanddeductionsIdDeleteResponse2,
    ProvidersEmployersEmployeesEmploymentsBenefitsAndDeductionsBenefitsanddeductionsIdDeleteResponse3,
    ProvidersEmployersEmployeesEmploymentsBenefitsAndDeductionsBenefitsanddeductionsIdGetResponse,
    ProvidersEmployersEmployeesEmploymentsBenefitsAndDeductionsBenefitsanddeductionsIdGetResponse1,
    ProvidersEmployersEmployeesEmploymentsBenefitsAndDeductionsBenefitsanddeductionsIdGetResponse2,
    ProvidersEmployersEmployeesEmploymentsBenefitsAndDeductionsBenefitsanddeductionsIdGetResponse3,
    ProvidersEmployersEmployeesEmploymentsBenefitsAndDeductionsBenefitsanddeductionsIdPutResponse,
    ProvidersEmployersEmployeesEmploymentsBenefitsAndDeductionsBenefitsanddeductionsIdPutResponse1,
    ProvidersEmployersEmployeesEmploymentsBenefitsAndDeductionsBenefitsanddeductionsIdPutResponse2,
    ProvidersEmployersEmployeesEmploymentsBenefitsAndDeductionsBenefitsanddeductionsIdPutResponse3,
    ProvidersEmployersEmployeesEmploymentsBenefitsAndDeductionsBenefitsanddeductionsIdPutResponse4,
    ProvidersEmployersEmployeesEmploymentsBenefitsinkindBenefitInKindIdDeleteResponse,
    ProvidersEmployersEmployeesEmploymentsBenefitsinkindBenefitInKindIdDeleteResponse1,
    ProvidersEmployersEmployeesEmploymentsBenefitsinkindBenefitInKindIdDeleteResponse2,
    ProvidersEmployersEmployeesEmploymentsBenefitsinkindBenefitInKindIdDeleteResponse3,
    ProvidersEmployersEmployeesEmploymentsBenefitsinkindBenefitInKindIdGetResponse,
    ProvidersEmployersEmployeesEmploymentsBenefitsinkindBenefitInKindIdGetResponse1,
    ProvidersEmployersEmployeesEmploymentsBenefitsinkindBenefitInKindIdGetResponse2,
    ProvidersEmployersEmployeesEmploymentsBenefitsinkindBenefitInKindIdGetResponse3,
    ProvidersEmployersEmployeesEmploymentsBenefitsinkindBenefitInKindIdPutResponse,
    ProvidersEmployersEmployeesEmploymentsBenefitsinkindBenefitInKindIdPutResponse1,
    ProvidersEmployersEmployeesEmploymentsBenefitsinkindBenefitInKindIdPutResponse2,
    ProvidersEmployersEmployeesEmploymentsBenefitsinkindBenefitInKindIdPutResponse3,
    ProvidersEmployersEmployeesEmploymentsBenefitsinkindBenefitInKindIdPutResponse4,
    ProvidersEmployersEmployeesEmploymentsCompanycarsCompanyCarIdDeleteResponse,
    ProvidersEmployersEmployeesEmploymentsCompanycarsCompanyCarIdDeleteResponse1,
    ProvidersEmployersEmployeesEmploymentsCompanycarsCompanyCarIdDeleteResponse2,
    ProvidersEmployersEmployeesEmploymentsCompanycarsCompanyCarIdDeleteResponse3,
    ProvidersEmployersEmployeesEmploymentsCompanycarsCompanyCarIdGetResponse,
    ProvidersEmployersEmployeesEmploymentsCompanycarsCompanyCarIdGetResponse1,
    ProvidersEmployersEmployeesEmploymentsCompanycarsCompanyCarIdGetResponse2,
    ProvidersEmployersEmployeesEmploymentsCompanycarsCompanyCarIdGetResponse3,
    ProvidersEmployersEmployeesEmploymentsCompanycarsCompanyCarIdPutResponse,
    ProvidersEmployersEmployeesEmploymentsCompanycarsCompanyCarIdPutResponse1,
    ProvidersEmployersEmployeesEmploymentsCompanycarsCompanyCarIdPutResponse2,
    ProvidersEmployersEmployeesEmploymentsCompanycarsCompanyCarIdPutResponse3,
    ProvidersEmployersEmployeesEmploymentsCompanycarsCompanyCarIdPutResponse4,
    ProvidersEmployersEmployeesEmploymentsCostperhourCostperhourIdDeleteResponse,
    ProvidersEmployersEmployeesEmploymentsCostperhourCostperhourIdDeleteResponse1,
    ProvidersEmployersEmployeesEmploymentsCostperhourCostperhourIdDeleteResponse2,
    ProvidersEmployersEmployeesEmploymentsCostperhourCostperhourIdDeleteResponse3,
    ProvidersEmployersEmployeesEmploymentsCostperhourCostperhourIdGetResponse,
    ProvidersEmployersEmployeesEmploymentsCostperhourCostperhourIdGetResponse1,
    ProvidersEmployersEmployeesEmploymentsCostperhourCostperhourIdGetResponse2,
    ProvidersEmployersEmployeesEmploymentsCostperhourCostperhourIdGetResponse3,
    ProvidersEmployersEmployeesEmploymentsCostperhourCostperhourIdPutResponse,
    ProvidersEmployersEmployeesEmploymentsCostperhourCostperhourIdPutResponse1,
    ProvidersEmployersEmployeesEmploymentsCostperhourCostperhourIdPutResponse2,
    ProvidersEmployersEmployeesEmploymentsCostperhourCostperhourIdPutResponse3,
    ProvidersEmployersEmployeesEmploymentsCostperhourCostperhourIdPutResponse4,
    ProvidersEmployersEmployeesEmploymentsCustomfieldsEmploymentCustomFieldIdDeleteResponse,
    ProvidersEmployersEmployeesEmploymentsCustomfieldsEmploymentCustomFieldIdDeleteResponse1,
    ProvidersEmployersEmployeesEmploymentsCustomfieldsEmploymentCustomFieldIdDeleteResponse2,
    ProvidersEmployersEmployeesEmploymentsCustomfieldsEmploymentCustomFieldIdDeleteResponse3,
    ProvidersEmployersEmployeesEmploymentsCustomfieldsEmploymentCustomFieldIdGetResponse,
    ProvidersEmployersEmployeesEmploymentsCustomfieldsEmploymentCustomFieldIdGetResponse1,
    ProvidersEmployersEmployeesEmploymentsCustomfieldsEmploymentCustomFieldIdGetResponse2,
    ProvidersEmployersEmployeesEmploymentsCustomfieldsEmploymentCustomFieldIdGetResponse3,
    ProvidersEmployersEmployeesEmploymentsCustomfieldsEmploymentCustomFieldIdPutResponse,
    ProvidersEmployersEmployeesEmploymentsCustomfieldsEmploymentCustomFieldIdPutResponse1,
    ProvidersEmployersEmployeesEmploymentsCustomfieldsEmploymentCustomFieldIdPutResponse2,
    ProvidersEmployersEmployeesEmploymentsCustomfieldsEmploymentCustomFieldIdPutResponse3,
    ProvidersEmployersEmployeesEmploymentsCustomfieldsEmploymentCustomFieldIdPutResponse4,
    ProvidersEmployersEmployeesEmploymentsCustomnotificationsCustomNotificationIdDeleteResponse,
    ProvidersEmployersEmployeesEmploymentsCustomnotificationsCustomNotificationIdDeleteResponse1,
    ProvidersEmployersEmployeesEmploymentsCustomnotificationsCustomNotificationIdDeleteResponse2,
    ProvidersEmployersEmployeesEmploymentsCustomnotificationsCustomNotificationIdDeleteResponse3,
    ProvidersEmployersEmployeesEmploymentsCustomnotificationsCustomNotificationIdGetResponse,
    ProvidersEmployersEmployeesEmploymentsCustomnotificationsCustomNotificationIdGetResponse1,
    ProvidersEmployersEmployeesEmploymentsCustomnotificationsCustomNotificationIdGetResponse2,
    ProvidersEmployersEmployeesEmploymentsCustomnotificationsCustomNotificationIdGetResponse3,
    ProvidersEmployersEmployeesEmploymentsCustomnotificationsCustomNotificationIdPutResponse,
    ProvidersEmployersEmployeesEmploymentsCustomnotificationsCustomNotificationIdPutResponse1,
    ProvidersEmployersEmployeesEmploymentsCustomnotificationsCustomNotificationIdPutResponse2,
    ProvidersEmployersEmployeesEmploymentsCustomnotificationsCustomNotificationIdPutResponse3,
    ProvidersEmployersEmployeesEmploymentsCustomnotificationsCustomNotificationIdPutResponse4,
    ProvidersEmployersEmployeesEmploymentsDeclarationsDeclarationIdAttachmentGetResponse,
    ProvidersEmployersEmployeesEmploymentsDeclarationsDeclarationIdAttachmentGetResponse1,
    ProvidersEmployersEmployeesEmploymentsDeclarationsDeclarationIdAudittrailGetResponse,
    ProvidersEmployersEmployeesEmploymentsDeclarationsDeclarationIdAudittrailGetResponse1,
    ProvidersEmployersEmployeesEmploymentsDeclarationsDeclarationIdAudittrailGetResponse2,
    ProvidersEmployersEmployeesEmploymentsDeclarationsDeclarationIdAudittrailGetResponse3,
    ProvidersEmployersEmployeesEmploymentsDeclarationsDeclarationIdGetResponse,
    ProvidersEmployersEmployeesEmploymentsDeclarationsDeclarationIdGetResponse1,
    ProvidersEmployersEmployeesEmploymentsDeclarationsDeclarationIdGetResponse2,
    ProvidersEmployersEmployeesEmploymentsDeclarationsDeclarationIdGetResponse3,
    ProvidersEmployersEmployeesEmploymentsDeclarationsProcessPatchResponse,
    ProvidersEmployersEmployeesEmploymentsDeclarationsProcessPatchResponse1,
    ProvidersEmployersEmployeesEmploymentsDeclarationsProcessPatchResponse2,
    ProvidersEmployersEmployeesEmploymentsDeclarationsProcessPatchResponse3,
    ProvidersEmployersEmployeesEmploymentsDeclarationsReviewPatchResponse,
    ProvidersEmployersEmployeesEmploymentsDeclarationsReviewPatchResponse1,
    ProvidersEmployersEmployeesEmploymentsDeclarationsReviewPatchResponse2,
    ProvidersEmployersEmployeesEmploymentsDeclarationsReviewPatchResponse3,
    ProvidersEmployersEmployeesEmploymentsDeviatingawfcontributionsDeviatingAwfContributionIdDeleteResponse,
    ProvidersEmployersEmployeesEmploymentsDeviatingawfcontributionsDeviatingAwfContributionIdDeleteResponse1,
    ProvidersEmployersEmployeesEmploymentsDeviatingawfcontributionsDeviatingAwfContributionIdDeleteResponse2,
    ProvidersEmployersEmployeesEmploymentsDeviatingawfcontributionsDeviatingAwfContributionIdDeleteResponse3,
    ProvidersEmployersEmployeesEmploymentsDeviatingawfcontributionsDeviatingAwfContributionIdGetResponse,
    ProvidersEmployersEmployeesEmploymentsDeviatingawfcontributionsDeviatingAwfContributionIdGetResponse1,
    ProvidersEmployersEmployeesEmploymentsDeviatingawfcontributionsDeviatingAwfContributionIdGetResponse2,
    ProvidersEmployersEmployeesEmploymentsDeviatingawfcontributionsDeviatingAwfContributionIdGetResponse3,
    ProvidersEmployersEmployeesEmploymentsDeviatingawfcontributionsDeviatingAwfContributionIdPutResponse,
    ProvidersEmployersEmployeesEmploymentsDeviatingawfcontributionsDeviatingAwfContributionIdPutResponse1,
    ProvidersEmployersEmployeesEmploymentsDeviatingawfcontributionsDeviatingAwfContributionIdPutResponse2,
    ProvidersEmployersEmployeesEmploymentsDeviatingawfcontributionsDeviatingAwfContributionIdPutResponse3,
    ProvidersEmployersEmployeesEmploymentsDeviatingawfcontributionsDeviatingAwfContributionIdPutResponse4,
    ProvidersEmployersEmployeesEmploymentsDeviatinghourlywagesDeviatingHourlyWageIdDeleteResponse,
    ProvidersEmployersEmployeesEmploymentsDeviatinghourlywagesDeviatingHourlyWageIdDeleteResponse1,
    ProvidersEmployersEmployeesEmploymentsDeviatinghourlywagesDeviatingHourlyWageIdDeleteResponse2,
    ProvidersEmployersEmployeesEmploymentsDeviatinghourlywagesDeviatingHourlyWageIdDeleteResponse3,
    ProvidersEmployersEmployeesEmploymentsDeviatinghourlywagesDeviatingHourlyWageIdGetResponse,
    ProvidersEmployersEmployeesEmploymentsDeviatinghourlywagesDeviatingHourlyWageIdGetResponse1,
    ProvidersEmployersEmployeesEmploymentsDeviatinghourlywagesDeviatingHourlyWageIdGetResponse2,
    ProvidersEmployersEmployeesEmploymentsDeviatinghourlywagesDeviatingHourlyWageIdGetResponse3,
    ProvidersEmployersEmployeesEmploymentsDeviatinghourlywagesDeviatingHourlyWageIdPutResponse,
    ProvidersEmployersEmployeesEmploymentsDeviatinghourlywagesDeviatingHourlyWageIdPutResponse1,
    ProvidersEmployersEmployeesEmploymentsDeviatinghourlywagesDeviatingHourlyWageIdPutResponse2,
    ProvidersEmployersEmployeesEmploymentsDeviatinghourlywagesDeviatingHourlyWageIdPutResponse3,
    ProvidersEmployersEmployeesEmploymentsDeviatinghourlywagesDeviatingHourlyWageIdPutResponse4,
    ProvidersEmployersEmployeesEmploymentsEmploymentfundsEmploymentFundIdDeleteResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentfundsEmploymentFundIdDeleteResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentfundsEmploymentFundIdDeleteResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentfundsEmploymentFundIdDeleteResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentfundsEmploymentFundIdGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentfundsEmploymentFundIdGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentfundsEmploymentFundIdGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentfundsEmploymentFundIdGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentfundsEmploymentFundIdPutResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentfundsEmploymentFundIdPutResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentfundsEmploymentFundIdPutResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentfundsEmploymentFundIdPutResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentfundsEmploymentFundIdPutResponse4,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdAbpfundsGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdAbpfundsGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdAbpfundsGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdAbpfundsGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdAbpfundsPostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdAbpfundsPostResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdAbpfundsPostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdAbpfundsPostResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdAttachmentsofearningsGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdAttachmentsofearningsGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdAttachmentsofearningsGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdAttachmentsofearningsGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdAttachmentsofearningsPostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdAttachmentsofearningsPostResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdAttachmentsofearningsPostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdAttachmentsofearningsPostResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdBasesforcalculationGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdBasesforcalculationGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdBasesforcalculationGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdBasesforcalculationGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdBasesforcalculationPostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdBasesforcalculationPostResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdBasesforcalculationPostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdBasesforcalculationPostResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdBasesforemploymentfundcalculationGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdBasesforemploymentfundcalculationGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdBasesforemploymentfundcalculationGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdBasesforemploymentfundcalculationGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdBasesforemploymentfundcalculationPostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdBasesforemploymentfundcalculationPostResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdBasesforemploymentfundcalculationPostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdBasesforemploymentfundcalculationPostResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdBenefitsanddeductionsGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdBenefitsanddeductionsGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdBenefitsanddeductionsGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdBenefitsanddeductionsGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdBenefitsanddeductionsPostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdBenefitsanddeductionsPostResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdBenefitsanddeductionsPostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdBenefitsanddeductionsPostResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdBenefitsInKindGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdBenefitsInKindGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdBenefitsInKindGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdBenefitsInKindGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdBenefitsInKindPostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdBenefitsInKindPostResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdBenefitsInKindPostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdBenefitsInKindPostResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdCompanycarsGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdCompanycarsGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdCompanycarsGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdCompanycarsGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdCompanycarsPostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdCompanycarsPostResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdCompanycarsPostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdCompanycarsPostResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdCorrectstartdatePatchResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdCorrectstartdatePatchResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdCorrectstartdatePatchResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdCorrectstartdatePatchResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdCorrectstartdatePatchResponse4,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdCostperhourGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdCostperhourGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdCostperhourGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdCostperhourGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdCostperhourPostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdCostperhourPostResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdCostperhourPostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdCostperhourPostResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdCustomfieldsGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdCustomfieldsGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdCustomfieldsGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdCustomfieldsGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdCustomfieldsPostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdCustomfieldsPostResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdCustomfieldsPostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdCustomfieldsPostResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdCustomnotificationsGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdCustomnotificationsGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdCustomnotificationsGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdCustomnotificationsGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdCustomnotificationsPostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdCustomnotificationsPostResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdCustomnotificationsPostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdCustomnotificationsPostResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDeclarationsGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDeclarationsGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDeclarationsGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDeclarationsGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDeviatingawfcontributionsGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDeviatingawfcontributionsGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDeviatingawfcontributionsGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDeviatingawfcontributionsGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDeviatingawfcontributionsPostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDeviatingawfcontributionsPostResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDeviatingawfcontributionsPostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDeviatingawfcontributionsPostResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDeviatinghourlywagesGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDeviatinghourlywagesGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDeviatinghourlywagesGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDeviatinghourlywagesGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDeviatinghourlywagesPostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDeviatinghourlywagesPostResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDeviatinghourlywagesPostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDeviatinghourlywagesPostResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumentsDocumentIdAudittrailGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumentsDocumentIdAudittrailGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumentsDocumentIdAudittrailGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumentsDocumentIdAudittrailGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumentsDocumentIdDeleteResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumentsDocumentIdDeleteResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumentsDocumentIdDeleteResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumentsDocumentIdDeleteResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumentsDocumentIdGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumentsDocumentIdGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumentsDocumentIdPutResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumentsDocumentIdPutResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumentsDocumentIdPutResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumentsDocumentIdPutResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumentsDocumentIdSignatureDeleteResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumentsDocumentIdSignatureDeleteResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumentsDocumentIdSignatureDeleteResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumentsDocumentIdSignatureGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumentsDocumentIdSignatureGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumentsDocumentIdSignatureGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumentsDocumentIdSignatureGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumentsDocumentIdSignatureInitiatePostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumentsDocumentIdSignatureInitiatePostResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumentsDocumentIdSignatureInitiatePostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumentsDocumentIdSignatureInitiatePostResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumentsDocumentIdSignatureReportGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumentsDocumentIdSignatureReportGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumentsDocumentIdSignatureReportGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumentsGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumentsGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumentsGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumentsGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumentsPostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumentsPostResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumentsPostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumenttemplatesDocumentIdGeneratedocumentPostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumenttemplatesDocumentIdGeneratedocumentPostResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumenttemplatesDocumentIdGeneratedocumentPostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumenttemplatesDocumentIdGeneratedocumentPreviewPostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumenttemplatesDocumentIdGeneratedocumentPreviewPostResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdDocumenttemplatesDocumentIdGeneratedocumentPreviewPostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdEmployeeprofilePatchResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdEmployeeprofilePatchResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdEmployeeprofilePatchResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdEmployeeprofilePatchResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdEmploymentfundsGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdEmploymentfundsGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdEmploymentfundsGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdEmploymentfundsGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdEmploymentfundsPostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdEmploymentfundsPostResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdEmploymentfundsPostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdEmploymentfundsPostResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdFiscalcompanycarsGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdFiscalcompanycarsGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdFiscalcompanycarsGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdFiscalcompanycarsGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdFiscalcompanycarsPostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdFiscalcompanycarsPostResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdFiscalcompanycarsPostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdFiscalcompanycarsPostResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdFiscalpropertiesGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdFiscalpropertiesGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdFiscalpropertiesGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdFiscalpropertiesGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdFiscalpropertiesPostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdFiscalpropertiesPostResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdFiscalpropertiesPostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdFiscalpropertiesPostResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdHealthcareinsuranceactconfigurationsGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdHealthcareinsuranceactconfigurationsGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdHealthcareinsuranceactconfigurationsGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdHealthcareinsuranceactconfigurationsGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdHealthcareinsuranceactconfigurationsPostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdHealthcareinsuranceactconfigurationsPostResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdHealthcareinsuranceactconfigurationsPostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdHealthcareinsuranceactconfigurationsPostResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdJournalallocationsGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdJournalallocationsGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdJournalallocationsGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdJournalallocationsGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdJournalallocationsPostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdJournalallocationsPostResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdJournalallocationsPostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdJournalallocationsPostResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeavebalancesGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeavebalancesGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeavebalancesGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeavebalancesGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeaveDefaultsGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeaveDefaultsGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeaveDefaultsGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeaveDefaultsGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeaveGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeaveGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeaveGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeaveGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeaveMetadataGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeaveMetadataGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeaveMetadataGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeaveMetadataGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeaveOverviewYearGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeaveOverviewYearGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeaveOverviewYearGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeavepoliciesGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeavepoliciesGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeavepoliciesGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeavepoliciesGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeavepoliciesPatchRequest,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeavepoliciesPatchResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeavepoliciesPatchResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeavepoliciesPatchResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeavepoliciesPatchResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeavepoliciesPatchResponse4,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeavePostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeavePostResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeavePostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeavePostResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeaveProposedleavehoursGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeaveProposedleavehoursGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeaveProposedleavehoursGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeaveProposedleavehoursGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeaverequestsGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeaverequestsGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeaverequestsGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdLeaverequestsGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdNotesGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdNotesGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdNotesGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdNotesGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdNotesPostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdNotesPostResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdNotesPostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdNotesPostResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdOrganizationalentitiesGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdOrganizationalentitiesGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdOrganizationalentitiesGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdOrganizationalentitiesGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdOrganizationalentitiesPostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdOrganizationalentitiesPostResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdOrganizationalentitiesPostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdOrganizationalentitiesPostResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdOtherPayrollVariablesGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdOtherPayrollVariablesGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdOtherPayrollVariablesGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdOtherPayrollVariablesGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdOtherPayrollVariablesPostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdOtherPayrollVariablesPostResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdOtherPayrollVariablesPostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdOtherPayrollVariablesPostResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPatchResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPatchResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPatchResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPatchResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPatchResponse4,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPaymentinformationnonsepaGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPaymentinformationnonsepaGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPaymentinformationnonsepaGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPaymentinformationnonsepaGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPaymentinformationnonsepaPostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPaymentinformationnonsepaPostResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPaymentinformationnonsepaPostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPaymentinformationnonsepaPostResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPaymentinformationsepaGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPaymentinformationsepaGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPaymentinformationsepaGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPaymentinformationsepaGetResponse4,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPaymentinformationsepaPostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPaymentinformationsepaPostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPaymentinformationsepaPostResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPaymentinformationsepaPostResponse4,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPaymentinformationsepaseparatepaymentsGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPaymentinformationsepaseparatepaymentsGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPaymentinformationsepaseparatepaymentsGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPaymentinformationsepaseparatepaymentsGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPaymentinformationsepaseparatepaymentsPostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPaymentinformationsepaseparatepaymentsPostResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPaymentinformationsepaseparatepaymentsPostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPaymentinformationsepaseparatepaymentsPostResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPayrollperioddataGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPayrollperioddataGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPayrollperioddataGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPayrollperioddataGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPayrollperioddataPatchResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPayrollperioddataPatchResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPayrollperioddataPatchResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPayrollperioddataPostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPayrollperioddataPostResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPayrollperioddataPostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPayrollperioddataPostResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPayrollperiodresultsYearYearGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPayrollperiodresultsYearYearGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPayrollperiodresultsYearYearGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPayrollperiodresultsYearYearGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPayrollSimulatorDataGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPayrollSimulatorDataGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPayrollSimulatorDataGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPayrollSimulatorDataGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPayslipsGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPayslipsGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPayslipsGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPayslipsGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPayslipsPayrollrunIdGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPayslipsPayrollrunIdGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPayslipsPayrollrunIdGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPayslipsPayrollrunIdGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPayslipsSummaryPayrollPeriodIdGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPayslipsSummaryPayrollPeriodIdGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPayslipsSummaryPayrollPeriodIdGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPayslipsYearGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPayslipsYearGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPayslipsYearGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPensionbenefitsGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPensionbenefitsGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPensionbenefitsGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPensionbenefitsGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPensionbenefitsPostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPensionbenefitsPostResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPensionbenefitsPostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPensionbenefitsPostResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdProtectedearningsGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdProtectedearningsGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdProtectedearningsGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdProtectedearningsGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdProtectedearningsPostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdProtectedearningsPostResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdProtectedearningsPostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdProtectedearningsPostResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPutResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPutResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPutResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPutResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdPutResponse4,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdReinstatePatchResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdReinstatePatchResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdReinstatePatchResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdReinstatePatchResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdReinstatePatchResponse4,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdSocialsecuritybenefitsGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdSocialsecuritybenefitsGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdSocialsecuritybenefitsGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdSocialsecuritybenefitsGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdSocialsecuritybenefitsPostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdSocialsecuritybenefitsPostResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdSocialsecuritybenefitsPostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdSocialsecuritybenefitsPostResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdSocialsecurityconfigurationsGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdSocialsecurityconfigurationsGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdSocialsecurityconfigurationsGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdSocialsecurityconfigurationsGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdSocialsecurityconfigurationsPostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdSocialsecurityconfigurationsPostResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdSocialsecurityconfigurationsPostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdSocialsecurityconfigurationsPostResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdTerminatePatchResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdTerminatePatchResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdTerminatePatchResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdTerminatePatchResponse4,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdTerminatePatchResponse5,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdTransitioncompensationCalculateDefaultsGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdTransitioncompensationCalculateDefaultsGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdTransitioncompensationCalculateDefaultsGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdTransitioncompensationCalculateDefaultsGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdTransitioncompensationCalculatePostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdTransitioncompensationCalculatePostResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdTransitioncompensationCalculatePostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdTransitioncompensationCalculatePostResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdTransitioncompensationPostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdTransitioncompensationPostResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdTransitioncompensationPostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdTransitioncompensationPostResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdWachtgeldGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdWachtgeldGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdWachtgeldGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdWachtgeldGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdWachtgeldPostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdWachtgeldPostResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdWachtgeldPostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdWachtgeldPostResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdWageprojectionBasedOnDefaultClaConfigurationPostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdWageprojectionBasedOnDefaultClaConfigurationPostResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdWageprojectionBasedOnDefaultClaConfigurationPostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdWageprojectionBasedOnDefaultClaConfigurationPostResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdWageprojectionPostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdWageprojectionPostResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdWageprojectionPostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdWageprojectionPostResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdWagesGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdWagesGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdWagesGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdWagesGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdWagesheetYearGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdWagesheetYearGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdWagesheetYearGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdWagesPostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdWagesPostResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdWagesPostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdWagesPostResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdWorkinghoursGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdWorkinghoursGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdWorkinghoursGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdWorkinghoursGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdWorkinghoursPostResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdWorkinghoursPostResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdWorkinghoursPostResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdWorkinghoursPostResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdYearendstatementsGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdYearendstatementsGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdYearendstatementsGetResponse2,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdYearendstatementsGetResponse3,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdYearendstatementsYearGetResponse,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdYearendstatementsYearGetResponse1,
    ProvidersEmployersEmployeesEmploymentsEmploymentIdYearendstatementsYearGetResponse2,
    ProvidersEmployersEmployeesEmploymentsFiscalcompanycarsFiscalCompanyCarIdDeleteResponse,
    ProvidersEmployersEmployeesEmploymentsFiscalcompanycarsFiscalCompanyCarIdDeleteResponse1,
    ProvidersEmployersEmployeesEmploymentsFiscalcompanycarsFiscalCompanyCarIdDeleteResponse2,
    ProvidersEmployersEmployeesEmploymentsFiscalcompanycarsFiscalCompanyCarIdDeleteResponse3,
    ProvidersEmployersEmployeesEmploymentsFiscalcompanycarsFiscalCompanyCarIdGetResponse,
    ProvidersEmployersEmployeesEmploymentsFiscalcompanycarsFiscalCompanyCarIdGetResponse1,
    ProvidersEmployersEmployeesEmploymentsFiscalcompanycarsFiscalCompanyCarIdGetResponse2,
    ProvidersEmployersEmployeesEmploymentsFiscalcompanycarsFiscalCompanyCarIdGetResponse3,
    ProvidersEmployersEmployeesEmploymentsFiscalcompanycarsFiscalCompanyCarIdPutResponse,
    ProvidersEmployersEmployeesEmploymentsFiscalcompanycarsFiscalCompanyCarIdPutResponse1,
    ProvidersEmployersEmployeesEmploymentsFiscalcompanycarsFiscalCompanyCarIdPutResponse2,
    ProvidersEmployersEmployeesEmploymentsFiscalcompanycarsFiscalCompanyCarIdPutResponse3,
    ProvidersEmployersEmployeesEmploymentsFiscalcompanycarsFiscalCompanyCarIdPutResponse4,
    ProvidersEmployersEmployeesEmploymentsFiscalpropertiesFiscalPropertiesIdDeleteResponse,
    ProvidersEmployersEmployeesEmploymentsFiscalpropertiesFiscalPropertiesIdDeleteResponse1,
    ProvidersEmployersEmployeesEmploymentsFiscalpropertiesFiscalPropertiesIdDeleteResponse2,
    ProvidersEmployersEmployeesEmploymentsFiscalpropertiesFiscalPropertiesIdDeleteResponse3,
    ProvidersEmployersEmployeesEmploymentsFiscalpropertiesFiscalPropertiesIdGetResponse,
    ProvidersEmployersEmployeesEmploymentsFiscalpropertiesFiscalPropertiesIdGetResponse1,
    ProvidersEmployersEmployeesEmploymentsFiscalpropertiesFiscalPropertiesIdGetResponse2,
    ProvidersEmployersEmployeesEmploymentsFiscalpropertiesFiscalPropertiesIdGetResponse3,
    ProvidersEmployersEmployeesEmploymentsFiscalpropertiesFiscalPropertiesIdPutResponse,
    ProvidersEmployersEmployeesEmploymentsFiscalpropertiesFiscalPropertiesIdPutResponse1,
    ProvidersEmployersEmployeesEmploymentsFiscalpropertiesFiscalPropertiesIdPutResponse2,
    ProvidersEmployersEmployeesEmploymentsFiscalpropertiesFiscalPropertiesIdPutResponse3,
    ProvidersEmployersEmployeesEmploymentsFiscalpropertiesFiscalPropertiesIdPutResponse4,
    ProvidersEmployersEmployeesEmploymentsHealthcareinsuranceactconfigurationsHealthcareInsuranceActConfigurationIdDeleteResponse,
    ProvidersEmployersEmployeesEmploymentsHealthcareinsuranceactconfigurationsHealthcareInsuranceActConfigurationIdDeleteResponse1,
    ProvidersEmployersEmployeesEmploymentsHealthcareinsuranceactconfigurationsHealthcareInsuranceActConfigurationIdDeleteResponse2,
    ProvidersEmployersEmployeesEmploymentsHealthcareinsuranceactconfigurationsHealthcareInsuranceActConfigurationIdDeleteResponse3,
    ProvidersEmployersEmployeesEmploymentsHealthcareinsuranceactconfigurationsHealthcareInsuranceActConfigurationIdGetResponse,
    ProvidersEmployersEmployeesEmploymentsHealthcareinsuranceactconfigurationsHealthcareInsuranceActConfigurationIdGetResponse1,
    ProvidersEmployersEmployeesEmploymentsHealthcareinsuranceactconfigurationsHealthcareInsuranceActConfigurationIdGetResponse2,
    ProvidersEmployersEmployeesEmploymentsHealthcareinsuranceactconfigurationsHealthcareInsuranceActConfigurationIdGetResponse3,
    ProvidersEmployersEmployeesEmploymentsHealthcareinsuranceactconfigurationsHealthcareInsuranceActConfigurationIdPutResponse,
    ProvidersEmployersEmployeesEmploymentsHealthcareinsuranceactconfigurationsHealthcareInsuranceActConfigurationIdPutResponse1,
    ProvidersEmployersEmployeesEmploymentsHealthcareinsuranceactconfigurationsHealthcareInsuranceActConfigurationIdPutResponse2,
    ProvidersEmployersEmployeesEmploymentsHealthcareinsuranceactconfigurationsHealthcareInsuranceActConfigurationIdPutResponse3,
    ProvidersEmployersEmployeesEmploymentsHealthcareinsuranceactconfigurationsHealthcareInsuranceActConfigurationIdPutResponse4,
    ProvidersEmployersEmployeesEmploymentsJournalallocationsJournalAllocationIdDeleteResponse,
    ProvidersEmployersEmployeesEmploymentsJournalallocationsJournalAllocationIdDeleteResponse1,
    ProvidersEmployersEmployeesEmploymentsJournalallocationsJournalAllocationIdDeleteResponse2,
    ProvidersEmployersEmployeesEmploymentsJournalallocationsJournalAllocationIdDeleteResponse3,
    ProvidersEmployersEmployeesEmploymentsJournalallocationsJournalAllocationIdGetResponse,
    ProvidersEmployersEmployeesEmploymentsJournalallocationsJournalAllocationIdGetResponse1,
    ProvidersEmployersEmployeesEmploymentsJournalallocationsJournalAllocationIdGetResponse2,
    ProvidersEmployersEmployeesEmploymentsJournalallocationsJournalAllocationIdGetResponse3,
    ProvidersEmployersEmployeesEmploymentsJournalallocationsJournalAllocationIdPutResponse,
    ProvidersEmployersEmployeesEmploymentsJournalallocationsJournalAllocationIdPutResponse1,
    ProvidersEmployersEmployeesEmploymentsJournalallocationsJournalAllocationIdPutResponse2,
    ProvidersEmployersEmployeesEmploymentsJournalallocationsJournalAllocationIdPutResponse3,
    ProvidersEmployersEmployeesEmploymentsJournalallocationsJournalAllocationIdPutResponse4,
    ProvidersEmployersEmployeesEmploymentsLeaveLeaveIdDeleteResponse,
    ProvidersEmployersEmployeesEmploymentsLeaveLeaveIdDeleteResponse1,
    ProvidersEmployersEmployeesEmploymentsLeaveLeaveIdDeleteResponse2,
    ProvidersEmployersEmployeesEmploymentsLeaveLeaveIdDeleteResponse3,
    ProvidersEmployersEmployeesEmploymentsLeaveLeaveIdGetResponse,
    ProvidersEmployersEmployeesEmploymentsLeaveLeaveIdGetResponse1,
    ProvidersEmployersEmployeesEmploymentsLeaveLeaveIdGetResponse2,
    ProvidersEmployersEmployeesEmploymentsLeaveLeaveIdGetResponse3,
    ProvidersEmployersEmployeesEmploymentsLeaveLeaveIdMetadataGetResponse,
    ProvidersEmployersEmployeesEmploymentsLeaveLeaveIdMetadataGetResponse1,
    ProvidersEmployersEmployeesEmploymentsLeaveLeaveIdMetadataGetResponse2,
    ProvidersEmployersEmployeesEmploymentsLeaveLeaveIdMetadataGetResponse3,
    ProvidersEmployersEmployeesEmploymentsLeaveLeaveIdPutResponse,
    ProvidersEmployersEmployeesEmploymentsLeaveLeaveIdPutResponse1,
    ProvidersEmployersEmployeesEmploymentsLeaveLeaveIdPutResponse2,
    ProvidersEmployersEmployeesEmploymentsLeaveLeaveIdPutResponse3,
    ProvidersEmployersEmployeesEmploymentsLeaveLeaveIdPutResponse4,
    ProvidersEmployersEmployeesEmploymentsLeaverequestsLeaveRequestIdGetResponse,
    ProvidersEmployersEmployeesEmploymentsLeaverequestsLeaveRequestIdGetResponse1,
    ProvidersEmployersEmployeesEmploymentsLeaverequestsLeaveRequestIdGetResponse2,
    ProvidersEmployersEmployeesEmploymentsLeaverequestsLeaveRequestIdGetResponse3,
    ProvidersEmployersEmployeesEmploymentsLeaverequestsLeaveRequestIdPutResponse,
    ProvidersEmployersEmployeesEmploymentsLeaverequestsLeaveRequestIdPutResponse1,
    ProvidersEmployersEmployeesEmploymentsLeaverequestsLeaveRequestIdPutResponse2,
    ProvidersEmployersEmployeesEmploymentsLeaverequestsLeaveRequestIdPutResponse3,
    ProvidersEmployersEmployeesEmploymentsLeaverequestsLeaveRequestIdPutResponse4,
    ProvidersEmployersEmployeesEmploymentsLeaverequestsPatchResponse,
    ProvidersEmployersEmployeesEmploymentsLeaverequestsPatchResponse1,
    ProvidersEmployersEmployeesEmploymentsLeaverequestsPatchResponse2,
    ProvidersEmployersEmployeesEmploymentsLeaverequestsPatchResponse3,
    ProvidersEmployersEmployeesEmploymentsNotesNoteIdDeleteResponse,
    ProvidersEmployersEmployeesEmploymentsNotesNoteIdDeleteResponse1,
    ProvidersEmployersEmployeesEmploymentsNotesNoteIdDeleteResponse2,
    ProvidersEmployersEmployeesEmploymentsNotesNoteIdDeleteResponse3,
    ProvidersEmployersEmployeesEmploymentsNotesNoteIdGetResponse,
    ProvidersEmployersEmployeesEmploymentsNotesNoteIdGetResponse1,
    ProvidersEmployersEmployeesEmploymentsNotesNoteIdGetResponse2,
    ProvidersEmployersEmployeesEmploymentsNotesNoteIdGetResponse3,
    ProvidersEmployersEmployeesEmploymentsNotesNoteIdPutResponse,
    ProvidersEmployersEmployeesEmploymentsNotesNoteIdPutResponse1,
    ProvidersEmployersEmployeesEmploymentsNotesNoteIdPutResponse2,
    ProvidersEmployersEmployeesEmploymentsNotesNoteIdPutResponse3,
    ProvidersEmployersEmployeesEmploymentsNotesNoteIdPutResponse4,
    ProvidersEmployersEmployeesEmploymentsOrganizationalentitiesOrganizationalEntityIdDeleteResponse,
    ProvidersEmployersEmployeesEmploymentsOrganizationalentitiesOrganizationalEntityIdDeleteResponse1,
    ProvidersEmployersEmployeesEmploymentsOrganizationalentitiesOrganizationalEntityIdDeleteResponse2,
    ProvidersEmployersEmployeesEmploymentsOrganizationalentitiesOrganizationalEntityIdDeleteResponse3,
    ProvidersEmployersEmployeesEmploymentsOrganizationalentitiesOrganizationalEntityIdGetResponse,
    ProvidersEmployersEmployeesEmploymentsOrganizationalentitiesOrganizationalEntityIdGetResponse1,
    ProvidersEmployersEmployeesEmploymentsOrganizationalentitiesOrganizationalEntityIdGetResponse2,
    ProvidersEmployersEmployeesEmploymentsOrganizationalentitiesOrganizationalEntityIdGetResponse3,
    ProvidersEmployersEmployeesEmploymentsOrganizationalentitiesOrganizationalEntityIdPutResponse,
    ProvidersEmployersEmployeesEmploymentsOrganizationalentitiesOrganizationalEntityIdPutResponse1,
    ProvidersEmployersEmployeesEmploymentsOrganizationalentitiesOrganizationalEntityIdPutResponse2,
    ProvidersEmployersEmployeesEmploymentsOrganizationalentitiesOrganizationalEntityIdPutResponse3,
    ProvidersEmployersEmployeesEmploymentsOrganizationalentitiesOrganizationalEntityIdPutResponse4,
    ProvidersEmployersEmployeesEmploymentsOtherPayrollVariablesOtherPayrollVariablesIdDeleteResponse,
    ProvidersEmployersEmployeesEmploymentsOtherPayrollVariablesOtherPayrollVariablesIdDeleteResponse1,
    ProvidersEmployersEmployeesEmploymentsOtherPayrollVariablesOtherPayrollVariablesIdDeleteResponse2,
    ProvidersEmployersEmployeesEmploymentsOtherPayrollVariablesOtherPayrollVariablesIdDeleteResponse3,
    ProvidersEmployersEmployeesEmploymentsOtherPayrollVariablesOtherPayrollVariablesIdGetResponse,
    ProvidersEmployersEmployeesEmploymentsOtherPayrollVariablesOtherPayrollVariablesIdGetResponse1,
    ProvidersEmployersEmployeesEmploymentsOtherPayrollVariablesOtherPayrollVariablesIdGetResponse2,
    ProvidersEmployersEmployeesEmploymentsOtherPayrollVariablesOtherPayrollVariablesIdGetResponse3,
    ProvidersEmployersEmployeesEmploymentsOtherPayrollVariablesOtherPayrollVariablesIdPutResponse,
    ProvidersEmployersEmployeesEmploymentsOtherPayrollVariablesOtherPayrollVariablesIdPutResponse1,
    ProvidersEmployersEmployeesEmploymentsOtherPayrollVariablesOtherPayrollVariablesIdPutResponse2,
    ProvidersEmployersEmployeesEmploymentsOtherPayrollVariablesOtherPayrollVariablesIdPutResponse3,
    ProvidersEmployersEmployeesEmploymentsOtherPayrollVariablesOtherPayrollVariablesIdPutResponse4,
    ProvidersEmployersEmployeesEmploymentsPaymentinformationnonsepaPaymentInformationNonSepaIdDeleteResponse,
    ProvidersEmployersEmployeesEmploymentsPaymentinformationnonsepaPaymentInformationNonSepaIdDeleteResponse1,
    ProvidersEmployersEmployeesEmploymentsPaymentinformationnonsepaPaymentInformationNonSepaIdDeleteResponse2,
    ProvidersEmployersEmployeesEmploymentsPaymentinformationnonsepaPaymentInformationNonSepaIdDeleteResponse3,
    ProvidersEmployersEmployeesEmploymentsPaymentinformationnonsepaPaymentInformationNonSepaIdGetResponse,
    ProvidersEmployersEmployeesEmploymentsPaymentinformationnonsepaPaymentInformationNonSepaIdGetResponse1,
    ProvidersEmployersEmployeesEmploymentsPaymentinformationnonsepaPaymentInformationNonSepaIdGetResponse2,
    ProvidersEmployersEmployeesEmploymentsPaymentinformationnonsepaPaymentInformationNonSepaIdGetResponse3,
    ProvidersEmployersEmployeesEmploymentsPaymentinformationnonsepaPaymentInformationNonSepaIdPutResponse,
    ProvidersEmployersEmployeesEmploymentsPaymentinformationnonsepaPaymentInformationNonSepaIdPutResponse1,
    ProvidersEmployersEmployeesEmploymentsPaymentinformationnonsepaPaymentInformationNonSepaIdPutResponse2,
    ProvidersEmployersEmployeesEmploymentsPaymentinformationnonsepaPaymentInformationNonSepaIdPutResponse3,
    ProvidersEmployersEmployeesEmploymentsPaymentinformationnonsepaPaymentInformationNonSepaIdPutResponse4,
    ProvidersEmployersEmployeesEmploymentsPaymentinformationsepaPaymentInformationSepaIdDeleteResponse,
    ProvidersEmployersEmployeesEmploymentsPaymentinformationsepaPaymentInformationSepaIdDeleteResponse1,
    ProvidersEmployersEmployeesEmploymentsPaymentinformationsepaPaymentInformationSepaIdDeleteResponse2,
    ProvidersEmployersEmployeesEmploymentsPaymentinformationsepaPaymentInformationSepaIdDeleteResponse3,
    ProvidersEmployersEmployeesEmploymentsPaymentinformationsepaPaymentInformationSepaIdGetResponse,
    ProvidersEmployersEmployeesEmploymentsPaymentinformationsepaPaymentInformationSepaIdGetResponse2,
    ProvidersEmployersEmployeesEmploymentsPaymentinformationsepaPaymentInformationSepaIdGetResponse3,
    ProvidersEmployersEmployeesEmploymentsPaymentinformationsepaPaymentInformationSepaIdGetResponse4,
    ProvidersEmployersEmployeesEmploymentsPaymentinformationsepaPaymentInformationSepaIdPutResponse,
    ProvidersEmployersEmployeesEmploymentsPaymentinformationsepaPaymentInformationSepaIdPutResponse2,
    ProvidersEmployersEmployeesEmploymentsPaymentinformationsepaPaymentInformationSepaIdPutResponse3,
    ProvidersEmployersEmployeesEmploymentsPaymentinformationsepaPaymentInformationSepaIdPutResponse4,
    ProvidersEmployersEmployeesEmploymentsPaymentinformationsepaPaymentInformationSepaIdPutResponse5,
    ProvidersEmployersEmployeesEmploymentsPaymentinformationsepaseparatepaymentsPaymentInformationSepaSeparatePaymentIdDeleteResponse,
    ProvidersEmployersEmployeesEmploymentsPaymentinformationsepaseparatepaymentsPaymentInformationSepaSeparatePaymentIdDeleteResponse1,
    ProvidersEmployersEmployeesEmploymentsPaymentinformationsepaseparatepaymentsPaymentInformationSepaSeparatePaymentIdDeleteResponse2,
    ProvidersEmployersEmployeesEmploymentsPaymentinformationsepaseparatepaymentsPaymentInformationSepaSeparatePaymentIdDeleteResponse3,
    ProvidersEmployersEmployeesEmploymentsPaymentinformationsepaseparatepaymentsPaymentInformationSepaSeparatePaymentIdGetResponse,
    ProvidersEmployersEmployeesEmploymentsPaymentinformationsepaseparatepaymentsPaymentInformationSepaSeparatePaymentIdGetResponse1,
    ProvidersEmployersEmployeesEmploymentsPaymentinformationsepaseparatepaymentsPaymentInformationSepaSeparatePaymentIdGetResponse2,
    ProvidersEmployersEmployeesEmploymentsPaymentinformationsepaseparatepaymentsPaymentInformationSepaSeparatePaymentIdGetResponse3,
    ProvidersEmployersEmployeesEmploymentsPaymentinformationsepaseparatepaymentsPaymentInformationSepaSeparatePaymentIdPutResponse,
    ProvidersEmployersEmployeesEmploymentsPaymentinformationsepaseparatepaymentsPaymentInformationSepaSeparatePaymentIdPutResponse1,
    ProvidersEmployersEmployeesEmploymentsPaymentinformationsepaseparatepaymentsPaymentInformationSepaSeparatePaymentIdPutResponse2,
    ProvidersEmployersEmployeesEmploymentsPaymentinformationsepaseparatepaymentsPaymentInformationSepaSeparatePaymentIdPutResponse3,
    ProvidersEmployersEmployeesEmploymentsPaymentinformationsepaseparatepaymentsPaymentInformationSepaSeparatePaymentIdPutResponse4,
    ProvidersEmployersEmployeesEmploymentsPayrollperioddataPayrollperioddataIdDeleteResponse,
    ProvidersEmployersEmployeesEmploymentsPayrollperioddataPayrollperioddataIdDeleteResponse1,
    ProvidersEmployersEmployeesEmploymentsPayrollperioddataPayrollperioddataIdDeleteResponse2,
    ProvidersEmployersEmployeesEmploymentsPayrollperioddataPayrollperioddataIdDeleteResponse3,
    ProvidersEmployersEmployeesEmploymentsPayrollperioddataPayrollperioddataIdGetResponse,
    ProvidersEmployersEmployeesEmploymentsPayrollperioddataPayrollperioddataIdGetResponse1,
    ProvidersEmployersEmployeesEmploymentsPayrollperioddataPayrollperioddataIdGetResponse2,
    ProvidersEmployersEmployeesEmploymentsPayrollperioddataPayrollperioddataIdGetResponse3,
    ProvidersEmployersEmployeesEmploymentsPayrollperioddataPayrollperioddataIdPutResponse,
    ProvidersEmployersEmployeesEmploymentsPayrollperioddataPayrollperioddataIdPutResponse1,
    ProvidersEmployersEmployeesEmploymentsPayrollperioddataPayrollperioddataIdPutResponse2,
    ProvidersEmployersEmployeesEmploymentsPayrollperioddataPayrollperioddataIdPutResponse3,
    ProvidersEmployersEmployeesEmploymentsPayrollperioddataPayrollperioddataIdPutResponse4,
    ProvidersEmployersEmployeesEmploymentsPensionbenefitsPensionBenefitIdDeleteResponse,
    ProvidersEmployersEmployeesEmploymentsPensionbenefitsPensionBenefitIdDeleteResponse1,
    ProvidersEmployersEmployeesEmploymentsPensionbenefitsPensionBenefitIdDeleteResponse2,
    ProvidersEmployersEmployeesEmploymentsPensionbenefitsPensionBenefitIdDeleteResponse3,
    ProvidersEmployersEmployeesEmploymentsPensionbenefitsPensionBenefitIdGetResponse,
    ProvidersEmployersEmployeesEmploymentsPensionbenefitsPensionBenefitIdGetResponse1,
    ProvidersEmployersEmployeesEmploymentsPensionbenefitsPensionBenefitIdGetResponse2,
    ProvidersEmployersEmployeesEmploymentsPensionbenefitsPensionBenefitIdGetResponse3,
    ProvidersEmployersEmployeesEmploymentsPensionbenefitsPensionBenefitIdPutResponse,
    ProvidersEmployersEmployeesEmploymentsPensionbenefitsPensionBenefitIdPutResponse1,
    ProvidersEmployersEmployeesEmploymentsPensionbenefitsPensionBenefitIdPutResponse2,
    ProvidersEmployersEmployeesEmploymentsPensionbenefitsPensionBenefitIdPutResponse3,
    ProvidersEmployersEmployeesEmploymentsPensionbenefitsPensionBenefitIdPutResponse4,
    ProvidersEmployersEmployeesEmploymentsProtectedearningsProtectedEarningsIdDeleteResponse,
    ProvidersEmployersEmployeesEmploymentsProtectedearningsProtectedEarningsIdDeleteResponse1,
    ProvidersEmployersEmployeesEmploymentsProtectedearningsProtectedEarningsIdDeleteResponse2,
    ProvidersEmployersEmployeesEmploymentsProtectedearningsProtectedEarningsIdDeleteResponse3,
    ProvidersEmployersEmployeesEmploymentsProtectedearningsProtectedEarningsIdGetResponse,
    ProvidersEmployersEmployeesEmploymentsProtectedearningsProtectedEarningsIdGetResponse1,
    ProvidersEmployersEmployeesEmploymentsProtectedearningsProtectedEarningsIdGetResponse2,
    ProvidersEmployersEmployeesEmploymentsProtectedearningsProtectedEarningsIdGetResponse3,
    ProvidersEmployersEmployeesEmploymentsProtectedearningsProtectedEarningsIdPutResponse,
    ProvidersEmployersEmployeesEmploymentsProtectedearningsProtectedEarningsIdPutResponse1,
    ProvidersEmployersEmployeesEmploymentsProtectedearningsProtectedEarningsIdPutResponse2,
    ProvidersEmployersEmployeesEmploymentsProtectedearningsProtectedEarningsIdPutResponse3,
    ProvidersEmployersEmployeesEmploymentsProtectedearningsProtectedEarningsIdPutResponse4,
    ProvidersEmployersEmployeesEmploymentsSocialsecuritybenefitsSocialSecurityBenefitIdDeleteResponse,
    ProvidersEmployersEmployeesEmploymentsSocialsecuritybenefitsSocialSecurityBenefitIdDeleteResponse1,
    ProvidersEmployersEmployeesEmploymentsSocialsecuritybenefitsSocialSecurityBenefitIdDeleteResponse2,
    ProvidersEmployersEmployeesEmploymentsSocialsecuritybenefitsSocialSecurityBenefitIdDeleteResponse3,
    ProvidersEmployersEmployeesEmploymentsSocialsecuritybenefitsSocialSecurityBenefitIdGetResponse,
    ProvidersEmployersEmployeesEmploymentsSocialsecuritybenefitsSocialSecurityBenefitIdGetResponse1,
    ProvidersEmployersEmployeesEmploymentsSocialsecuritybenefitsSocialSecurityBenefitIdGetResponse2,
    ProvidersEmployersEmployeesEmploymentsSocialsecuritybenefitsSocialSecurityBenefitIdGetResponse3,
    ProvidersEmployersEmployeesEmploymentsSocialsecuritybenefitsSocialSecurityBenefitIdPutResponse,
    ProvidersEmployersEmployeesEmploymentsSocialsecuritybenefitsSocialSecurityBenefitIdPutResponse1,
    ProvidersEmployersEmployeesEmploymentsSocialsecuritybenefitsSocialSecurityBenefitIdPutResponse2,
    ProvidersEmployersEmployeesEmploymentsSocialsecuritybenefitsSocialSecurityBenefitIdPutResponse3,
    ProvidersEmployersEmployeesEmploymentsSocialsecuritybenefitsSocialSecurityBenefitIdPutResponse4,
    ProvidersEmployersEmployeesEmploymentsSocialsecurityconfigurationsSocialSecurityConfigurationIdDeleteResponse,
    ProvidersEmployersEmployeesEmploymentsSocialsecurityconfigurationsSocialSecurityConfigurationIdDeleteResponse1,
    ProvidersEmployersEmployeesEmploymentsSocialsecurityconfigurationsSocialSecurityConfigurationIdDeleteResponse2,
    ProvidersEmployersEmployeesEmploymentsSocialsecurityconfigurationsSocialSecurityConfigurationIdDeleteResponse3,
    ProvidersEmployersEmployeesEmploymentsSocialsecurityconfigurationsSocialSecurityConfigurationIdGetResponse,
    ProvidersEmployersEmployeesEmploymentsSocialsecurityconfigurationsSocialSecurityConfigurationIdGetResponse1,
    ProvidersEmployersEmployeesEmploymentsSocialsecurityconfigurationsSocialSecurityConfigurationIdGetResponse2,
    ProvidersEmployersEmployeesEmploymentsSocialsecurityconfigurationsSocialSecurityConfigurationIdGetResponse3,
    ProvidersEmployersEmployeesEmploymentsSocialsecurityconfigurationsSocialSecurityConfigurationIdPutResponse,
    ProvidersEmployersEmployeesEmploymentsSocialsecurityconfigurationsSocialSecurityConfigurationIdPutResponse1,
    ProvidersEmployersEmployeesEmploymentsSocialsecurityconfigurationsSocialSecurityConfigurationIdPutResponse2,
    ProvidersEmployersEmployeesEmploymentsSocialsecurityconfigurationsSocialSecurityConfigurationIdPutResponse3,
    ProvidersEmployersEmployeesEmploymentsSocialsecurityconfigurationsSocialSecurityConfigurationIdPutResponse4,
    ProvidersEmployersEmployeesEmploymentsWachtgeldWachtegeldenIdDeleteResponse,
    ProvidersEmployersEmployeesEmploymentsWachtgeldWachtegeldenIdDeleteResponse1,
    ProvidersEmployersEmployeesEmploymentsWachtgeldWachtegeldenIdDeleteResponse2,
    ProvidersEmployersEmployeesEmploymentsWachtgeldWachtegeldenIdDeleteResponse3,
    ProvidersEmployersEmployeesEmploymentsWachtgeldWachtegeldenIdGetResponse,
    ProvidersEmployersEmployeesEmploymentsWachtgeldWachtegeldenIdGetResponse1,
    ProvidersEmployersEmployeesEmploymentsWachtgeldWachtegeldenIdGetResponse2,
    ProvidersEmployersEmployeesEmploymentsWachtgeldWachtegeldenIdGetResponse3,
    ProvidersEmployersEmployeesEmploymentsWachtgeldWachtegeldenIdPutResponse,
    ProvidersEmployersEmployeesEmploymentsWachtgeldWachtegeldenIdPutResponse1,
    ProvidersEmployersEmployeesEmploymentsWachtgeldWachtegeldenIdPutResponse2,
    ProvidersEmployersEmployeesEmploymentsWachtgeldWachtegeldenIdPutResponse3,
    ProvidersEmployersEmployeesEmploymentsWachtgeldWachtegeldenIdPutResponse4,
    ProvidersEmployersEmployeesEmploymentsWageProposalsPatchResponse,
    ProvidersEmployersEmployeesEmploymentsWageProposalsPatchResponse1,
    ProvidersEmployersEmployeesEmploymentsWageProposalsPatchResponse2,
    ProvidersEmployersEmployeesEmploymentsWageProposalsPatchResponse3,
    ProvidersEmployersEmployeesEmploymentsWagesWageIdDeleteResponse,
    ProvidersEmployersEmployeesEmploymentsWagesWageIdDeleteResponse1,
    ProvidersEmployersEmployeesEmploymentsWagesWageIdDeleteResponse2,
    ProvidersEmployersEmployeesEmploymentsWagesWageIdDeleteResponse3,
    ProvidersEmployersEmployeesEmploymentsWagesWageIdGetResponse,
    ProvidersEmployersEmployeesEmploymentsWagesWageIdGetResponse1,
    ProvidersEmployersEmployeesEmploymentsWagesWageIdGetResponse2,
    ProvidersEmployersEmployeesEmploymentsWagesWageIdGetResponse3,
    ProvidersEmployersEmployeesEmploymentsWagesWageIdPutResponse,
    ProvidersEmployersEmployeesEmploymentsWagesWageIdPutResponse1,
    ProvidersEmployersEmployeesEmploymentsWagesWageIdPutResponse2,
    ProvidersEmployersEmployeesEmploymentsWagesWageIdPutResponse3,
    ProvidersEmployersEmployeesEmploymentsWagesWageIdPutResponse4,
    ProvidersEmployersEmployeesEmploymentsWorkinghoursWorkinghoursIdDeleteResponse,
    ProvidersEmployersEmployeesEmploymentsWorkinghoursWorkinghoursIdDeleteResponse1,
    ProvidersEmployersEmployeesEmploymentsWorkinghoursWorkinghoursIdDeleteResponse2,
    ProvidersEmployersEmployeesEmploymentsWorkinghoursWorkinghoursIdDeleteResponse3,
    ProvidersEmployersEmployeesEmploymentsWorkinghoursWorkinghoursIdGetResponse,
    ProvidersEmployersEmployeesEmploymentsWorkinghoursWorkinghoursIdGetResponse1,
    ProvidersEmployersEmployeesEmploymentsWorkinghoursWorkinghoursIdGetResponse2,
    ProvidersEmployersEmployeesEmploymentsWorkinghoursWorkinghoursIdGetResponse3,
    ProvidersEmployersEmployeesEmploymentsWorkinghoursWorkinghoursIdPutResponse,
    ProvidersEmployersEmployeesEmploymentsWorkinghoursWorkinghoursIdPutResponse1,
    ProvidersEmployersEmployeesEmploymentsWorkinghoursWorkinghoursIdPutResponse2,
    ProvidersEmployersEmployeesEmploymentsWorkinghoursWorkinghoursIdPutResponse3,
    ProvidersEmployersEmployeesEmploymentsWorkinghoursWorkinghoursIdPutResponse4,
    ProvidersEmployersEmployeesNotesNoteIdDeleteResponse,
    ProvidersEmployersEmployeesNotesNoteIdDeleteResponse1,
    ProvidersEmployersEmployeesNotesNoteIdDeleteResponse2,
    ProvidersEmployersEmployeesNotesNoteIdDeleteResponse3,
    ProvidersEmployersEmployeesNotesNoteIdGetResponse,
    ProvidersEmployersEmployeesNotesNoteIdGetResponse1,
    ProvidersEmployersEmployeesNotesNoteIdGetResponse2,
    ProvidersEmployersEmployeesNotesNoteIdGetResponse3,
    ProvidersEmployersEmployeesNotesNoteIdPutResponse,
    ProvidersEmployersEmployeesNotesNoteIdPutResponse1,
    ProvidersEmployersEmployeesNotesNoteIdPutResponse2,
    ProvidersEmployersEmployeesNotesNoteIdPutResponse3,
    ProvidersEmployersEmployeesNotesNoteIdPutResponse4,
    ProvidersEmployersEmployeesPartnersPartnerIdDeleteResponse,
    ProvidersEmployersEmployeesPartnersPartnerIdDeleteResponse1,
    ProvidersEmployersEmployeesPartnersPartnerIdDeleteResponse2,
    ProvidersEmployersEmployeesPartnersPartnerIdDeleteResponse3,
    ProvidersEmployersEmployeesPartnersPartnerIdGetResponse,
    ProvidersEmployersEmployeesPartnersPartnerIdGetResponse1,
    ProvidersEmployersEmployeesPartnersPartnerIdGetResponse2,
    ProvidersEmployersEmployeesPartnersPartnerIdGetResponse3,
    ProvidersEmployersEmployeesPartnersPartnerIdPutResponse,
    ProvidersEmployersEmployeesPartnersPartnerIdPutResponse1,
    ProvidersEmployersEmployeesPartnersPartnerIdPutResponse2,
    ProvidersEmployersEmployeesPartnersPartnerIdPutResponse3,
    ProvidersEmployersEmployeesPartnersPartnerIdPutResponse4,
    ProvidersEmployersEmployeesSelfservicePatchResponse,
    ProvidersEmployersEmployeesSelfservicePatchResponse1,
    ProvidersEmployersEmployeesSelfservicePatchResponse2,
    ProvidersEmployersEmployeesSelfservicePatchResponse3,
    ProvidersEmployersEmployeesSelfservicePatchResponse4,
    ProvidersEmployersEmployerIdActualorganizationalentitiesGetResponse,
    ProvidersEmployersEmployerIdActualorganizationalentitiesGetResponse1,
    ProvidersEmployersEmployerIdActualorganizationalentitiesGetResponse2,
    ProvidersEmployersEmployerIdActualorganizationalentitiesGetResponse3,
    ProvidersEmployersEmployerIdActualwagesGetResponse,
    ProvidersEmployersEmployerIdActualwagesGetResponse1,
    ProvidersEmployersEmployerIdActualwagesGetResponse2,
    ProvidersEmployersEmployerIdActualwagesGetResponse3,
    ProvidersEmployersEmployerIdActualworkinghoursGetResponse,
    ProvidersEmployersEmployerIdActualworkinghoursGetResponse1,
    ProvidersEmployersEmployerIdActualworkinghoursGetResponse2,
    ProvidersEmployersEmployerIdActualworkinghoursGetResponse3,
    ProvidersEmployersEmployerIdAdministrationsGetResponse,
    ProvidersEmployersEmployerIdAdministrationsGetResponse1,
    ProvidersEmployersEmployerIdAdministrationsGetResponse2,
    ProvidersEmployersEmployerIdAdministrationsGetResponse3,
    ProvidersEmployersEmployerIdAnnouncementsGetResponse,
    ProvidersEmployersEmployerIdAnnouncementsGetResponse1,
    ProvidersEmployersEmployerIdAnnouncementsGetResponse2,
    ProvidersEmployersEmployerIdAnnouncementsGetResponse3,
    ProvidersEmployersEmployerIdApplicationsApplicationIdUsersGetResponse,
    ProvidersEmployersEmployerIdApplicationsApplicationIdUsersGetResponse1,
    ProvidersEmployersEmployerIdApplicationsApplicationIdUsersGetResponse2,
    ProvidersEmployersEmployerIdApplicationsApplicationIdUsersGetResponse3,
    ProvidersEmployersEmployerIdApplicationsGetResponse,
    ProvidersEmployersEmployerIdApplicationsGetResponse1,
    ProvidersEmployersEmployerIdApplicationsGetResponse2,
    ProvidersEmployersEmployerIdApplicationsGetResponse3,
    ProvidersEmployersEmployerIdAssessmentsGetResponse,
    ProvidersEmployersEmployerIdAssessmentsGetResponse1,
    ProvidersEmployersEmployerIdAssessmentsGetResponse2,
    ProvidersEmployersEmployerIdAssessmentsGetResponse3,
    ProvidersEmployersEmployerIdAssignedworkflowsGetResponse,
    ProvidersEmployersEmployerIdAssignedworkflowsGetResponse1,
    ProvidersEmployersEmployerIdAssignedworkflowsGetResponse2,
    ProvidersEmployersEmployerIdAssignedworkflowsGetResponse3,
    ProvidersEmployersEmployerIdAuditTrailEmployeeDataGetResponse,
    ProvidersEmployersEmployerIdAuditTrailEmployeeDataGetResponse1,
    ProvidersEmployersEmployerIdAuditTrailEmployeeDataGetResponse2,
    ProvidersEmployersEmployerIdAuditTrailEmployeeDataGetResponse3,
    ProvidersEmployersEmployerIdAuthorizationsGetResponse,
    ProvidersEmployersEmployerIdAuthorizationsGetResponse2,
    ProvidersEmployersEmployerIdAuthorizationsGetResponse3,
    ProvidersEmployersEmployerIdAuthorizationsGetResponse4,
    ProvidersEmployersEmployerIdBenefitinkindtypesGetResponse,
    ProvidersEmployersEmployerIdBenefitinkindtypesGetResponse1,
    ProvidersEmployersEmployerIdBenefitinkindtypesGetResponse2,
    ProvidersEmployersEmployerIdBenefitinkindtypesGetResponse3,
    ProvidersEmployersEmployerIdBenefitinkindtypesPostResponse,
    ProvidersEmployersEmployerIdBenefitinkindtypesPostResponse1,
    ProvidersEmployersEmployerIdBenefitinkindtypesPostResponse2,
    ProvidersEmployersEmployerIdBenefitinkindtypesPostResponse3,
    ProvidersEmployersEmployerIdBillableitemsGetResponse,
    ProvidersEmployersEmployerIdBillableitemsGetResponse1,
    ProvidersEmployersEmployerIdBillableitemsGetResponse2,
    ProvidersEmployersEmployerIdBillableitemsGetResponse3,
    ProvidersEmployersEmployerIdConceptemployeesGetResponse,
    ProvidersEmployersEmployerIdConceptemployeesGetResponse1,
    ProvidersEmployersEmployerIdConceptemployeesGetResponse2,
    ProvidersEmployersEmployerIdConceptemployeesGetResponse3,
    ProvidersEmployersEmployerIdConceptemployeesPostResponse,
    ProvidersEmployersEmployerIdConceptemployeesPostResponse1,
    ProvidersEmployersEmployerIdConceptemployeesPostResponse2,
    ProvidersEmployersEmployerIdConceptemployeesPostResponse3,
    ProvidersEmployersEmployerIdConceptemployeesSelfserviceGetResponse,
    ProvidersEmployersEmployerIdConceptemployeesSelfserviceGetResponse1,
    ProvidersEmployersEmployerIdConceptemployeesSelfserviceGetResponse2,
    ProvidersEmployersEmployerIdConceptemployeesSelfserviceGetResponse3,
    ProvidersEmployersEmployerIdContractcodesGetResponse,
    ProvidersEmployersEmployerIdContractcodesGetResponse1,
    ProvidersEmployersEmployerIdContractcodesGetResponse2,
    ProvidersEmployersEmployerIdContractcodesGetResponse3,
    ProvidersEmployersEmployerIdContractcodesPostResponse,
    ProvidersEmployersEmployerIdContractcodesPostResponse1,
    ProvidersEmployersEmployerIdContractcodesPostResponse2,
    ProvidersEmployersEmployerIdContractcodesPostResponse3,
    ProvidersEmployersEmployerIdCustomfieldsGetResponse,
    ProvidersEmployersEmployerIdCustomfieldsGetResponse1,
    ProvidersEmployersEmployerIdCustomfieldsGetResponse2,
    ProvidersEmployersEmployerIdCustomfieldsGetResponse3,
    ProvidersEmployersEmployerIdCustomfieldsPostResponse,
    ProvidersEmployersEmployerIdCustomfieldsPostResponse1,
    ProvidersEmployersEmployerIdCustomfieldsPostResponse2,
    ProvidersEmployersEmployerIdCustomfieldsPostResponse3,
    ProvidersEmployersEmployerIdCustomholidaysGetResponse,
    ProvidersEmployersEmployerIdCustomholidaysGetResponse1,
    ProvidersEmployersEmployerIdCustomholidaysGetResponse2,
    ProvidersEmployersEmployerIdCustomholidaysGetResponse3,
    ProvidersEmployersEmployerIdCustomholidaysPostResponse,
    ProvidersEmployersEmployerIdCustomholidaysPostResponse1,
    ProvidersEmployersEmployerIdCustomholidaysPostResponse2,
    ProvidersEmployersEmployerIdCustomholidaysPostResponse3,
    ProvidersEmployersEmployerIdDashboardGetResponse,
    ProvidersEmployersEmployerIdDashboardGetResponse1,
    ProvidersEmployersEmployerIdDashboardGetResponse2,
    ProvidersEmployersEmployerIdDashboardGetResponse3,
    ProvidersEmployersEmployerIdDashboardLicensesGetResponse,
    ProvidersEmployersEmployerIdDashboardLicensesGetResponse1,
    ProvidersEmployersEmployerIdDashboardLicensesGetResponse2,
    ProvidersEmployersEmployerIdDashboardLicensesGetResponse3,
    ProvidersEmployersEmployerIdDashboardLicensesPutResponse,
    ProvidersEmployersEmployerIdDashboardLicensesPutResponse1,
    ProvidersEmployersEmployerIdDashboardLicensesPutResponse2,
    ProvidersEmployersEmployerIdDashboardLicensesPutResponse3,
    ProvidersEmployersEmployerIdDashboardLicensesPutResponse4,
    ProvidersEmployersEmployerIdDatanewbusinesstokenGetResponse,
    ProvidersEmployersEmployerIdDatanewbusinesstokenGetResponse1,
    ProvidersEmployersEmployerIdDatanewbusinesstokenGetResponse2,
    ProvidersEmployersEmployerIdDatanewbusinesstokenGetResponse3,
    ProvidersEmployersEmployerIdDepartmentsGetResponse,
    ProvidersEmployersEmployerIdDepartmentsGetResponse1,
    ProvidersEmployersEmployerIdDepartmentsGetResponse2,
    ProvidersEmployersEmployerIdDepartmentsGetResponse3,
    ProvidersEmployersEmployerIdDepartmentsPostResponse,
    ProvidersEmployersEmployerIdDepartmentsPostResponse1,
    ProvidersEmployersEmployerIdDepartmentsPostResponse2,
    ProvidersEmployersEmployerIdDepartmentsPostResponse3,
    ProvidersEmployersEmployerIdDocumentsAuthorizationsGetResponse,
    ProvidersEmployersEmployerIdDocumentsAuthorizationsGetResponse1,
    ProvidersEmployersEmployerIdDocumentsAuthorizationsGetResponse2,
    ProvidersEmployersEmployerIdDocumentsAuthorizationsPutRequest,
    ProvidersEmployersEmployerIdDocumentsAuthorizationsPutResponse,
    ProvidersEmployersEmployerIdDocumentsAuthorizationsPutResponse1,
    ProvidersEmployersEmployerIdDocumentsAuthorizationsPutResponse2,
    ProvidersEmployersEmployerIdDocumentsAuthorizationsPutResponse3,
    ProvidersEmployersEmployerIdDocumentsAuthorizationsPutResponse4,
    ProvidersEmployersEmployerIdDocumentsCompletedossierDeleteResponse,
    ProvidersEmployersEmployerIdDocumentsCompletedossierDeleteResponse1,
    ProvidersEmployersEmployerIdDocumentsCompletedossierDeleteResponse2,
    ProvidersEmployersEmployerIdDocumentsCompletedossierDeleteResponse3,
    ProvidersEmployersEmployerIdDocumentsCompletedossierDeleteResponse4,
    ProvidersEmployersEmployerIdDocumentsCompletedossierInitiatePostResponse,
    ProvidersEmployersEmployerIdDocumentsCompletedossierInitiatePostResponse1,
    ProvidersEmployersEmployerIdDocumentsCompletedossierInitiatePostResponse2,
    ProvidersEmployersEmployerIdDocumentsCompletedossierInitiatePostResponse3,
    ProvidersEmployersEmployerIdDocumentsCompletedossierInitiatePostResponse4,
    ProvidersEmployersEmployerIdDocumentsDocumentIdAudittrailGetResponse,
    ProvidersEmployersEmployerIdDocumentsDocumentIdAudittrailGetResponse1,
    ProvidersEmployersEmployerIdDocumentsDocumentIdAudittrailGetResponse2,
    ProvidersEmployersEmployerIdDocumentsDocumentIdAudittrailGetResponse3,
    ProvidersEmployersEmployerIdDocumentsDocumentIdDeleteResponse,
    ProvidersEmployersEmployerIdDocumentsDocumentIdDeleteResponse1,
    ProvidersEmployersEmployerIdDocumentsDocumentIdDeleteResponse2,
    ProvidersEmployersEmployerIdDocumentsDocumentIdDeleteResponse3,
    ProvidersEmployersEmployerIdDocumentsDocumentIdGetResponse,
    ProvidersEmployersEmployerIdDocumentsDocumentIdGetResponse1,
    ProvidersEmployersEmployerIdDocumentsDocumentIdPutResponse,
    ProvidersEmployersEmployerIdDocumentsDocumentIdPutResponse1,
    ProvidersEmployersEmployerIdDocumentsDocumentIdPutResponse2,
    ProvidersEmployersEmployerIdDocumentsDocumentIdPutResponse3,
    ProvidersEmployersEmployerIdDocumentsGetResponse,
    ProvidersEmployersEmployerIdDocumentsGetResponse1,
    ProvidersEmployersEmployerIdDocumentsGetResponse2,
    ProvidersEmployersEmployerIdDocumentsGetResponse3,
    ProvidersEmployersEmployerIdDocumentsPostResponse,
    ProvidersEmployersEmployerIdDocumentsPostResponse1,
    ProvidersEmployersEmployerIdDocumentsPostResponse2,
    ProvidersEmployersEmployerIdDocumenttemplatesDocumentIdDeleteResponse,
    ProvidersEmployersEmployerIdDocumenttemplatesDocumentIdDeleteResponse1,
    ProvidersEmployersEmployerIdDocumenttemplatesDocumentIdDeleteResponse2,
    ProvidersEmployersEmployerIdDocumenttemplatesDocumentIdDeleteResponse3,
    ProvidersEmployersEmployerIdDocumenttemplatesDocumentIdGeneratedocumentsPostResponse,
    ProvidersEmployersEmployerIdDocumenttemplatesDocumentIdGeneratedocumentsPostResponse1,
    ProvidersEmployersEmployerIdDocumenttemplatesDocumentIdGeneratedocumentsPostResponse2,
    ProvidersEmployersEmployerIdDocumenttemplatesDocumentIdGetResponse,
    ProvidersEmployersEmployerIdDocumenttemplatesDocumentIdGetResponse1,
    ProvidersEmployersEmployerIdDocumenttemplatesDocumentIdPutResponse,
    ProvidersEmployersEmployerIdDocumenttemplatesDocumentIdPutResponse1,
    ProvidersEmployersEmployerIdDocumenttemplatesDocumentIdPutResponse2,
    ProvidersEmployersEmployerIdDocumenttemplatesDocumentIdPutResponse3,
    ProvidersEmployersEmployerIdDocumenttemplatesGetResponse,
    ProvidersEmployersEmployerIdDocumenttemplatesGetResponse1,
    ProvidersEmployersEmployerIdDocumenttemplatesGetResponse2,
    ProvidersEmployersEmployerIdDocumenttemplatesGetResponse3,
    ProvidersEmployersEmployerIdDocumenttemplatesPostResponse,
    ProvidersEmployersEmployerIdDocumenttemplatesPostResponse1,
    ProvidersEmployersEmployerIdDocumenttemplatesPostResponse2,
    ProvidersEmployersEmployerIdEducationfurtherindicationsGetResponse,
    ProvidersEmployersEmployerIdEducationfurtherindicationsGetResponse1,
    ProvidersEmployersEmployerIdEducationfurtherindicationsGetResponse2,
    ProvidersEmployersEmployerIdEducationfurtherindicationsGetResponse3,
    ProvidersEmployersEmployerIdEducationfurtherindicationsPostResponse,
    ProvidersEmployersEmployerIdEducationfurtherindicationsPostResponse1,
    ProvidersEmployersEmployerIdEducationfurtherindicationsPostResponse2,
    ProvidersEmployersEmployerIdEducationfurtherindicationsPostResponse3,
    ProvidersEmployersEmployerIdEducationtypesGetResponse,
    ProvidersEmployersEmployerIdEducationtypesGetResponse1,
    ProvidersEmployersEmployerIdEducationtypesGetResponse2,
    ProvidersEmployersEmployerIdEducationtypesGetResponse3,
    ProvidersEmployersEmployerIdEducationtypesPostResponse,
    ProvidersEmployersEmployerIdEducationtypesPostResponse1,
    ProvidersEmployersEmployerIdEducationtypesPostResponse2,
    ProvidersEmployersEmployerIdEducationtypesPostResponse3,
    ProvidersEmployersEmployerIdEmailidentitiesGetResponse,
    ProvidersEmployersEmployerIdEmailidentitiesGetResponse1,
    ProvidersEmployersEmployerIdEmailidentitiesGetResponse2,
    ProvidersEmployersEmployerIdEmailidentitiesGetResponse3,
    ProvidersEmployersEmployerIdEmailidentitiesPostResponse,
    ProvidersEmployersEmployerIdEmailidentitiesPostResponse1,
    ProvidersEmployersEmployerIdEmailidentitiesPostResponse2,
    ProvidersEmployersEmployerIdEmailidentitiesPostResponse3,
    ProvidersEmployersEmployerIdEmailidentitiesVerifyPostResponse,
    ProvidersEmployersEmployerIdEmailidentitiesVerifyPostResponse1,
    ProvidersEmployersEmployerIdEmailidentitiesVerifyPostResponse2,
    ProvidersEmployersEmployerIdEmailidentitiesVerifyPostResponse3,
    ProvidersEmployersEmployerIdEmailtemplatesEmailTemplateIdDeleteResponse,
    ProvidersEmployersEmployerIdEmailtemplatesEmailTemplateIdDeleteResponse1,
    ProvidersEmployersEmployerIdEmailtemplatesEmailTemplateIdDeleteResponse2,
    ProvidersEmployersEmployerIdEmailtemplatesEmailTemplateIdDeleteResponse3,
    ProvidersEmployersEmployerIdEmailtemplatesEmailTemplateIdGetResponse,
    ProvidersEmployersEmployerIdEmailtemplatesEmailTemplateIdGetResponse1,
    ProvidersEmployersEmployerIdEmailtemplatesEmailTemplateIdGetResponse2,
    ProvidersEmployersEmployerIdEmailtemplatesEmailTemplateIdGetResponse3,
    ProvidersEmployersEmployerIdEmailtemplatesEmailTemplateIdPutResponse,
    ProvidersEmployersEmployerIdEmailtemplatesEmailTemplateIdPutResponse1,
    ProvidersEmployersEmployerIdEmailtemplatesEmailTemplateIdPutResponse2,
    ProvidersEmployersEmployerIdEmailtemplatesEmailTemplateIdPutResponse3,
    ProvidersEmployersEmployerIdEmailtemplatesEmailTemplateIdPutResponse4,
    ProvidersEmployersEmployerIdEmailtemplatesGetResponse,
    ProvidersEmployersEmployerIdEmailtemplatesGetResponse1,
    ProvidersEmployersEmployerIdEmailtemplatesGetResponse2,
    ProvidersEmployersEmployerIdEmailtemplatesGetResponse3,
    ProvidersEmployersEmployerIdEmployeesActualpartnersGetResponse,
    ProvidersEmployersEmployerIdEmployeesActualpartnersGetResponse1,
    ProvidersEmployersEmployerIdEmployeesActualpartnersGetResponse2,
    ProvidersEmployersEmployerIdEmployeesActualpartnersGetResponse3,
    ProvidersEmployersEmployerIdEmployeesChildrenGetResponse,
    ProvidersEmployersEmployerIdEmployeesChildrenGetResponse1,
    ProvidersEmployersEmployerIdEmployeesChildrenGetResponse2,
    ProvidersEmployersEmployerIdEmployeesChildrenGetResponse3,
    ProvidersEmployersEmployerIdEmployeesContactsGetResponse,
    ProvidersEmployersEmployerIdEmployeesContactsGetResponse1,
    ProvidersEmployersEmployerIdEmployeesContactsGetResponse2,
    ProvidersEmployersEmployerIdEmployeesContactsGetResponse3,
    ProvidersEmployersEmployerIdEmployeesEmploymentsActualbenefitsanddeductionsGetResponse,
    ProvidersEmployersEmployerIdEmployeesEmploymentsActualbenefitsanddeductionsGetResponse1,
    ProvidersEmployersEmployerIdEmployeesEmploymentsActualbenefitsanddeductionsGetResponse2,
    ProvidersEmployersEmployerIdEmployeesEmploymentsActualbenefitsanddeductionsGetResponse3,
    ProvidersEmployersEmployerIdEmployeesEmploymentsBenefitsanddeductionsPostResponse,
    ProvidersEmployersEmployerIdEmployeesEmploymentsBenefitsanddeductionsPostResponse1,
    ProvidersEmployersEmployerIdEmployeesEmploymentsBenefitsanddeductionsPostResponse2,
    ProvidersEmployersEmployerIdEmployeesEmploymentsCalendarAbsencesGetResponse,
    ProvidersEmployersEmployerIdEmployeesEmploymentsCalendarAbsencesGetResponse1,
    ProvidersEmployersEmployerIdEmployeesEmploymentsCalendarAbsencesGetResponse2,
    ProvidersEmployersEmployerIdEmployeesEmploymentsCalendarAbsencesGetResponse3,
    ProvidersEmployersEmployerIdEmployeesEmploymentsCalendarAvailablehoursGetResponse,
    ProvidersEmployersEmployerIdEmployeesEmploymentsCalendarAvailablehoursGetResponse1,
    ProvidersEmployersEmployerIdEmployeesEmploymentsCalendarAvailablehoursGetResponse2,
    ProvidersEmployersEmployerIdEmployeesEmploymentsCalendarAvailablehoursGetResponse3,
    ProvidersEmployersEmployerIdEmployeesEmploymentsCalendarLeaveGetResponse,
    ProvidersEmployersEmployerIdEmployeesEmploymentsCalendarLeaveGetResponse1,
    ProvidersEmployersEmployerIdEmployeesEmploymentsCalendarLeaveGetResponse2,
    ProvidersEmployersEmployerIdEmployeesEmploymentsCalendarLeaveGetResponse3,
    ProvidersEmployersEmployerIdEmployeesEmploymentsCalendarLeaverequestsGetResponse,
    ProvidersEmployersEmployerIdEmployeesEmploymentsCalendarLeaverequestsGetResponse1,
    ProvidersEmployersEmployerIdEmployeesEmploymentsCalendarLeaverequestsGetResponse2,
    ProvidersEmployersEmployerIdEmployeesEmploymentsCalendarLeaverequestsGetResponse3,
    ProvidersEmployersEmployerIdEmployeesEmploymentsComprehensiveGetResponse,
    ProvidersEmployersEmployerIdEmployeesEmploymentsComprehensiveGetResponse1,
    ProvidersEmployersEmployerIdEmployeesEmploymentsComprehensiveGetResponse2,
    ProvidersEmployersEmployerIdEmployeesEmploymentsComprehensiveGetResponse3,
    ProvidersEmployersEmployerIdEmployeesEmploymentsDeclarationsGetResponse,
    ProvidersEmployersEmployerIdEmployeesEmploymentsDeclarationsGetResponse1,
    ProvidersEmployersEmployerIdEmployeesEmploymentsDeclarationsGetResponse2,
    ProvidersEmployersEmployerIdEmployeesEmploymentsDeclarationsGetResponse3,
    ProvidersEmployersEmployerIdEmployeesEmploymentsDeclarationsWithattachmentGetResponse,
    ProvidersEmployersEmployerIdEmployeesEmploymentsDeclarationsWithattachmentGetResponse1,
    ProvidersEmployersEmployerIdEmployeesEmploymentsDeclarationsWithattachmentGetResponse2,
    ProvidersEmployersEmployerIdEmployeesEmploymentsDeclarationsWithattachmentGetResponse3,
    ProvidersEmployersEmployerIdEmployeesEmploymentsGetResponse,
    ProvidersEmployersEmployerIdEmployeesEmploymentsGetResponse1,
    ProvidersEmployersEmployerIdEmployeesEmploymentsGetResponse2,
    ProvidersEmployersEmployerIdEmployeesEmploymentsGetResponse3,
    ProvidersEmployersEmployerIdEmployeesEmploymentsLastmodifiedversionnumbersGetResponse,
    ProvidersEmployersEmployerIdEmployeesEmploymentsLastmodifiedversionnumbersGetResponse1,
    ProvidersEmployersEmployerIdEmployeesEmploymentsLastmodifiedversionnumbersGetResponse2,
    ProvidersEmployersEmployerIdEmployeesEmploymentsLastmodifiedversionnumbersGetResponse3,
    ProvidersEmployersEmployerIdEmployeesEmploymentsLeaverequestsGetResponse,
    ProvidersEmployersEmployerIdEmployeesEmploymentsLeaverequestsGetResponse1,
    ProvidersEmployersEmployerIdEmployeesEmploymentsLeaverequestsGetResponse2,
    ProvidersEmployersEmployerIdEmployeesEmploymentsLeaverequestsGetResponse3,
    ProvidersEmployersEmployerIdEmployeesEmploymentsMinimizedGetResponse,
    ProvidersEmployersEmployerIdEmployeesEmploymentsMinimizedGetResponse1,
    ProvidersEmployersEmployerIdEmployeesEmploymentsMinimizedGetResponse2,
    ProvidersEmployersEmployerIdEmployeesEmploymentsMinimizedGetResponse3,
    ProvidersEmployersEmployerIdEmployeesEmploymentsWageProposalsGetResponse,
    ProvidersEmployersEmployerIdEmployeesEmploymentsWageProposalsGetResponse1,
    ProvidersEmployersEmployerIdEmployeesEmploymentsWageProposalsGetResponse2,
    ProvidersEmployersEmployerIdEmployeesEmploymentsWageProposalsGetResponse3,
    ProvidersEmployersEmployerIdEmployeesEmploymentsWagesPostResponse,
    ProvidersEmployersEmployerIdEmployeesEmploymentsWagesPostResponse1,
    ProvidersEmployersEmployerIdEmployeesEmploymentsWagesPostResponse2,
    ProvidersEmployersEmployerIdEmployeesGetResponse,
    ProvidersEmployersEmployerIdEmployeesGetResponse2,
    ProvidersEmployersEmployerIdEmployeesGetResponse3,
    ProvidersEmployersEmployerIdEmployeesGetResponse4,
    ProvidersEmployersEmployerIdEmployeesSelfserviceGetResponse,
    ProvidersEmployersEmployerIdEmployeesSelfserviceGetResponse1,
    ProvidersEmployersEmployerIdEmployeesSelfserviceGetResponse2,
    ProvidersEmployersEmployerIdEmployeesSelfserviceGetResponse3,
    ProvidersEmployersEmployerIdEmployeesSelfservicePatchResponse,
    ProvidersEmployersEmployerIdEmployeesSelfservicePatchResponse1,
    ProvidersEmployersEmployerIdEmployeesSelfservicePatchResponse2,
    ProvidersEmployersEmployerIdEmployeesSelfservicePatchResponse3,
    ProvidersEmployersEmployerIdEmploymenttemplatesGetResponse,
    ProvidersEmployersEmployerIdEmploymenttemplatesGetResponse1,
    ProvidersEmployersEmployerIdEmploymenttemplatesGetResponse2,
    ProvidersEmployersEmployerIdEmploymenttemplatesGetResponse3,
    ProvidersEmployersEmployerIdExternaltenantsGetResponse,
    ProvidersEmployersEmployerIdExternaltenantsGetResponse1,
    ProvidersEmployersEmployerIdExternaltenantsGetResponse2,
    ProvidersEmployersEmployerIdExternaltenantsGetResponse3,
    ProvidersEmployersEmployerIdFunctionsGetResponse,
    ProvidersEmployersEmployerIdFunctionsGetResponse1,
    ProvidersEmployersEmployerIdFunctionsGetResponse2,
    ProvidersEmployersEmployerIdFunctionsGetResponse3,
    ProvidersEmployersEmployerIdFunctionsPostResponse,
    ProvidersEmployersEmployerIdFunctionsPostResponse1,
    ProvidersEmployersEmployerIdFunctionsPostResponse2,
    ProvidersEmployersEmployerIdFunctionsPostResponse3,
    ProvidersEmployersEmployerIdGetResponse,
    ProvidersEmployersEmployerIdGetResponse1,
    ProvidersEmployersEmployerIdGetResponse2,
    ProvidersEmployersEmployerIdGetResponse3,
    ProvidersEmployersEmployerIdLeavebalancesGetResponse,
    ProvidersEmployersEmployerIdLeavebalancesGetResponse1,
    ProvidersEmployersEmployerIdLeavebalancesGetResponse2,
    ProvidersEmployersEmployerIdLeavebalancesGetResponse3,
    ProvidersEmployersEmployerIdLeavebalancesGroupedGetResponse,
    ProvidersEmployersEmployerIdLeavebalancesGroupedGetResponse1,
    ProvidersEmployersEmployerIdLeavebalancesGroupedGetResponse2,
    ProvidersEmployersEmployerIdLeavebalancesGroupedGetResponse3,
    ProvidersEmployersEmployerIdLeavePoliciesGetResponse,
    ProvidersEmployersEmployerIdLeavePoliciesGetResponse1,
    ProvidersEmployersEmployerIdLeavePoliciesGetResponse2,
    ProvidersEmployersEmployerIdLeavePoliciesGetResponse3,
    ProvidersEmployersEmployerIdLeavePoliciesPatchResponse,
    ProvidersEmployersEmployerIdLeavePoliciesPatchResponse1,
    ProvidersEmployersEmployerIdLeavePoliciesPatchResponse2,
    ProvidersEmployersEmployerIdLeavePoliciesPatchResponse3,
    ProvidersEmployersEmployerIdLeavePoliciesPostResponse,
    ProvidersEmployersEmployerIdLeavePoliciesPostResponse1,
    ProvidersEmployersEmployerIdLeavePoliciesPostResponse2,
    ProvidersEmployersEmployerIdLeavePoliciesPostResponse3,
    ProvidersEmployersEmployerIdLeavePostResponse,
    ProvidersEmployersEmployerIdLeavePostResponse1,
    ProvidersEmployersEmployerIdLeavePostResponse2,
    ProvidersEmployersEmployerIdLeaveProposedleavehoursGetResponse,
    ProvidersEmployersEmployerIdLeaveProposedleavehoursGetResponse1,
    ProvidersEmployersEmployerIdLeaveProposedleavehoursGetResponse2,
    ProvidersEmployersEmployerIdLeaveProposedleavehoursGetResponse3,
    ProvidersEmployersEmployerIdLeavetypesGetResponse,
    ProvidersEmployersEmployerIdLeavetypesGetResponse1,
    ProvidersEmployersEmployerIdLeavetypesGetResponse2,
    ProvidersEmployersEmployerIdLeavetypesGetResponse3,
    ProvidersEmployersEmployerIdLeavetypesLeaveTypeIdGetResponse,
    ProvidersEmployersEmployerIdLeavetypesLeaveTypeIdGetResponse1,
    ProvidersEmployersEmployerIdLeavetypesLeaveTypeIdGetResponse2,
    ProvidersEmployersEmployerIdLeavetypesLeaveTypeIdGetResponse3,
    ProvidersEmployersEmployerIdLeavetypesLeaveTypeIdPutResponse,
    ProvidersEmployersEmployerIdLeavetypesLeaveTypeIdPutResponse1,
    ProvidersEmployersEmployerIdLeavetypesLeaveTypeIdPutResponse2,
    ProvidersEmployersEmployerIdLeavetypesLeaveTypeIdPutResponse3,
    ProvidersEmployersEmployerIdLeavetypesLeaveTypeIdPutResponse4,
    ProvidersEmployersEmployerIdLogoDeleteResponse,
    ProvidersEmployersEmployerIdLogoDeleteResponse1,
    ProvidersEmployersEmployerIdLogoDeleteResponse2,
    ProvidersEmployersEmployerIdLogoDeleteResponse3,
    ProvidersEmployersEmployerIdLogoGetResponse,
    ProvidersEmployersEmployerIdLogoGetResponse1,
    ProvidersEmployersEmployerIdLogoPostResponse,
    ProvidersEmployersEmployerIdLogoPostResponse1,
    ProvidersEmployersEmployerIdLogoPostResponse2,
    ProvidersEmployersEmployerIdLogoPostResponse3,
    ProvidersEmployersEmployerIdLogoVersionGetResponse,
    ProvidersEmployersEmployerIdLogoVersionGetResponse1,
    ProvidersEmployersEmployerIdModulesGetResponse,
    ProvidersEmployersEmployerIdModulesGetResponse1,
    ProvidersEmployersEmployerIdModulesGetResponse2,
    ProvidersEmployersEmployerIdModulesGetResponse3,
    ProvidersEmployersEmployerIdNationalholidaysGetResponse,
    ProvidersEmployersEmployerIdNationalholidaysGetResponse1,
    ProvidersEmployersEmployerIdNationalholidaysGetResponse2,
    ProvidersEmployersEmployerIdNationalholidaysGetResponse3,
    ProvidersEmployersEmployerIdNationalholidaysNationalHolidayIdGetResponse,
    ProvidersEmployersEmployerIdNationalholidaysNationalHolidayIdGetResponse1,
    ProvidersEmployersEmployerIdNationalholidaysNationalHolidayIdGetResponse2,
    ProvidersEmployersEmployerIdNationalholidaysNationalHolidayIdGetResponse3,
    ProvidersEmployersEmployerIdNationalholidaysNationalHolidayIdPutResponse,
    ProvidersEmployersEmployerIdNationalholidaysNationalHolidayIdPutResponse1,
    ProvidersEmployersEmployerIdNationalholidaysNationalHolidayIdPutResponse2,
    ProvidersEmployersEmployerIdNationalholidaysNationalHolidayIdPutResponse3,
    ProvidersEmployersEmployerIdNationalholidaysNationalHolidayIdPutResponse4,
    ProvidersEmployersEmployerIdNotesGetResponse,
    ProvidersEmployersEmployerIdNotesGetResponse1,
    ProvidersEmployersEmployerIdNotesGetResponse2,
    ProvidersEmployersEmployerIdNotesGetResponse3,
    ProvidersEmployersEmployerIdNotesPostResponse,
    ProvidersEmployersEmployerIdNotesPostResponse1,
    ProvidersEmployersEmployerIdNotesPostResponse2,
    ProvidersEmployersEmployerIdNotesPostResponse3,
    ProvidersEmployersEmployerIdNotificationsGetResponse,
    ProvidersEmployersEmployerIdNotificationsGetResponse1,
    ProvidersEmployersEmployerIdNotificationsGetResponse2,
    ProvidersEmployersEmployerIdNotificationsGetResponse3,
    ProvidersEmployersEmployerIdPayrolladministrationsGetResponse,
    ProvidersEmployersEmployerIdPayrolladministrationsGetResponse1,
    ProvidersEmployersEmployerIdPayrolladministrationsGetResponse2,
    ProvidersEmployersEmployerIdPayrolladministrationsGetResponse3,
    ProvidersEmployersEmployerIdProformaGetResponse,
    ProvidersEmployersEmployerIdProformaGetResponse1,
    ProvidersEmployersEmployerIdProformaGetResponse2,
    ProvidersEmployersEmployerIdProformaGetResponse3,
    ProvidersEmployersEmployerIdProformaInitializePostResponse,
    ProvidersEmployersEmployerIdProformaInitializePostResponse1,
    ProvidersEmployersEmployerIdProformaInitializePostResponse2,
    ProvidersEmployersEmployerIdProviderlogoGetResponse,
    ProvidersEmployersEmployerIdProviderlogoGetResponse1,
    ProvidersEmployersEmployerIdProviderlogoVersionGetResponse,
    ProvidersEmployersEmployerIdProviderlogoVersionGetResponse1,
    ProvidersEmployersEmployerIdPutResponse,
    ProvidersEmployersEmployerIdPutResponse1,
    ProvidersEmployersEmployerIdPutResponse2,
    ProvidersEmployersEmployerIdPutResponse3,
    ProvidersEmployersEmployerIdPutResponse4,
    ProvidersEmployersEmployerIdUseraccessibledepartmentsGetResponse,
    ProvidersEmployersEmployerIdUseraccessibledepartmentsGetResponse1,
    ProvidersEmployersEmployerIdUseraccessibledepartmentsGetResponse2,
    ProvidersEmployersEmployerIdUseraccessibledepartmentsGetResponse3,
    ProvidersEmployersEmployerIdUsersDepartmentsGetResponse,
    ProvidersEmployersEmployerIdUsersDepartmentsGetResponse1,
    ProvidersEmployersEmployerIdUsersDepartmentsGetResponse2,
    ProvidersEmployersEmployerIdUsersDepartmentsGetResponse3,
    ProvidersEmployersEmployerIdUsersGetResponse,
    ProvidersEmployersEmployerIdUsersGetResponse1,
    ProvidersEmployersEmployerIdUsersGetResponse2,
    ProvidersEmployersEmployerIdUsersGetResponse3,
    ProvidersEmployersEmployerIdUsersInvitePostResponse,
    ProvidersEmployersEmployerIdUsersInvitePostResponse1,
    ProvidersEmployersEmployerIdUsersInvitePostResponse2,
    ProvidersEmployersEmployerIdUsersInvitePostResponse3,
    ProvidersEmployersEmployerIdUsersLinkPostResponse,
    ProvidersEmployersEmployerIdUsersLinkPostResponse1,
    ProvidersEmployersEmployerIdUsersLinkPostResponse2,
    ProvidersEmployersEmployerIdUsersPostResponse,
    ProvidersEmployersEmployerIdUsersPostResponse1,
    ProvidersEmployersEmployerIdUsersPostResponse2,
    ProvidersEmployersEmployerIdUsersPostResponse3,
    ProvidersEmployersEmployerIdUsersUserIdAuthorizationsGetResponse,
    ProvidersEmployersEmployerIdUsersUserIdAuthorizationsGetResponse1,
    ProvidersEmployersEmployerIdUsersUserIdAuthorizationsGetResponse2,
    ProvidersEmployersEmployerIdUsersUserIdAuthorizationsGetResponse3,
    ProvidersEmployersEmployerIdUsersUserIdAuthorizationsPatchResponse,
    ProvidersEmployersEmployerIdUsersUserIdAuthorizationsPatchResponse1,
    ProvidersEmployersEmployerIdUsersUserIdAuthorizationsPatchResponse2,
    ProvidersEmployersEmployerIdUsersUserIdAuthorizationsPatchResponse3,
    ProvidersEmployersEmployerIdUsersUserIdDepartmentsPatchRequest,
    ProvidersEmployersEmployerIdUsersUserIdDepartmentsPatchResponse,
    ProvidersEmployersEmployerIdUsersUserIdDepartmentsPatchResponse1,
    ProvidersEmployersEmployerIdUsersUserIdDepartmentsPatchResponse2,
    ProvidersEmployersEmployerIdUsersUserIdDepartmentsPatchResponse3,
    ProvidersEmployersEmployerIdUsersUserIdDepartmentsPatchResponse4,
    ProvidersEmployersEmployerIdWorkflowsGetResponse,
    ProvidersEmployersEmployerIdWorkflowsGetResponse1,
    ProvidersEmployersEmployerIdWorkflowsGetResponse2,
    ProvidersEmployersEmployerIdWorkflowsGetResponse3,
    ProvidersEmployersEmployerIdWorkflowtriggermappingsGetResponse,
    ProvidersEmployersEmployerIdWorkflowtriggermappingsGetResponse1,
    ProvidersEmployersEmployerIdWorkflowtriggermappingsGetResponse2,
    ProvidersEmployersEmployerIdWorkflowtriggermappingsGetResponse3,
    ProvidersEmployersEmployerIdWorkflowtriggermappingsPostResponse,
    ProvidersEmployersEmployerIdWorkflowtriggermappingsPostResponse1,
    ProvidersEmployersEmployerIdWorkflowtriggermappingsPostResponse2,
    ProvidersEmployersEmployerIdWorkflowtriggermappingsPostResponse3,
    ProvidersEmployersFunctionsFunctionIdGetResponse,
    ProvidersEmployersFunctionsFunctionIdGetResponse1,
    ProvidersEmployersFunctionsFunctionIdGetResponse2,
    ProvidersEmployersFunctionsFunctionIdGetResponse3,
    ProvidersEmployersFunctionsFunctionIdPutResponse,
    ProvidersEmployersFunctionsFunctionIdPutResponse1,
    ProvidersEmployersFunctionsFunctionIdPutResponse2,
    ProvidersEmployersFunctionsFunctionIdPutResponse3,
    ProvidersEmployersFunctionsFunctionIdPutResponse4,
    ProvidersEmployersGetResponse,
    ProvidersEmployersGetResponse1,
    ProvidersEmployersGetResponse2,
    ProvidersEmployersGetResponse3,
    ProvidersEmployersLastmodifiedversionnumbersGetResponse,
    ProvidersEmployersLastmodifiedversionnumbersGetResponse1,
    ProvidersEmployersLastmodifiedversionnumbersGetResponse2,
    ProvidersEmployersLastmodifiedversionnumbersGetResponse3,
    ProvidersEmployersLeavePoliciesAgebasedleaveAgeBasedLeaveIdDeleteResponse,
    ProvidersEmployersLeavePoliciesAgebasedleaveAgeBasedLeaveIdDeleteResponse1,
    ProvidersEmployersLeavePoliciesAgebasedleaveAgeBasedLeaveIdDeleteResponse2,
    ProvidersEmployersLeavePoliciesAgebasedleaveAgeBasedLeaveIdDeleteResponse3,
    ProvidersEmployersLeavePoliciesAgebasedleaveAgeBasedLeaveIdGetResponse,
    ProvidersEmployersLeavePoliciesAgebasedleaveAgeBasedLeaveIdGetResponse1,
    ProvidersEmployersLeavePoliciesAgebasedleaveAgeBasedLeaveIdGetResponse2,
    ProvidersEmployersLeavePoliciesAgebasedleaveAgeBasedLeaveIdGetResponse3,
    ProvidersEmployersLeavePoliciesAgebasedleaveAgeBasedLeaveIdPutResponse,
    ProvidersEmployersLeavePoliciesAgebasedleaveAgeBasedLeaveIdPutResponse1,
    ProvidersEmployersLeavePoliciesAgebasedleaveAgeBasedLeaveIdPutResponse2,
    ProvidersEmployersLeavePoliciesAgebasedleaveAgeBasedLeaveIdPutResponse3,
    ProvidersEmployersLeavePoliciesAgebasedleaveAgeBasedLeaveIdPutResponse4,
    ProvidersEmployersLeavePoliciesLeavePolicyIdAgebasedleaveGetResponse,
    ProvidersEmployersLeavePoliciesLeavePolicyIdAgebasedleaveGetResponse1,
    ProvidersEmployersLeavePoliciesLeavePolicyIdAgebasedleaveGetResponse2,
    ProvidersEmployersLeavePoliciesLeavePolicyIdAgebasedleaveGetResponse3,
    ProvidersEmployersLeavePoliciesLeavePolicyIdAgebasedleavePostResponse,
    ProvidersEmployersLeavePoliciesLeavePolicyIdAgebasedleavePostResponse1,
    ProvidersEmployersLeavePoliciesLeavePolicyIdAgebasedleavePostResponse2,
    ProvidersEmployersLeavePoliciesLeavePolicyIdAgebasedleavePostResponse3,
    ProvidersEmployersLeavePoliciesLeavePolicyIdDeleteResponse,
    ProvidersEmployersLeavePoliciesLeavePolicyIdDeleteResponse1,
    ProvidersEmployersLeavePoliciesLeavePolicyIdDeleteResponse2,
    ProvidersEmployersLeavePoliciesLeavePolicyIdDeleteResponse3,
    ProvidersEmployersLeavepoliciesLeavePolicyIdEmploymentsGetResponse,
    ProvidersEmployersLeavepoliciesLeavePolicyIdEmploymentsGetResponse1,
    ProvidersEmployersLeavepoliciesLeavePolicyIdEmploymentsGetResponse2,
    ProvidersEmployersLeavepoliciesLeavePolicyIdEmploymentsGetResponse3,
    ProvidersEmployersLeavepoliciesLeavePolicyIdEmploymentsPatchRequest,
    ProvidersEmployersLeavepoliciesLeavePolicyIdEmploymentsPatchResponse,
    ProvidersEmployersLeavepoliciesLeavePolicyIdEmploymentsPatchResponse1,
    ProvidersEmployersLeavepoliciesLeavePolicyIdEmploymentsPatchResponse2,
    ProvidersEmployersLeavepoliciesLeavePolicyIdEmploymentsPatchResponse3,
    ProvidersEmployersLeavepoliciesLeavePolicyIdEmploymentsPatchResponse4,
    ProvidersEmployersLeavePoliciesLeavePolicyIdGetResponse,
    ProvidersEmployersLeavePoliciesLeavePolicyIdGetResponse1,
    ProvidersEmployersLeavePoliciesLeavePolicyIdGetResponse2,
    ProvidersEmployersLeavePoliciesLeavePolicyIdGetResponse3,
    ProvidersEmployersLeavePoliciesLeavePolicyIdPutResponse,
    ProvidersEmployersLeavePoliciesLeavePolicyIdPutResponse1,
    ProvidersEmployersLeavePoliciesLeavePolicyIdPutResponse2,
    ProvidersEmployersLeavePoliciesLeavePolicyIdPutResponse3,
    ProvidersEmployersLeavePoliciesLeavePolicyIdPutResponse4,
    ProvidersEmployersLeavePoliciesLeavePolicyIdWagebasedleaveGetResponse,
    ProvidersEmployersLeavePoliciesLeavePolicyIdWagebasedleaveGetResponse1,
    ProvidersEmployersLeavePoliciesLeavePolicyIdWagebasedleaveGetResponse2,
    ProvidersEmployersLeavePoliciesLeavePolicyIdWagebasedleaveGetResponse3,
    ProvidersEmployersLeavePoliciesLeavePolicyIdWagebasedleavePostResponse,
    ProvidersEmployersLeavePoliciesLeavePolicyIdWagebasedleavePostResponse1,
    ProvidersEmployersLeavePoliciesLeavePolicyIdWagebasedleavePostResponse2,
    ProvidersEmployersLeavePoliciesLeavePolicyIdWagebasedleavePostResponse3,
    ProvidersEmployersLeavePoliciesLeavePolicyIdYearsofservicebasedleaveGetResponse,
    ProvidersEmployersLeavePoliciesLeavePolicyIdYearsofservicebasedleaveGetResponse1,
    ProvidersEmployersLeavePoliciesLeavePolicyIdYearsofservicebasedleaveGetResponse2,
    ProvidersEmployersLeavePoliciesLeavePolicyIdYearsofservicebasedleaveGetResponse3,
    ProvidersEmployersLeavePoliciesLeavePolicyIdYearsofservicebasedleavePostResponse,
    ProvidersEmployersLeavePoliciesLeavePolicyIdYearsofservicebasedleavePostResponse1,
    ProvidersEmployersLeavePoliciesLeavePolicyIdYearsofservicebasedleavePostResponse2,
    ProvidersEmployersLeavePoliciesLeavePolicyIdYearsofservicebasedleavePostResponse3,
    ProvidersEmployersLeavePoliciesWagebasedleaveWageBasedLeaveIdDeleteResponse,
    ProvidersEmployersLeavePoliciesWagebasedleaveWageBasedLeaveIdDeleteResponse1,
    ProvidersEmployersLeavePoliciesWagebasedleaveWageBasedLeaveIdDeleteResponse2,
    ProvidersEmployersLeavePoliciesWagebasedleaveWageBasedLeaveIdDeleteResponse3,
    ProvidersEmployersLeavePoliciesWagebasedleaveWageBasedLeaveIdGetResponse,
    ProvidersEmployersLeavePoliciesWagebasedleaveWageBasedLeaveIdGetResponse1,
    ProvidersEmployersLeavePoliciesWagebasedleaveWageBasedLeaveIdGetResponse2,
    ProvidersEmployersLeavePoliciesWagebasedleaveWageBasedLeaveIdGetResponse3,
    ProvidersEmployersLeavePoliciesWagebasedleaveWageBasedLeaveIdPutResponse,
    ProvidersEmployersLeavePoliciesWagebasedleaveWageBasedLeaveIdPutResponse1,
    ProvidersEmployersLeavePoliciesWagebasedleaveWageBasedLeaveIdPutResponse2,
    ProvidersEmployersLeavePoliciesWagebasedleaveWageBasedLeaveIdPutResponse3,
    ProvidersEmployersLeavePoliciesWagebasedleaveWageBasedLeaveIdPutResponse4,
    ProvidersEmployersLeavePoliciesYearsofservicebasedleaveYearsOfServiceBasedLeaveIdDeleteResponse,
    ProvidersEmployersLeavePoliciesYearsofservicebasedleaveYearsOfServiceBasedLeaveIdDeleteResponse1,
    ProvidersEmployersLeavePoliciesYearsofservicebasedleaveYearsOfServiceBasedLeaveIdDeleteResponse2,
    ProvidersEmployersLeavePoliciesYearsofservicebasedleaveYearsOfServiceBasedLeaveIdDeleteResponse3,
    ProvidersEmployersLeavePoliciesYearsofservicebasedleaveYearsOfServiceBasedLeaveIdGetResponse,
    ProvidersEmployersLeavePoliciesYearsofservicebasedleaveYearsOfServiceBasedLeaveIdGetResponse1,
    ProvidersEmployersLeavePoliciesYearsofservicebasedleaveYearsOfServiceBasedLeaveIdGetResponse2,
    ProvidersEmployersLeavePoliciesYearsofservicebasedleaveYearsOfServiceBasedLeaveIdGetResponse3,
    ProvidersEmployersLeavePoliciesYearsofservicebasedleaveYearsOfServiceBasedLeaveIdPutResponse,
    ProvidersEmployersLeavePoliciesYearsofservicebasedleaveYearsOfServiceBasedLeaveIdPutResponse1,
    ProvidersEmployersLeavePoliciesYearsofservicebasedleaveYearsOfServiceBasedLeaveIdPutResponse2,
    ProvidersEmployersLeavePoliciesYearsofservicebasedleaveYearsOfServiceBasedLeaveIdPutResponse3,
    ProvidersEmployersLeavePoliciesYearsofservicebasedleaveYearsOfServiceBasedLeaveIdPutResponse4,
    ProvidersEmployersMinimizedGetResponse,
    ProvidersEmployersMinimizedGetResponse1,
    ProvidersEmployersMinimizedGetResponse2,
    ProvidersEmployersMinimizedGetResponse3,
    ProvidersEmployersNotesNoteIdDeleteResponse,
    ProvidersEmployersNotesNoteIdDeleteResponse1,
    ProvidersEmployersNotesNoteIdDeleteResponse2,
    ProvidersEmployersNotesNoteIdDeleteResponse3,
    ProvidersEmployersNotesNoteIdGetResponse,
    ProvidersEmployersNotesNoteIdGetResponse1,
    ProvidersEmployersNotesNoteIdGetResponse2,
    ProvidersEmployersNotesNoteIdGetResponse3,
    ProvidersEmployersNotesNoteIdPutResponse,
    ProvidersEmployersNotesNoteIdPutResponse1,
    ProvidersEmployersNotesNoteIdPutResponse2,
    ProvidersEmployersNotesNoteIdPutResponse3,
    ProvidersEmployersNotesNoteIdPutResponse4,
    ProvidersEmployersNotificationsPatchRequest,
    ProvidersEmployersNotificationsPatchResponse,
    ProvidersEmployersNotificationsPatchResponse1,
    ProvidersEmployersNotificationsPatchResponse2,
    ProvidersEmployersNotificationsPatchResponse3,
    ProvidersEmployersPayrolladministrationsApgpensiondeclarationsApgPensionDeclarationIdGetResponse,
    ProvidersEmployersPayrolladministrationsApgpensiondeclarationsApgPensionDeclarationIdGetResponse1,
    ProvidersEmployersPayrolladministrationsApgpensiondeclarationsApgPensionDeclarationIdGetResponse2,
    ProvidersEmployersPayrolladministrationsApgpensiondeclarationsApgPensionDeclarationIdGetResponse3,
    ProvidersEmployersPayrolladministrationsApgpensiondeclarationsApgPensionDeclarationIdMessageGetResponse,
    ProvidersEmployersPayrolladministrationsApgpensiondeclarationsApgPensionDeclarationIdMessageGetResponse1,
    ProvidersEmployersPayrolladministrationsApgpensiondeclarationsApgPensionDeclarationIdMessageGetResponse2,
    ProvidersEmployersPayrolladministrationsApgpensiondeclarationsApgPensionDeclarationIdOverviewGetResponse,
    ProvidersEmployersPayrolladministrationsApgpensiondeclarationsApgPensionDeclarationIdOverviewGetResponse1,
    ProvidersEmployersPayrolladministrationsApgpensiondeclarationsApgPensionDeclarationIdOverviewGetResponse2,
    ProvidersEmployersPayrolladministrationsApgpensiondeclarationsApgPensionDeclarationIdPatchRequest,
    ProvidersEmployersPayrolladministrationsApgpensiondeclarationsApgPensionDeclarationIdPatchResponse,
    ProvidersEmployersPayrolladministrationsApgpensiondeclarationsApgPensionDeclarationIdPatchResponse1,
    ProvidersEmployersPayrolladministrationsApgpensiondeclarationsApgPensionDeclarationIdPatchResponse2,
    ProvidersEmployersPayrolladministrationsApgpensiondeclarationsApgPensionDeclarationIdPatchResponse3,
    ProvidersEmployersPayrolladministrationsJournalrunsJournalrunIdDownloadPostResponse,
    ProvidersEmployersPayrolladministrationsJournalrunsJournalrunIdDownloadPostResponse1,
    ProvidersEmployersPayrolladministrationsJournalrunsJournalrunIdDownloadPostResponse2,
    ProvidersEmployersPayrolladministrationsJournalrunsJournalrunIdDownloadPostResponse3,
    ProvidersEmployersPayrolladministrationsJournalrunsJournalrunIdDownloadPostResponse4,
    ProvidersEmployersPayrolladministrationsJournalrunsJournalrunIdErrorsGetResponse,
    ProvidersEmployersPayrolladministrationsJournalrunsJournalrunIdErrorsGetResponse1,
    ProvidersEmployersPayrolladministrationsJournalrunsJournalrunIdErrorsGetResponse2,
    ProvidersEmployersPayrolladministrationsJournalrunsJournalrunIdErrorsGetResponse3,
    ProvidersEmployersPayrolladministrationsJournalrunsJournalrunIdExportAuditTrailGetResponse,
    ProvidersEmployersPayrolladministrationsJournalrunsJournalrunIdExportAuditTrailGetResponse1,
    ProvidersEmployersPayrolladministrationsJournalrunsJournalrunIdExportAuditTrailGetResponse2,
    ProvidersEmployersPayrolladministrationsJournalrunsJournalrunIdExportAuditTrailGetResponse3,
    ProvidersEmployersPayrolladministrationsJournalrunsJournalrunIdGetResponse,
    ProvidersEmployersPayrolladministrationsJournalrunsJournalrunIdGetResponse1,
    ProvidersEmployersPayrolladministrationsJournalrunsJournalrunIdGetResponse2,
    ProvidersEmployersPayrolladministrationsJournalrunsJournalrunIdGetResponse3,
    ProvidersEmployersPayrolladministrationsJournalrunsJournalrunIdPatchResponse,
    ProvidersEmployersPayrolladministrationsJournalrunsJournalrunIdPatchResponse1,
    ProvidersEmployersPayrolladministrationsJournalrunsJournalrunIdPatchResponse2,
    ProvidersEmployersPayrolladministrationsJournalrunsJournalrunIdPatchResponse3,
    ProvidersEmployersPayrolladministrationsJournalrunsJournalrunIdPatchResponse4,
    ProvidersEmployersPayrolladministrationsJournalrunsJournalrunIdResultsGetResponse,
    ProvidersEmployersPayrolladministrationsJournalrunsJournalrunIdResultsGetResponse1,
    ProvidersEmployersPayrolladministrationsJournalrunsJournalrunIdResultsGetResponse2,
    ProvidersEmployersPayrolladministrationsJournalrunsJournalrunIdResultsGetResponse3,
    ProvidersEmployersPayrolladministrationsJournalrunsJournalrunIdRunoverviewGetResponse,
    ProvidersEmployersPayrolladministrationsJournalrunsJournalrunIdRunoverviewGetResponse1,
    ProvidersEmployersPayrolladministrationsJournalrunsJournalrunIdRunoverviewGetResponse2,
    ProvidersEmployersPayrolladministrationsJournalrunsJournalrunIdRunoverviewperemploymentGetResponse,
    ProvidersEmployersPayrolladministrationsJournalrunsJournalrunIdRunoverviewperemploymentGetResponse1,
    ProvidersEmployersPayrolladministrationsJournalrunsJournalrunIdRunoverviewperemploymentGetResponse2,
    ProvidersEmployersPayrolladministrationsJournalrunsJournalrunIdSendPostResponse,
    ProvidersEmployersPayrolladministrationsJournalrunsJournalrunIdSendPostResponse1,
    ProvidersEmployersPayrolladministrationsJournalrunsJournalrunIdSendPostResponse2,
    ProvidersEmployersPayrolladministrationsJournalrunsJournalrunIdSendPostResponse3,
    ProvidersEmployersPayrolladministrationsJournalrunsJournalrunIdSendPostResponse4,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdAccumulatedbasicjournalresultsreportGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdAccumulatedbasicjournalresultsreportGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdAccumulatedbasicjournalresultsreportGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdAccumulationsandbalancesreportGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdAccumulationsandbalancesreportGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdAccumulationsandbalancesreportGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdAnnualpayrolltaxreturnreportGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdAnnualpayrolltaxreturnreportGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdAnnualpayrolltaxreturnreportGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdAnnualwagesheetreportGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdAnnualwagesheetreportGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdAnnualwagesheetreportGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdApgpensiondeclarationsGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdApgpensiondeclarationsGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdApgpensiondeclarationsGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdApgpensiondeclarationsGetResponse3,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdApgpensiondeclarationsInitiatePostResponse,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdApgpensiondeclarationsInitiatePostResponse1,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdApgpensiondeclarationsInitiatePostResponse2,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdApgpensiondeclarationsInitiatePostResponse3,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdAttachmentsofearningsreportGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdAttachmentsofearningsreportGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdAttachmentsofearningsreportGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdAuditTrailPayrollPeriodDataGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdAuditTrailPayrollPeriodDataGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdAuditTrailPayrollPeriodDataGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdAuditTrailPayrollPeriodDataGetResponse3,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdAvailablepayrollcomponentsetsGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdAvailablepayrollcomponentsetsGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdAvailablepayrollcomponentsetsGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdAvailablepayrollcomponentsetsGetResponse3,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdDeviatingpremiumswabGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdDeviatingpremiumswabGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdDeviatingpremiumswabGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdEmploymentPayrollDataAuditTrailGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdEmploymentPayrollDataAuditTrailGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdEmploymentPayrollDataAuditTrailGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdJournalrunsGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdJournalrunsGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdJournalrunsGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdJournalrunsGetResponse3,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdJournalrunsInitiatePostResponse,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdJournalrunsInitiatePostResponse1,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdJournalrunsInitiatePostResponse2,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdJournalrunsInitiatePostResponse3,
    ProvidersEmployersPayrollAdministrationsPayrollAdministrationIdMdvNotificationsPatchResponse,
    ProvidersEmployersPayrollAdministrationsPayrollAdministrationIdMdvNotificationsPatchResponse1,
    ProvidersEmployersPayrollAdministrationsPayrollAdministrationIdMdvNotificationsPatchResponse2,
    ProvidersEmployersPayrollAdministrationsPayrollAdministrationIdMdvNotificationsPatchResponse3,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrolladministrationsettingsreportGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrolladministrationsettingsreportGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrolladministrationsettingsreportGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollcomponentsYearYearGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollcomponentsYearYearGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollcomponentsYearYearGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollcomponentsYearYearGetResponse3,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollPeriodDataAuditTrailGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollPeriodDataAuditTrailGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollPeriodDataAuditTrailGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollperiodsCompareGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollperiodsCompareGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollperiodsCompareGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollperiodsCompareGetResponse3,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollperiodsGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollperiodsGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollperiodsGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollperiodsGetResponse3,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollperiodsInitialisePostResponse,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollperiodsInitialisePostResponse1,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollperiodsInitialisePostResponse2,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollperiodsMinimizedGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollperiodsMinimizedGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollperiodsMinimizedGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollperiodsMinimizedGetResponse3,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollPeriodsPayrollPeriodIdPayrollperioddataGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollPeriodsPayrollPeriodIdPayrollperioddataGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollPeriodsPayrollPeriodIdPayrollperioddataGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollPeriodsPayrollPeriodIdPayrollperioddataGetResponse3,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollperiodsPayrollPeriodIdPayrollresultsGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollperiodsPayrollPeriodIdPayrollresultsGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollperiodsPayrollPeriodIdPayrollresultsGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollperiodsPayrollPeriodIdPayrollresultsGetResponse3,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollprocessoverviewGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollprocessoverviewGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollprocessoverviewGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollprocessoverviewGetResponse3,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollrunsGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollrunsGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollrunsGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollrunsGetResponse3,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollrunsInitiatePostResponse,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollrunsInitiatePostResponse1,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollrunsInitiatePostResponse2,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollrunsInitiatePostResponse3,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollrunsPeriodIdInitiationvaluesGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollrunsPeriodIdInitiationvaluesGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollrunsPeriodIdInitiationvaluesGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrollrunsPeriodIdInitiationvaluesGetResponse3,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrolltaxreturnsGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrolltaxreturnsGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrolltaxreturnsGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrolltaxreturnsGetResponse3,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrolltaxreturnsInitiatePostResponse,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrolltaxreturnsInitiatePostResponse1,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrolltaxreturnsInitiatePostResponse2,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrolltaxreturnsInitiatePostResponse3,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrolltaxreturnsPayrolltaxreturnIdSepafileGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrolltaxreturnsPayrolltaxreturnIdSepafileGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPayrolltaxreturnsPayrolltaxreturnIdSepafileGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPeriodreadyforpayrollPostResponse,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPeriodreadyforpayrollPostResponse1,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPeriodreadyforpayrollPostResponse2,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdPeriodreadyforpayrollPostResponse3,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdUpapensiondeclarationsGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdUpapensiondeclarationsGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdUpapensiondeclarationsGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdUpapensiondeclarationsGetResponse3,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdUpapensiondeclarationsInitiatePostResponse,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdUpapensiondeclarationsInitiatePostResponse1,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdUpapensiondeclarationsInitiatePostResponse2,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdUpapensiondeclarationsInitiatePostResponse3,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdYearendstatementsGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdYearendstatementsGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdYearendstatementsGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdYearendstatementsGetResponse3,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdYearendstatementsYearGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdYearendstatementsYearGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollAdministrationIdYearendstatementsYearGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollrunsNotesNoteIdDeleteResponse,
    ProvidersEmployersPayrolladministrationsPayrollrunsNotesNoteIdDeleteResponse1,
    ProvidersEmployersPayrolladministrationsPayrollrunsNotesNoteIdDeleteResponse2,
    ProvidersEmployersPayrolladministrationsPayrollrunsNotesNoteIdDeleteResponse3,
    ProvidersEmployersPayrolladministrationsPayrollrunsNotesNoteIdGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollrunsNotesNoteIdGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollrunsNotesNoteIdGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollrunsNotesNoteIdGetResponse3,
    ProvidersEmployersPayrolladministrationsPayrollrunsNotesNoteIdPutResponse,
    ProvidersEmployersPayrolladministrationsPayrollrunsNotesNoteIdPutResponse1,
    ProvidersEmployersPayrolladministrationsPayrollrunsNotesNoteIdPutResponse2,
    ProvidersEmployersPayrolladministrationsPayrollrunsNotesNoteIdPutResponse3,
    ProvidersEmployersPayrolladministrationsPayrollrunsNotesNoteIdPutResponse4,
    ProvidersEmployersPayrolladministrationsPayrollrunsPatchRequest,
    ProvidersEmployersPayrolladministrationsPayrollrunsPatchResponse,
    ProvidersEmployersPayrolladministrationsPayrollrunsPatchResponse1,
    ProvidersEmployersPayrolladministrationsPayrollrunsPatchResponse2,
    ProvidersEmployersPayrolladministrationsPayrollrunsPatchResponse3,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdBalanceSheetGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdBalanceSheetGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdBalanceSheetGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdBalanceSheetGetResponse3,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdDefaultsetGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdDefaultsetGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdDefaultsetGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdErrorsandwarningsGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdErrorsandwarningsGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdErrorsandwarningsGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdGetResponse3,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdJournalentriesperdistributionunitoverviewsGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdJournalentriesperdistributionunitoverviewsGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdJournalentriesperdistributionunitoverviewsGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdNotesGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdNotesGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdNotesGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdNotesGetResponse3,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdNotesPostResponse,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdNotesPostResponse1,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdNotesPostResponse2,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdNotesPostResponse3,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdPaymentoverviewsGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdPaymentoverviewsGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdPaymentoverviewsGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdPayrollcontrolregisterGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdPayrollcontrolregisterGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdPayrollcontrolregisterGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdPayslipsGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdPayslipsGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdPayslipsGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdResultsGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdResultsGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdResultsGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdResultsGetResponse3,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdRunoverviewsGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdRunoverviewsGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdRunoverviewsGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdSepafilesGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdSepafilesGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdSepafilesGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdSepafilesGetResponse3,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdTotalsepafileGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdTotalsepafileGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdTotalsepafileGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdUndoPostResponse,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdUndoPostResponse1,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdUndoPostResponse2,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdWagesheetsGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdWagesheetsGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollrunsPayrollrunIdWagesheetsGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrollrunsSepafilesSepafileIdGetResponse,
    ProvidersEmployersPayrolladministrationsPayrollrunsSepafilesSepafileIdGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrollrunsSepafilesSepafileIdGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrolltaxreturnsMessageReferencePatchRequest,
    ProvidersEmployersPayrolladministrationsPayrolltaxreturnsMessageReferencePatchResponse,
    ProvidersEmployersPayrolladministrationsPayrolltaxreturnsMessageReferencePatchResponse1,
    ProvidersEmployersPayrolladministrationsPayrolltaxreturnsMessageReferencePatchResponse2,
    ProvidersEmployersPayrolladministrationsPayrolltaxreturnsMessageReferencePatchResponse3,
    ProvidersEmployersPayrolladministrationsPayrolltaxreturnsMessageReferenceSendresponsemessagebymessagereferencePostRequest,
    ProvidersEmployersPayrolladministrationsPayrolltaxreturnsMessageReferenceSendresponsemessagebymessagereferencePostResponse,
    ProvidersEmployersPayrolladministrationsPayrolltaxreturnsMessageReferenceSendresponsemessagebymessagereferencePostResponse1,
    ProvidersEmployersPayrolladministrationsPayrolltaxreturnsMessageReferenceSendresponsemessagebymessagereferencePostResponse2,
    ProvidersEmployersPayrolladministrationsPayrolltaxreturnsMessageReferenceSendresponsemessagebymessagereferencePostResponse3,
    ProvidersEmployersPayrolladministrationsPayrolltaxreturnsPatchRequest,
    ProvidersEmployersPayrolladministrationsPayrolltaxreturnsPatchResponse,
    ProvidersEmployersPayrolladministrationsPayrolltaxreturnsPatchResponse1,
    ProvidersEmployersPayrolladministrationsPayrolltaxreturnsPatchResponse2,
    ProvidersEmployersPayrolladministrationsPayrolltaxreturnsPatchResponse3,
    ProvidersEmployersPayrolladministrationsPayrolltaxreturnsPayrolltaxreturnIdGetResponse,
    ProvidersEmployersPayrolladministrationsPayrolltaxreturnsPayrolltaxreturnIdGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrolltaxreturnsPayrolltaxreturnIdGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrolltaxreturnsPayrolltaxreturnIdGetResponse3,
    ProvidersEmployersPayrolladministrationsPayrolltaxreturnsPayrolltaxreturnIdIdealGetResponse,
    ProvidersEmployersPayrolladministrationsPayrolltaxreturnsPayrolltaxreturnIdIdealGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrolltaxreturnsPayrolltaxreturnIdIdealGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrolltaxreturnsPayrolltaxreturnIdIdealGetResponse3,
    ProvidersEmployersPayrolladministrationsPayrolltaxreturnsPayrolltaxreturnIdIdealPaymentStatusGetResponse,
    ProvidersEmployersPayrolladministrationsPayrolltaxreturnsPayrolltaxreturnIdIdealPaymentStatusGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrolltaxreturnsPayrolltaxreturnIdIdealPaymentStatusGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrolltaxreturnsPayrolltaxreturnIdIdealPaymentStatusGetResponse3,
    ProvidersEmployersPayrolladministrationsPayrolltaxreturnsPayrolltaxreturnIdMessageGetResponse,
    ProvidersEmployersPayrolladministrationsPayrolltaxreturnsPayrolltaxreturnIdMessageGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrolltaxreturnsPayrolltaxreturnIdMessageGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrolltaxreturnsPayrolltaxreturnIdOverviewGetResponse,
    ProvidersEmployersPayrolladministrationsPayrolltaxreturnsPayrolltaxreturnIdOverviewGetResponse1,
    ProvidersEmployersPayrolladministrationsPayrolltaxreturnsPayrolltaxreturnIdOverviewGetResponse2,
    ProvidersEmployersPayrolladministrationsPayrolltaxreturnsPayrolltaxreturnIdSendresponsemessagePostRequest,
    ProvidersEmployersPayrolladministrationsPayrolltaxreturnsPayrolltaxreturnIdSendresponsemessagePostResponse,
    ProvidersEmployersPayrolladministrationsPayrolltaxreturnsPayrolltaxreturnIdSendresponsemessagePostResponse1,
    ProvidersEmployersPayrolladministrationsPayrolltaxreturnsPayrolltaxreturnIdSendresponsemessagePostResponse2,
    ProvidersEmployersPayrolladministrationsUpapensiondeclarationsUpaPensionDeclarationIdGetResponse,
    ProvidersEmployersPayrolladministrationsUpapensiondeclarationsUpaPensionDeclarationIdGetResponse1,
    ProvidersEmployersPayrolladministrationsUpapensiondeclarationsUpaPensionDeclarationIdGetResponse2,
    ProvidersEmployersPayrolladministrationsUpapensiondeclarationsUpaPensionDeclarationIdGetResponse3,
    ProvidersEmployersPayrolladministrationsUpapensiondeclarationsUpaPensionDeclarationIdMessageGetResponse,
    ProvidersEmployersPayrolladministrationsUpapensiondeclarationsUpaPensionDeclarationIdMessageGetResponse1,
    ProvidersEmployersPayrolladministrationsUpapensiondeclarationsUpaPensionDeclarationIdMessageGetResponse2,
    ProvidersEmployersPayrolladministrationsUpapensiondeclarationsUpaPensionDeclarationIdPatchRequest,
    ProvidersEmployersPayrolladministrationsUpapensiondeclarationsUpaPensionDeclarationIdPatchResponse,
    ProvidersEmployersPayrolladministrationsUpapensiondeclarationsUpaPensionDeclarationIdPatchResponse1,
    ProvidersEmployersPayrolladministrationsUpapensiondeclarationsUpaPensionDeclarationIdPatchResponse2,
    ProvidersEmployersPayrolladministrationsUpapensiondeclarationsUpaPensionDeclarationIdPatchResponse3,
    ProvidersEmployersUsersDownloadrequestsDownloadRequestIdDeleteResponse,
    ProvidersEmployersUsersDownloadrequestsDownloadRequestIdDeleteResponse1,
    ProvidersEmployersUsersDownloadrequestsDownloadRequestIdDeleteResponse2,
    ProvidersEmployersUsersDownloadrequestsDownloadRequestIdDeleteResponse3,
    ProvidersEmployersUsersDownloadrequestsDownloadRequestIdFileGetResponse,
    ProvidersEmployersUsersDownloadrequestsDownloadRequestIdFileGetResponse1,
    ProvidersEmployersUsersDownloadrequestsDownloadRequestIdFileGetResponse2,
    ProvidersEmployersUsersDownloadrequestsDownloadRequestIdGetResponse,
    ProvidersEmployersUsersDownloadrequestsDownloadRequestIdGetResponse1,
    ProvidersEmployersUsersDownloadrequestsDownloadRequestIdGetResponse2,
    ProvidersEmployersUsersDownloadrequestsDownloadRequestIdGetResponse3,
    ProvidersEmployersUsersDownloadrequestsGetResponse,
    ProvidersEmployersUsersDownloadrequestsGetResponse1,
    ProvidersEmployersUsersDownloadrequestsGetResponse2,
    ProvidersEmployersUsersDownloadrequestsGetResponse3,
    ProvidersEmployersUsersDownloadrequestsPostResponse,
    ProvidersEmployersUsersDownloadrequestsPostResponse1,
    ProvidersEmployersUsersDownloadrequestsPostResponse2,
    ProvidersEmployersUsersDownloadrequestsPostResponse3,
    ProvidersEmployersUsersEmployerUserIdConfiguredexternaltenantGetResponse,
    ProvidersEmployersUsersEmployerUserIdConfiguredexternaltenantGetResponse1,
    ProvidersEmployersUsersEmployerUserIdConfiguredexternaltenantGetResponse2,
    ProvidersEmployersUsersEmployerUserIdConfiguredexternaltenantGetResponse3,
    ProvidersEmployersUsersEmployerUserIdConfiguredexternaltenantPatchResponse,
    ProvidersEmployersUsersEmployerUserIdConfiguredexternaltenantPatchResponse1,
    ProvidersEmployersUsersEmployerUserIdConfiguredexternaltenantPatchResponse2,
    ProvidersEmployersUsersEmployerUserIdConfiguredexternaltenantPatchResponse3,
    ProvidersEmployersUsersUserIdDeleteResponse,
    ProvidersEmployersUsersUserIdDeleteResponse1,
    ProvidersEmployersUsersUserIdDeleteResponse2,
    ProvidersEmployersUsersUserIdDeleteResponse3,
    ProvidersEmployersUsersUserIdEmployersGetResponse,
    ProvidersEmployersUsersUserIdEmployersGetResponse1,
    ProvidersEmployersUsersUserIdEmployersGetResponse2,
    ProvidersEmployersUsersUserIdEmployersGetResponse3,
    ProvidersEmployersUsersUserIdGetResponse,
    ProvidersEmployersUsersUserIdGetResponse1,
    ProvidersEmployersUsersUserIdGetResponse2,
    ProvidersEmployersUsersUserIdGetResponse3,
    ProvidersEmployersUsersUserIdIntegrationsApplicationIdDeleteResponse,
    ProvidersEmployersUsersUserIdIntegrationsApplicationIdDeleteResponse1,
    ProvidersEmployersUsersUserIdIntegrationsApplicationIdDeleteResponse2,
    ProvidersEmployersUsersUserIdIntegrationsApplicationIdDeleteResponse3,
    ProvidersEmployersUsersUserIdIntegrationsApplicationIdLogoGetResponse,
    ProvidersEmployersUsersUserIdIntegrationsApplicationIdLogoGetResponse1,
    ProvidersEmployersUsersUserIdIntegrationsApplicationIdPutResponse,
    ProvidersEmployersUsersUserIdIntegrationsApplicationIdPutResponse1,
    ProvidersEmployersUsersUserIdIntegrationsApplicationIdPutResponse2,
    ProvidersEmployersUsersUserIdIntegrationsApplicationIdPutResponse3,
    ProvidersEmployersUsersUserIdIntegrationsGetResponse,
    ProvidersEmployersUsersUserIdIntegrationsGetResponse1,
    ProvidersEmployersUsersUserIdIntegrationsGetResponse2,
    ProvidersEmployersUsersUserIdIntegrationsGetResponse3,
    ProvidersEmployersUsersUserIdNotificationsettingsGetResponse,
    ProvidersEmployersUsersUserIdNotificationsettingsGetResponse1,
    ProvidersEmployersUsersUserIdNotificationsettingsGetResponse2,
    ProvidersEmployersUsersUserIdNotificationsettingsGetResponse3,
    ProvidersEmployersUsersUserIdNotificationsettingsPatchResponse,
    ProvidersEmployersUsersUserIdNotificationsettingsPatchResponse1,
    ProvidersEmployersUsersUserIdNotificationsettingsPatchResponse2,
    ProvidersEmployersUsersUserIdNotificationsettingsPatchResponse3,
    ProvidersEmployersUsersUserIdPatchResponse,
    ProvidersEmployersUsersUserIdPatchResponse1,
    ProvidersEmployersUsersUserIdPatchResponse2,
    ProvidersEmployersUsersUserIdPatchResponse3,
    ProvidersEmployersUsersUserIdPutResponse,
    ProvidersEmployersUsersUserIdPutResponse1,
    ProvidersEmployersUsersUserIdPutResponse2,
    ProvidersEmployersUsersUserIdPutResponse3,
    ProvidersEmployersUsersUserIdPutResponse4,
    ProvidersEmployersWorkflowsWorkflowIdGetResponse,
    ProvidersEmployersWorkflowsWorkflowIdGetResponse1,
    ProvidersEmployersWorkflowsWorkflowIdGetResponse2,
    ProvidersEmployersWorkflowsWorkflowIdGetResponse3,
    ProvidersEmployersWorkflowsWorkflowIdPutResponse,
    ProvidersEmployersWorkflowsWorkflowIdPutResponse1,
    ProvidersEmployersWorkflowsWorkflowIdPutResponse2,
    ProvidersEmployersWorkflowsWorkflowIdPutResponse3,
    ProvidersEmployersWorkflowsWorkflowIdTransitionPostResponse,
    ProvidersEmployersWorkflowsWorkflowIdTransitionPostResponse1,
    ProvidersEmployersWorkflowsWorkflowIdTransitionPostResponse2,
    ProvidersEmployersWorkflowsWorkflowIdTransitionPostResponse3,
    ProvidersEmployersWorkflowtriggermappingsWorkflowTriggerMappingIdDeleteResponse,
    ProvidersEmployersWorkflowtriggermappingsWorkflowTriggerMappingIdDeleteResponse1,
    ProvidersEmployersWorkflowtriggermappingsWorkflowTriggerMappingIdDeleteResponse2,
    ProvidersEmployersWorkflowtriggermappingsWorkflowTriggerMappingIdDeleteResponse3,
    ProvidersEmployersWorkflowtriggermappingsWorkflowTriggerMappingIdGetResponse,
    ProvidersEmployersWorkflowtriggermappingsWorkflowTriggerMappingIdGetResponse1,
    ProvidersEmployersWorkflowtriggermappingsWorkflowTriggerMappingIdGetResponse2,
    ProvidersEmployersWorkflowtriggermappingsWorkflowTriggerMappingIdGetResponse3,
    ProvidersEmployersWorkflowtriggermappingsWorkflowTriggerMappingIdPutResponse,
    ProvidersEmployersWorkflowtriggermappingsWorkflowTriggerMappingIdPutResponse1,
    ProvidersEmployersWorkflowtriggermappingsWorkflowTriggerMappingIdPutResponse2,
    ProvidersEmployersWorkflowtriggermappingsWorkflowTriggerMappingIdPutResponse3,
    ProvidersEmployersWorkflowtriggermappingsWorkflowTriggerMappingIdPutResponse4,
    ProvidersGetResponse,
    ProvidersGetResponse1,
    ProvidersGetResponse2,
    ProvidersGetResponse3,
    ProvidersLeavePoliciesLeavePolicyIdAgebasedleaveGetResponse,
    ProvidersLeavePoliciesLeavePolicyIdAgebasedleaveGetResponse1,
    ProvidersLeavePoliciesLeavePolicyIdAgebasedleaveGetResponse2,
    ProvidersLeavePoliciesLeavePolicyIdAgebasedleaveGetResponse3,
    ProvidersLeavePoliciesLeavePolicyIdGetResponse,
    ProvidersLeavePoliciesLeavePolicyIdGetResponse1,
    ProvidersLeavePoliciesLeavePolicyIdGetResponse2,
    ProvidersLeavePoliciesLeavePolicyIdGetResponse3,
    ProvidersLeavePoliciesLeavePolicyIdWagebasedleaveGetResponse,
    ProvidersLeavePoliciesLeavePolicyIdWagebasedleaveGetResponse1,
    ProvidersLeavePoliciesLeavePolicyIdWagebasedleaveGetResponse2,
    ProvidersLeavePoliciesLeavePolicyIdWagebasedleaveGetResponse3,
    ProvidersLeavePoliciesLeavePolicyIdYearsofservicebasedleaveGetResponse,
    ProvidersLeavePoliciesLeavePolicyIdYearsofservicebasedleaveGetResponse1,
    ProvidersLeavePoliciesLeavePolicyIdYearsofservicebasedleaveGetResponse2,
    ProvidersLeavePoliciesLeavePolicyIdYearsofservicebasedleaveGetResponse3,
    ProvidersNotificationsetsNotificationSetIdGetResponse,
    ProvidersNotificationsetsNotificationSetIdGetResponse1,
    ProvidersNotificationsetsNotificationSetIdGetResponse2,
    ProvidersNotificationsetsNotificationSetIdGetResponse3,
    ProvidersProviderIdApplicationsetsGetResponse,
    ProvidersProviderIdApplicationsetsGetResponse1,
    ProvidersProviderIdApplicationsetsGetResponse2,
    ProvidersProviderIdApplicationsetsGetResponse3,
    ProvidersProviderIdApplicationsetsPostResponse,
    ProvidersProviderIdApplicationsetsPostResponse1,
    ProvidersProviderIdApplicationsetsPostResponse2,
    ProvidersProviderIdApplicationsetsPostResponse3,
    ProvidersProviderIdAuthorizationsetsGetResponse,
    ProvidersProviderIdAuthorizationsetsGetResponse1,
    ProvidersProviderIdAuthorizationsetsGetResponse2,
    ProvidersProviderIdAuthorizationsetsGetResponse3,
    ProvidersProviderIdAuthorizationsGetResponse,
    ProvidersProviderIdAuthorizationsGetResponse1,
    ProvidersProviderIdAuthorizationsGetResponse2,
    ProvidersProviderIdAuthorizationsGetResponse3,
    ProvidersProviderIdBillableitemsGetResponse,
    ProvidersProviderIdBillableitemsGetResponse1,
    ProvidersProviderIdBillableitemsGetResponse2,
    ProvidersProviderIdBillableitemsGetResponse3,
    ProvidersProviderIdEmailidentitiesGetResponse,
    ProvidersProviderIdEmailidentitiesGetResponse1,
    ProvidersProviderIdEmailidentitiesGetResponse2,
    ProvidersProviderIdEmailidentitiesGetResponse3,
    ProvidersProviderIdEmailidentitiesPostResponse,
    ProvidersProviderIdEmailidentitiesPostResponse1,
    ProvidersProviderIdEmailidentitiesPostResponse2,
    ProvidersProviderIdEmailidentitiesPostResponse3,
    ProvidersProviderIdEmailidentitiesVerifyPostResponse,
    ProvidersProviderIdEmailidentitiesVerifyPostResponse1,
    ProvidersProviderIdEmailidentitiesVerifyPostResponse2,
    ProvidersProviderIdEmailidentitiesVerifyPostResponse3,
    ProvidersProviderIdEmailtemplatesEmailTemplateIdGetResponse,
    ProvidersProviderIdEmailtemplatesEmailTemplateIdGetResponse1,
    ProvidersProviderIdEmailtemplatesEmailTemplateIdGetResponse2,
    ProvidersProviderIdEmailtemplatesEmailTemplateIdGetResponse3,
    ProvidersProviderIdEmailtemplatesGetResponse,
    ProvidersProviderIdEmailtemplatesGetResponse1,
    ProvidersProviderIdEmailtemplatesGetResponse2,
    ProvidersProviderIdEmailtemplatesGetResponse3,
    ProvidersProviderIdEmployersPostResponse,
    ProvidersProviderIdEmployersPostResponse1,
    ProvidersProviderIdEmployersPostResponse2,
    ProvidersProviderIdEmployersPostResponse3,
    ProvidersProviderIdExternaltenantsGetResponse,
    ProvidersProviderIdExternaltenantsGetResponse1,
    ProvidersProviderIdExternaltenantsGetResponse2,
    ProvidersProviderIdExternaltenantsGetResponse3,
    ProvidersProviderIdLeavePoliciesGetResponse,
    ProvidersProviderIdLeavePoliciesGetResponse1,
    ProvidersProviderIdLeavePoliciesGetResponse2,
    ProvidersProviderIdLeavePoliciesGetResponse3,
    ProvidersProviderIdLogoGetResponse,
    ProvidersProviderIdLogoGetResponse1,
    ProvidersProviderIdLogoVersionGetResponse,
    ProvidersProviderIdLogoVersionGetResponse1,
    ProvidersProviderIdNotificationsetsGetResponse,
    ProvidersProviderIdNotificationsetsGetResponse1,
    ProvidersProviderIdNotificationsetsGetResponse2,
    ProvidersProviderIdNotificationsetsGetResponse3,
    ProvidersProviderIdPayrollprocessstatusGetResponse,
    ProvidersProviderIdPayrollprocessstatusGetResponse1,
    ProvidersProviderIdPayrollprocessstatusGetResponse2,
    ProvidersProviderIdPayrollprocessstatusGetResponse3,
    ProvidersUsersProviderUserIdConfiguredexternaltenantGetResponse,
    ProvidersUsersProviderUserIdConfiguredexternaltenantGetResponse1,
    ProvidersUsersProviderUserIdConfiguredexternaltenantGetResponse2,
    ProvidersUsersProviderUserIdConfiguredexternaltenantGetResponse3,
    ProvidersUsersProviderUserIdConfiguredexternaltenantPatchResponse,
    ProvidersUsersProviderUserIdConfiguredexternaltenantPatchResponse1,
    ProvidersUsersProviderUserIdConfiguredexternaltenantPatchResponse2,
    ProvidersUsersProviderUserIdConfiguredexternaltenantPatchResponse3,
    QwoaterEmployersGetResponse,
    QwoaterEmployersGetResponse1,
    QwoaterEmployersGetResponse2,
    QwoaterEmployersGetResponse3,
    RdwservicesAdditionaltaxliabilityGetResponse,
    RdwservicesAdditionaltaxliabilityGetResponse1,
    RdwservicesAdditionaltaxliabilityGetResponse2,
    RdwservicesAdditionaltaxliabilityGetResponse3,
    ReportType,
    ReportType2,
    UserFiltersettingsEmployerIdGetResponse,
    UserFiltersettingsEmployerIdGetResponse1,
    UserFiltersettingsEmployerIdGetResponse2,
    UserFiltersettingsEmployerIdGetResponse3,
    UserFiltersettingsEmployerIdPutResponse,
    UserFiltersettingsEmployerIdPutResponse1,
    UserFiltersettingsEmployerIdPutResponse2,
    UserFiltersettingsEmployerIdPutResponse3,
    UserGetResponse,
    UserGetResponse1,
    UserGetResponse2,
    UserGetResponse3,
    UserPhotoDeleteResponse,
    UserPhotoDeleteResponse1,
    UserPhotoDeleteResponse2,
    UserPhotoDeleteResponse3,
    UserPhotoGetResponse,
    UserPhotoGetResponse1,
    UserPhotoPostResponse,
    UserPhotoPostResponse1,
    UserPutResponse,
    UserPutResponse1,
    UserPutResponse2,
    UserPutResponse3,
    UsersApplicationsetsApplicationSetIdDeleteResponse,
    UsersApplicationsetsApplicationSetIdDeleteResponse1,
    UsersApplicationsetsApplicationSetIdDeleteResponse2,
    UsersApplicationsetsApplicationSetIdDeleteResponse3,
    UsersApplicationsetsApplicationSetIdPutResponse,
    UsersApplicationsetsApplicationSetIdPutResponse1,
    UsersApplicationsetsApplicationSetIdPutResponse2,
    UsersApplicationsetsApplicationSetIdPutResponse3,
    UsersApplicationsetsApplicationSetIdPutResponse4,
    UsersInitiatedworkflowsGetResponse,
    UsersInitiatedworkflowsGetResponse1,
    UsersInitiatedworkflowsGetResponse2,
    UsersInitiatedworkflowsGetResponse3,
    UsersIntegrationsGetResponse,
    UsersIntegrationsGetResponse1,
    UsersIntegrationsGetResponse2,
    UsersIntegrationsGetResponse3,
    UsersUserIdApplicationsetsGetResponse,
    UsersUserIdApplicationsetsGetResponse1,
    UsersUserIdApplicationsetsGetResponse2,
    UsersUserIdApplicationsetsGetResponse3,
    UsersUserIdApplicationsetsPostResponse,
    UsersUserIdApplicationsetsPostResponse1,
    UsersUserIdApplicationsetsPostResponse2,
    UsersUserIdApplicationsetsPostResponse3,
    UsersUserIdYourcampusurlGetResponse,
    UsersUserIdYourcampusurlGetResponse1,
    UsersUserIdYourcampusurlGetResponse2,
    UsersUserIdYourcampusurlGetResponse3,
    WageprojectionCladataCollectiveLaborAgreementIdGetResponse,
    WageprojectionCladataCollectiveLaborAgreementIdGetResponse1,
    WageprojectionCladataCollectiveLaborAgreementIdGetResponse2,
    WageprojectionCladataCollectiveLaborAgreementIdGetResponse3,
    WageprojectionCollectivelaboragreementsGetResponse,
    WageprojectionCollectivelaboragreementsGetResponse1,
    WageprojectionCollectivelaboragreementsGetResponse2,
    WageprojectionCollectivelaboragreementsGetResponse3,
)

app = MCPProxy(
    description='<span style="color:green">**Is this your first time here? Please check out our [introduction to Loket (API)](./Introduction)**</span>\n\n**The initial loading time of this developer portal may be very long due to the large number of endpoints designs being rendered when loading the page.\nWe are looking into an alternative solution but for now please bear in mind.**\n\n\n# General\nThe Loket.nl API is a RESTful API that exposes the data and features of the Loket.nl platform.\nThe API accepts and returns JSON and can only be accessed by registered users.\nThis documentation describes version 2 of the API.\n\n\nAre you looking to partner up and start building an integration based on the Loket RESTful API? Please check out the steps for partners on our [website](https://www.loket.nl/koppelingen/koppelen-met-loket/) .\n\nHave you received your client and user credentials from us? Check out the following Postman collection to help you start making your first API calls on our acceptance environment. We would recommend to install the Postman desktop app.\n\n[![Run in Postman](https://run.pstmn.io/button.svg)](https://god.gw.postman.com/run-collection/19604713-42728000-2df3-4ff0-908e-dc6ab410990c?action=collection%2Ffork&collection-url=entityId%3D19604713-42728000-2df3-4ff0-908e-dc6ab410990c%26entityType%3Dcollection%26workspaceId%3Ddde2c409-9fb2-4f40-9981-f937f73750ea#?env%5BLoket.nl%20Test%20Environment%5D=W3sia2V5IjoiQXV0aGVudGljYXRpb25TZXJ2ZXJVcmwiLCJ2YWx1ZSI6Imh0dHBzOi8vb2F1dGgubG9rZXQtYWNjLm5sLyIsImVuYWJsZWQiOnRydWUsInR5cGUiOiJ0ZXh0Iiwic2Vzc2lvblZhbHVlIjoiaHR0cHM6Ly9vYXV0aC5sb2tldC1hY2MubmwvIiwic2Vzc2lvbkluZGV4IjowfSx7ImtleSI6Ikxva2V0QXBpVXJsIiwidmFsdWUiOiJodHRwczovL2FwaS5sb2tldC1hY2MubmwvIiwiZW5hYmxlZCI6dHJ1ZSwidHlwZSI6InRleHQiLCJzZXNzaW9uVmFsdWUiOiJodHRwczovL2FwaS5sb2tldC1hY2MubmwvIiwic2Vzc2lvbkluZGV4IjoxfSx7ImtleSI6IkNsaWVudF9JZCIsInZhbHVlIjoiIiwiZW5hYmxlZCI6dHJ1ZSwidHlwZSI6InRleHQiLCJzZXNzaW9uVmFsdWUiOiIiLCJzZXNzaW9uSW5kZXgiOjJ9LHsia2V5IjoiQ2xpZW50X1NlY3JldCIsInZhbHVlIjoiIiwiZW5hYmxlZCI6dHJ1ZSwidHlwZSI6InRleHQiLCJzZXNzaW9uVmFsdWUiOiIiLCJzZXNzaW9uSW5kZXgiOjN9LHsia2V5IjoiUmVkaXJlY3RfVXJpIiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlLCJ0eXBlIjoidGV4dCIsInNlc3Npb25WYWx1ZSI6IiIsInNlc3Npb25JbmRleCI6NH0seyJrZXkiOiJyZWZyZXNoX3Rva2VuIiwidmFsdWUiOiIiLCJlbmFibGVkIjp0cnVlLCJ0eXBlIjoidGV4dCIsInNlc3Npb25WYWx1ZSI6IiIsInNlc3Npb25JbmRleCI6NX0seyJrZXkiOiJ0b2tlbiIsInZhbHVlIjoiIiwiZW5hYmxlZCI6dHJ1ZSwidHlwZSI6InRleHQiLCJzZXNzaW9uVmFsdWUiOiIiLCJzZXNzaW9uSW5kZXgiOjZ9XQ==)\n\n\nDo you want to contact us with any further questions or remarks regarding the Loket RESTful API?  Please send an email to api@loket.nl, and we will get back to you.\n\n\n## Environments\nThe Loket.nl API has two different environments.\nThe first environment is the "acceptance" environment which is used during development and returns test data.\nThe second environment is the production environment which is to be used exclusively by approved applications.\nBoth environments have their own URLs.\n* The acceptance environment can be accessed at https://api.loket-acc.nl/v2/ \n* The production environment can be accessed at https://api.loket.nl/v2/\n\n## OpenAPI documentation\nThe endpoints are defined using the [OpenAPI 3.0 specification](https://github.com/OAI/OpenAPI-Specification),\nan industry-wide recognized standard for describing REST API\'s.\n\n__Please note:__ the endpoint documentation in this portal is not designed to be fully compatible with any automatic code generation tools.\n\n## Change policy\nOver the course of time the API, and policies regarding the API can and will change. These changes are subject to the following guidelines.\n\n\nThe following states hold true for the change policy for this API.\n\n* Loket.nl may sometimes introduce changes to the API and policies without advance notice. \n* Loket.nl will try to inform users of any (breaking) change in advance.\n* Loket.nl will not be liable to you or any third party for such modifications or any adverse effects resulting from such modifications.\n* Loket.nl will try to avoid breaking changes as much as possible.\n\n## Notification periods\nIn regard to changes Loket.nl will strive to adhere to the following notification periods per type of change.\nDue to our versioning strategy at resource level this API has the possibility to run multiple versions of the same resource at one time.\nThis allows for a window in which both the old and new version are available.\nAllowing for a gradual move to the new version. \n\n| Type of change | Notification period | Support period old version |\n|------------------|---------------|---------------|\n| Non breaking change | 2 weeks | no new version |\n| Breaking change | 2 weeks | 6 months |\n| Critical | Due to the nature of these changes we might not be able to follow the normal procedure for change managment | depends on the severity of the issue | \n\n\nWe define a __non breaking__ change as follows. Any change to the API that does not cause failures in the applications that consume that API.\n  * Introducing a new optional field to an existing resource\n  * Introducing a new endpoint\n  * Introducing a new operation (GET/PUT/POST/PATCH/DELETE)\n  * Introducing a new optional parameter to an endpoint\n  * Introducing a new version for a resource\n\nWe define a __breaking change__ as follows. any change to an API that could potentially cause failures in the applications that consume that API.\n  * Changing an existing JSON element (name, datatype, pattern, min/max length etc)\n  * Removing a JSON element, endpoint, operation or parameter\n  * Introducing a required JSON element\n  * Introducing a required parameter to an endpoint\n  * Passing the `obsoleteDate` of a version for a resource\n\n## Versioning\nThe Loket API uses two types of versioning. API versioning and resource versioning. \n\n\n__API versioning__\n\nAPI versioning is done via the path where after the domain URL (api.loket.nl) the path starts with the API version. The current version of the API is V2.\nThe API version is expected to change rarely as resource versioning is available to tackle most issues that need versioning.\n\n\n__Resource versioning__\n\nEvery __JSON__ resource in the API is versioned via the Accept header.\nAllowing users of the API to influence what version is returned by setting the __mandatory__ accept header.\nThe Accept header of request should have a value like `application/json;version=2018-01-01`. \nHere, the second part of the header is used to refer to a specific version of the resource (2018-01-01).\nWhen calling the API it is possible to supply other dates rather than the exact resources version(s). \nThe businesslogic will select the version that is ON or BEFORE the given date.\n\n\n__For example:__ let\'s say there are two versions of a resource.\nThese are 2018-01-01 and 2018-09-01. When calling the API you supply `application/json;version=2018-08-01`,\nin that case the API will use the version 2018-01-01 as its the nearest version in the past.  \n\n\nA response returns what `resourceVersion` was used and the \'obsoleteDate\' of that version (in most cases this is NULL).\nThe `obsoleteDate` indicates when the resources version will no longer be available via the API.\nWith the introduction of a new version of a resource the `obsoleteDate` for the old version will be set to 6 months after the introduction of the new resource. \nAllowing consumers of the resource 6 months to incorporate the change. Failure to do so will likely lead to failure in the implementation.\n\nIn this developer portal you can find the service contracts for each, active, version of a resource.\nIf, only if, there are multiple versions of a resource you can select the corresponding schema at that resource.\n\n## Changelog\nThe changelog for this API can be found [here](/Changelog).\n\nWe strongly advise every user ofthe Loket REST API the subscribe to the email feed. Please check out the link on the changelog page.\n\n\n## Legal notices\nYour use and access to the API is expressly conditioned on your compliance with the policies and restrictions related to the API. \nIf Loket.nl believes that you have or attempted to violate any term, condition, or the spirit of these policies or agreements, your right to access and use the API may be temporarily or permanently revoked.  \n\n# Authentication\nAuthorization in the Loket API is based on the industry-standard OAuth 2.0 protocol. For general information on OAuth 2.0 we kindly refer to the publicly-available documentation, https://oauth.net/2/ \n\n\nAn authorized user is required to call the Loket API.\n\n__Note:__ This is an SSL-only API.\n\n__Note:__ Only TLS 1.2 is supported.\n\n| Environment          | TokenUrl                             | \n| -------------------- | --------------------------------     | \n| Acceptance           | https://oauth.loket-acc.nl/token     |\n| Production           | https://oauth.loket.nl/token         | \n\nThe following OAuth 2.0 flows are supported\n\n* Authorization Code flow (standard)\n* Refresh Token flow (extension on the Authorization Code Flow)\n* SSO flow (single sign-on)\n* Password flow\n\n## Authorization code flow\nFor most clients only the authorization_code (and thus refresh_token) will be supported. \nPassword grant type is not available for an external client.\n\nPlease click the link below to see documentation on implementing the authorization code flow by external clients.\n\n__[Documentation on implementing the OAuth 2.0 authorization code flow](./OauthCode)__\n\n## Refresh token flow\nAfter the authorization code flow yields a refresh token the refresh_token grant can be used to obtain an access/bearer token.\nThe expire time of the access/bearer is also returned in the response please take this into account.\nWith the refresh token flow the two factor step will be skipped.\n\n_Refresh token request example:_\n```\nPOST /token \ngrant_type=refresh_token&refresh_token={RefreshToken123}&client_Id={Client123}&client_secret={Secret123}\n```\n\n_Refresh token response example:_\n```json\n{\n  "access_token": "JESJDhMBy0NPTM9SiXmYAzW45clOiQ5wSyDq3VWluguGNoKym4WPSiJoTDx67TQ",\n  "token_type": "bearer",\n  "expires_in": 3599,\n  "refresh_token": "nGJtF6j6SeQbHAg",\n  "two_factor_state": "None"\n}\n```\n## SSO flow\nThe SSO (single sign-on) flow is based on OAuth 2.0 and requires the authorization flow to be completed.\n\n__For more information see:__ [Documentation on OAuth 2.0 SSO flow (for allowed clients)](./OauthSSO)\n\n\n__Please note:__ Among other things, it is possible to set up an SSO flow with both Loket en Werknemerloket.\n\n\n## Password flow\nThe password flow is typically NOT enabled for external clients. Only by exception will the password flow be enabled for security (and practical) reasons.\n\n_Password token request examples:_\n\n```\nPOST /token \ngrant_type=password&username={UserName123}&password={Password123}&client_Id={Client123}&client_secret={Secret123}\n```\nWhether client_secret is required is dependent on the configuration of the client.\n\n# Authorization\nIn this section we explain how the API authorization service determines if a request is authorized or not.\n\n## The authorization entities\n\n| Entity | Description |\n| ----|----|\n| Client | Loket.nl used the client as an additional authorisation entity. By linking clients to activities clients can only perform those activities they are linked to. |\n| User  | Is linked to a client (by performing the authorization code flow) and to a set of rechten (configuration in loket.nl)|\n| Module (product) | Enables certain functionality for the provider/employer. Modules can be enabled and disabled on both provider and employer level.|\n| Role | Influences if certain "rechten" are available to the users with said role. It can also influence the scope of the data returned. For example: the API will deny an "afdelings manager" access to employee\'s that are not in the "afdeling" (department) that user is manager of|\n| Activity | Every action in the API has its own activity. Using the Open API 3.0 standard these activity names are incorporated in the documentation using the `operationId` and in most cases are named in the description of an endpoint.|\n| Rights (rechten) | Represent a group of activities.|\n\n## The authorization process\nThis flow assumes that both user and client are correctly configured and have access to the API. \n\n1. Does the client have access to the activity?\n2. Does the user have access to the activity (through "recht")?\n3. Does the role have access to the activity (through "recht")?\n4. Does the provider/employer have the required module enabled for the activity?\n5. Does the user have access to the specified entity/ID?\n\nIf the answer to all the questions above is yes then the request is authorized otherwise the request is denied with a HTTP status code 403 (Forbidden).\nSee the simplified authorization flow in the figure below.\n\n__Side note:__ users are linked to rechten and clients are linked to activities. This leaves room for discrepancies.\nWhere a client cannot perform the activity because the client is not authorized to call that activity even though the user does have the "recht" granting access to the activity.\n\n![Loket authorization flow](../Authorization_flow_extern.png)\n\n## Which users can use the API\nIn almost all use-cases a Loket user should meet the following requirements to successfully setup an integration with that user.\n\n* The user must be a normal Loket user (so NOT a webservice user)\n* The user must be active (not blocked)\n* The user must have access to an employer \n  * For provider users this is done by assigning the user to the appropriate Team(s)\n  * For employer users this is done by creating a user for or linking the user to the appropriate employer(s)\n* The user must have all appropriate rights\n  * For provider users this is done by assigning appropriate rights via Team (or alternatively, directly to the user)\n  * For employer users this is done by assigning appropriate rights to the user on employer level\n\n\nHow to setup an integration is described in the [Authentication](../#section/Authentication) section.\n\n\n__Side notes:__ \n* A user can have access to multiple employers with different rights per employer.\n* Please note that users set up to use the SOAP webservices (webservicegebruikers) are in no way suited to perform calls to the RESTful API, these require entirely different user set-ups.\n* User management on production is typically done by the provider (i.e. the accountant) and sometimes the employer. This is NOT something Loket.nl itself can do.\n\n# Data\n\n## Data types\nThe Loket.nl API accepts and returns JSON.\nComform the [OpenAPI 3.0 specification](https://github.com/OAI/OpenAPI-Specification) the following data types are supported:\n* string\n* number (point is used to separate the integer part from the fractional part of a number)\n* integer (from OpenAPI)\n* object\n* array\n* boolean\n\nFor most of these types, further specifications can be found in the `format` and `pattern` specifications in the service contract. \nFor example a `format: date` added to a string field indicates a valid date must be supplied.\n\n## Metadata\nFields of the type \'metadata\' are fields for which the possible values can be acquired via the metadata endpoint of the resource.\n\nThe metedata can be obtained by appending /metadata to the current endpoint.\nUsing the GET verb the endpoint will return a JSON output with "all" the metadata for the given resource.\nIn some cases multiple requests are needed to obtain all the metadata required, an exmple is given below.\nTypically different metadata endpoints are availalbe for the POST and the PUT endpoint.\n\n\nIf metadata endpoints are avaible for a given endpoint/resource is mentioned in the description of that endpoint.\n\n### Example response\n```json\n{[\n  {\n      "field": "gender"\n      options: [\n          {\n          "key": 1,\n          "value":"Man"\n          }\n          {\n          "key": 2,\n          "value":"Vrouw"\n          }\n      ]\n   },\n   {\n      "field": "country"\n      options: [\n          {\n          "isoCode":"NL",\n          "key": 530,\n          "value":"Nederland"\n          }\n          {\n          "isoCode":"BE",\n          "key": 540,\n          "value":"België"\n          }\n      ]\n   }\n\n]}\n\n```\n\n\n### Example urls\n\n__Acquiring  metadata for a POST Wage__\n```\n/v2/providers/employers/employees/employments/{employmentId}/wages/metadata\n```\n\n\n__Acquiring metadata for a PUT employee__\n```\n/v2/providers/employers/employees/{employeeId}/metadata\n```\n\n__Multiple requests to get all the metadata__\n\nIn some cases there are metadata fields dependant on the selected value off another metadata field.\nSuch is the case when adding a new concept employee. This is done in the employer context while several of the metadata fields are dependant on the payrollAdministration context.\n\n\n__For example:__\n\n__Request 1__, first of a normal metadata request is performed. The response for this request will contain a list of payrolladministration for the given employer.\n```\n/v2/providers/employers/b869ded6-0659-4d8d-9a8a-f9e22425ec9c/jobapplicant/metadata\n```\n\n__Request 2__, when a payrolladministration is selected perform a second request to acquire the payrolladministration specific metadata.\n```\n/v2/providers/employers/jobapplicant/metadata/payrolladministration/54369214-14a1-41ab-892a-ea8438e34d6f\n```\n\n__Request 3__, if a `payScale` is selected perform a third request to acquire the `payGrade` for that `payScale`.\n```\n/v2/providers/employers/jobapplicant/metadata/salaryScaleType/54369214-14a1-41ab-892a-ea8438e34d6f\n```\n\n### Types of metadata\nWe diferentiate between two types of metadata.\n\n1. Generic metadata field. The possible values for these fields are the same for every object no matter the provider, employer or employee etc. \nExamples are: country, gender and nationality.\n2. Context specific metadata field. Examples of contexts are employer, payroll administration, provider and Loket.nl.\nIn most cases the possible values for these field are resources in themselves and can be managed via the API. \nIf a metadata field is context specific the context is given in the description of the field. \nExamples are: function, department and leaveType.\n\n\n__Note:__ some context specific metadata field can have multiple contexts. \n\nFor example: it is possible to define an export set in the provider context. \nMaking that export set available for all payroll administrations linked to the provider. \nIt is also possible to add an export set in the payroll administration context. That export set is only available to that payroll administration.\nWhen requesting the metadata of export set the user will be presented with a combined list of the provider and payroll administration export sets.\n\n## Default values\nMany fields in the API have a default value. \nIn order to assist our API users to adhere to these defaults when creating a record (POST) we provide `/defaults` endpoints.\n\n* An object returned by the `defaults`endpoint resembles a fully expanded GET-object of that resource. The only case when a part of the object is NOT fully expanded is for a metaData-object that does not have a default value (for example \'"gender":NULL\'). \n    * Whether an object within the resource is of the type metaData is indicated in the service contracts of that resource.\n* Context is determined by the GUID given in the Path. Examples are employer, payroll administration, employee and employment.\n* A scope is sometimes required to determine the defaults values. A scope could be a date by which Loket.nl can determine what default was active on that date. \n  The scope can be set by supplying additional paraments in the request. If a scope is required but none is given the currently active or last know value is returned.\n* The fields with no default will be set to null (even if the field is normally non-nullable).\n* Because the GET-object is returned the readonly fields are also returned.\n\n\n\n__An example endpoint would be:__\n\n```\n/v2/providers/employers/employees/employments/{employmentId}/payrollperioddata/defaults\n```\n\n__resulting in the following output:__\n\n```json\n{\n  "payrollPeriod": null,\n  "shift": {\n      "shiftNumber": 1\n  },\n  "payslipType": {\n      "key": 2\n  },\n  "payslipText": null,\n  "distributionUnit": {\n      "key": "b14acd0d-75d7-4fc8-8b22-4a3924585cab"\n  },\n  "costCenter": {\n      "key": 2\n  },\n  "costUnit": {\n      "key": 2\n  },\n  "payrollComponents": []\n}\n```\n\n__Note: Defaults endpoints are not yet generically available. If a Defaults endpoint exists this will be explicitly stated at that specific resource.__\n\n## Date chains\nFor most of the resources with a startDate and endDate a chain is maintained. Chain meaning that no records can overlap in time.\nLoket.nl has two types of chains.\n\n\n1) __Broken chain:__ It is posible for gaps te exist between the records. It is also posible to add new records in between or before existing records aslong as no overlap occures.\n\n2) __Linked chain:__ No gaps between records are allowed. Its only posible to add new records to the end of the chain resulting in the closing of the reviouse record with the start date -1 as end date.\n\n__Note:__ Chains are sometimes maintained with an additional context. For example, For `benefits and deductions` the broken chain is maintained per `payrollComponent`. \nIt is possible to have multiple active records for different `payrollComponent` never two active records for the same `payrollComponent`. \n\n## Custom export\nFor some GET (list) endpoints the API supports exporting (part of) the output JSON as a XML/CSV file. This is done by setting the `X-ReportInput` and `Accept` header.\n\nThe `Accept` header supports the following 2 options:\n* CSV (text/csv;version=yyyy-MM-dd)\n* Excel (application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;version=yyyy-MM-dd)\n\n\nThe `X-ReportInput` is a custom header that requires a JSON object with the following structure as input.\n\nThe filename without extension for the report \'FileNameWithoutExtension\'\ndelimiter --> The delimiter to be used. If not set "," is used\nArray of objects \'fields\' with 2 fields:\n1. fieldName --> A Xpath reference to the field to be included in the export\n2. reportColumnName --> The column name for the field\n3. format --> Allows only for date formatting. e.g. dd-MM-yyyy for csv or dd-mm-yyyy for Excel (Excel only usses lowercase)\n  3.1 For CSV: see https://learn.microsoft.com/en-us/dotnet/standard/base-types/custom-date-and-time-format-strings\n  3.2 For Excel: https://support.microsoft.com/en-us/office/number-format-codes-5026bbd6-04bc-48cd-bf33-80f18b4eae68\n\n__Example `X-ReportInput`:__\n```json\n{\n"fileNameWithoutExtension":"MyExport",\n"delimiter": ";",\n"fields":\n  [\n    {\n      "fieldName": "startDate",\n      "reportColumnName": "In dienst datum",\n      "format": "dd-MM-yyyy"\n    },\n    {\n      "fieldName": "personalDetails.firstName",\n      "reportColumnName": "First Name"\n    },\n    {\n      "fieldName": "personalDetails.lastName",\n      "reportColumnName": "Last Name"\n    }\n  ]\n}\n```\n__Example request:__\n```CURL\ncurl \n--location \n--request GET \'https://api.loket.nl/v2/providers/employers/155c8440-8ff6-4776-98db-5d2243a073e3/employees?orderby=employeeNumber\' \\\n--header \'Content-Type: application/json\' \\\n--header \'Accept: text/csv;version=2020-08-18\' \\\n--header \'X-ReportInput: {"FileNameWithoutExtension":"MyExport","Fields":[{"fieldName":"personalDetails.initials","reportColumnName":"Initials"},{"fieldName":"personalDetails.firstName","reportColumnName":"First name"},{"fieldName":"personalDetails.lastName","reportColumnName":"Last name"}]}\' \\--header \'Authorization: Bearer ZKoiC_g_NfYA3v0\' \\\n```\n\n\n# Request\nA request to the Loket.nl API consists of several components.\nEach of these components are discussed in this section.\n\n## Base URL\nThe API can be accessed at [https://api.loket.nl](https://api.loket.nl).\n The version of the API is specified in the URL. The current version of the Loket.nl API is version 2. To access version 2 of the API, one simply appends `v2` to the base URL. The full base URL of the API is therefore [https://api.loket.nl/v2](https://api.loket.nl/v2).\n\n## Endpoints\nThe endpoints defined in the OpenAPI definition of the Loket.nl API are appended to the base URL. For example, the endpoint `/providers/employers/{employerId}/employees` can be accessed at [https://api.loket.nl/v2/providers/employers/{employerId}/employees](https://api.loket.nl/v2/providers/employers/{employerId}/employees).\n\n## Path parameters\n\nMost endpoints require path parameter(s) in order to specify the context of the request. For example, the endpoint `/providers/employers/{employerId}/employees` contains the `employerId` path parameter. A path parameter is a unique identifier that identifies a specific resource, in this case an employer.\n\n## Pagination\n\nThe API supports two query parameters to control the pagination of the results: `pageNumber` and `pageSize`. Both of these query parameters only apply to endpoints that return lists of entities.\n\nThe `pageNumber` query parameter specifies which page of the collection to return. By default  `pageNumber` is set to 1 which returns the first page of the collection. Note: the pageNumber refers to the page (with a given number of entities), NOT to a specific entity within a page!\n\nThe `pageSize` query parameter influences the number of entities per page. By default `pageSize` is set to 250. Note that this default may change in the future. It is not recommended to depend on this default when developing for the Loket.nl API.\n\nExamples:\n\n* ```?pageNumber=2``` to return the second page\n* ```?pageSize=2``` to set the page size to two\n\n## Filtering\n\nThe API supports output filtering via the querystring parameter `filter`.\n\nFiltering is possible on all fields of the following datatypes:\n\n* string\n* integer\n* boolean\n* date-time\n* decimals\n\nThe following operators are available:\n\n| Operator             | Description           | Example                         |\n| -------------------- | --------------------- | ------------------------------- |\n| Comparison Operators |                       |                                 |\n| eq                   | Equal                 | `city eq \'Redmond\'`             |\n| ne                   | Not equal             | `city ne \'London\'`              |\n| lk                   | Like                  | `city lk \'Lond\'`                |\n| gt                   | Greater than          | `price gt 20`                   |\n| ge                   | Greater than or equal | `price ge 10`                   |\n| lt                   | Less than             | `price lt 20`                   |\n| le                   | Less than or equal    | `price le 100`                  |\n| Logical Operators    |                       |                                 |\n| and                  | Logical and           | `price le 200 and price gt 3.5` |\n| or                   | Logical or            | `price le 3.5 or price gt 200`  |\n\nBoth field names and values are case insensitive. It is possible to filter on nested fields by adding the parent object before the field with a \'.\' to separate them.\nDo remember to URL encode the filter parameters.\n\n### Examples\n\nAll employments with a cancellation periode in months (the value 4 corresponds to months time unit).\n\n```\n\n/v2/providers/employers/{{employerId}}/employees/employments?filter=cancellationPeriodTimeUnit.key eq 4\n\n```\n\nAll employments with no endDate.s\n\n```\n\n/v2/providers/employers/{{employerId}}/employees/employments?filter=enddate eq null\n\n```\n\n\nAll employments with an end date less or equal to 2017-01-01\n\n```\n\n/v2/providers/employers/{{employerId}}/employees/employments?filter=enddate le \'2017-01-01\'\n\n```\n\nAll employees with a employee number greater or equal 1 and less or equal 5\n\n```\n\n/v2/providers/employers/{{employerId}}/employees?filter=employeeNumber ge 1 and employeeNumber le 5\n\n```\n\n## Ordering\n\nAll Loket.nl API resources support ordering of the elements in the response on a specific field. \nAll fields can be used in ordering. \nThe list can be ordered in ascending or descending order, with ascending being the default one. Ordering on multiple fields is also  by using a \',\' as a separator.\n\n### Examples\n\nOrder employers by company name ascending\n\n```\n\n/v2/providers/employers?orderBy=companyName\n\n```\n\nOrder employers by company name descending\n\n```\n\n/v2/providers/employers?orderBy=-companyName\n\n```\n\nOrder employers by company name descending then by house number ascending\n\n```\n\n/v2/providers/employers?orderBy=-companyName,address.houseNumber\n\n```\n\n## Headers\n\nIn order to access the endpoints of the Loket.nl API, at least two request headers need to be set. \n\n\n__1)__ the `Authorization` header is required in order to authorize the API call. \nThe value of this header is the word Bearer followed by a space and the access token acquired from the `/token` endpoint. \nFor example, if the acquired access token is `AbCdEf123456`, the value of the `Authorization` headers would be:\n\n```\nAuthorization: Bearer v69uloc3wcEFLePw2unot0FfAJfBocrvSwsrCo75JLUG7aE54zqSUnU\n```\n\n__2)__ The second header that is required for proper usage of the API, is the `Accept` header.\nThis header is used for the resource versioning feature and is therefore crucial for making sure the response remains the same when new resource versions are introduced.\nThe value of the `Accept` header differs per endpoint is defined in the OpenAPI documentation of the endpoints.\n\n```\nAccept: application/json;version=2018-01-01\n```\n\n__3)__ In case of a PUT and sometimes a PATCH a third header is optional the if-match header. This header is used for concurrency control.\nEven though the header is optional we advise using this header on every PUT(PATCH) to ensure not losing data. \n\n```\nif-Match: aslkhas987da09s8udasd09a\n```\n\n# Response\n\nIn addition to the responses defined in the OpenAPI documentation, the Loket.nl API also provides additional fields that give more information about\nthe response and the entities requested. This section will explain the full response given by the Loket.nl API by examining the example response below.\n\n\nExample 400 response\n\n\n```json\n\n{\n    "version": {\n        "obsoleteDate": null,\n        "versionNumber": "2018-01-01,\n    },\n    "messages": [\n        {\n            "code": 83,\n            "id": null,\n            "type": "BrokenBusinessRule",\n            "description": "[field] has an invalid length",\n            "properties": []\n        }\n    ],\n    "_embedded": []\n}\n\n```\n\n\nExample 200 response\n\n```json\n\n  {\n      "totalSize": 1,\n      "pageSize": 250,\n      "totalPages": 1,\n      "currentPage": 1,\n      "version": {\n          "obsoleteDate": null,\n          "resourceVersion": "2018-01-01"\n      },\n      "messages": [],\n      "content": {\n          "id": "2b4c119c-527c-4cbb-a5b2-f3a11e4b76cx",\n          ...\n      }\n  }\n\n```\n\n## Paging\n* `totalSize` has an integer value indicating the total number of entities irrespective of the page size.\n\n* `pageSize` has an integer value indicating the maximum number of entities returned per page. The page size can be influenced by setting the `pageSize` query parameter. See the section Query Parameters for more information.\n\n* `totalPages` has an integer value indicating the number of pages the requested collection holds given the specific pagesize.\n\n* `currentPage` has an integer value indicating the current page number. The current page number can be influenced by setting the `pageNumber` query parameter. See the section Query Parameters for more information.\n\n## Version\nThe `version` object provides information regarding the resource version of the entity requested.\n\n  * `obsoleteDate` contains the date of discontinuation for the requested resource version. The value of this field can be `null` indicating that the requested resource version is not planned to be obsoleted at the time of the request.\n\n  * `resourceVersion` shows the version of the requested entity. The resource version can be influenced by setting the `Accept` header.\n\n## Messages\nThe `messages` field contains a list of message objects related to the request made. Any warnings and errors will be communicated in this list of messages\n\n  * `type` has a string value indicating the type of message. At this time the Loket.nl API supports five types of messages: `BrokenBusinessRule`, `Warning`, `Exception`, `ConcurrencyViolation` and `NotFound` .\n  \n  * `description` has a string value that describes the message that has occurred.\n\n  * `code` is an identifying code for the message. Please note that this code may change in the future. See the documentation portal for possible message codes for an endpoint.\n\n  * `id` relates the message to a specific entity in the reponse list. For example, in cases where a warning occurs for one of the entities in a list, the value of this field can be used to identify to which entity the warning applies. Currently implemented for endpoints where a multi-patch is performed (multiple actions are performed within one call) for example updating the status of one or more leaveRequests. \n  \n  * `properties` an array that can contain additional information regarding the message. Currently not yet fully implemented.\n\n* `_embedded` contains the list of entities as defined for each endpoint in the OpenAPI documentation. Please refer to that documentation for the contents of the `_embedded` field for each endpoint. For endpoints that return only one entity (detail endpoints) the `_embedded` field is replaced with a `content` field. The content of this field can also be found in the documentation for each endpoint.\n\n## Headers\n* `etag` header is returned with every GET of a detail (single resource). This header is used for concurrency controle\n* `Expires` header is returned with every response to indicate how long a response can be cached\n* `Content-Disposition` header is used in case of downloads to provide a file name\n\n## HTTP status codes\n\nThe Loket.nl API supports the following http status codes.\n\n| Code | Is returned when |\n|------------------|---------------|\n| 200 | The request to GET, PUT, PATCH or DELETE and object was recived and processed succesfully. The response might still contain messages of the type warning. |\n| 201 | The request to insert (POST) a new object was recived and processed succesfully. The response might still contain messages of the type warning.|\n| 400 | The request was received but could not be processed. The reason(s) will be given in the response. The content type of the response may be text/plain for API-level error messages, such as when trying to call the API without SSL otherwise the content will be application/json.  |\n| 401 | The bearer token provided in the authorization header is invalid. Do not retry the request until a new (valid) bearer token is acquired. |\n| 403 | The user is not authorized to access the resource. The reason will be given in the response. Do not retry the request until the, configuration, issue is resolved. |\n| 404 | The resource requested was not found/does not exist. |\n| 409 | The give if-match header in a PUT request no longer represents the current state of the object. Please acquire the current state off the object, via a GET, and resolve the differences then try again. |\n| 50* | A unforseen error occurred. Please check the request if everything seems te be in order on your side contact the support team. Provide as much information as possible to resolve the issue. |\n\nNote: for a limited number of endpoint a so-called multi-patch may be performed (multiple actions within one call). In that case the status code will be 200 if at least on of the actions succeeds, if other any action(s) in that call fail(s) a message will be returned including the given id of that entity.\n\n## Caching\nThe API uses the `Expires` header to indicate how long the item can be reused from the local cache.\nIn most cases caching is not allowed for resources.\nExceptions excist, such as pictures like the employer logo and the employee photo, in these cases the cache duration is mentioned in the description of the resource.\n',
    title='Loket.nl API',
    version='V2',
    servers=[
        {'description': 'Production environment', 'url': 'https://api.loket.nl/v2'},
        {'description': 'Acceptance environment', 'url': 'https://api.loket-acc.nl/v2'},
    ],
)


@app.get(
    '/achmeainsurancecontracts',
    description=""" __Activity name :__ GetAchmeaInsuranceContractsByUserId
Get a list of all Achmea insurance contracts accessible to the current user
 """,
    tags=['insurance_contract_management', 'employment_management'],
)
def get_achmea_insurance_contracts_by_user_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    list of insurance contracts
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/achmeainsurancecontracts/{achmeaInsuranceContractId}/insuredwagecalculationpercentages',
    description=""" __Activity name :__ GetWagePercentagesByAchmeaInsuranceContractId

Get a list of all wage percentages (year-end bonus and holiday allowance percentages) for an Achmea insurance contract.
 """,
    tags=['insurance_contract_management', 'wage_management'],
)
def get_wage_percentages_by_achmea_insurance_contract_id(
    achmea_insurance_contract_id: UUID = Path(..., alias='achmeaInsuranceContractId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    list of wage percentages for an insurance contract
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/aowDate',
    description=""" __Activity name:__ GetAowDateByDateOfBirth

This endpoint allows the user to acquire the AOW date of an employee.
 """,
    tags=[
        'wage_management',
        'benefit_in_kind_management',
        'social_security_management',
        'employee_management',
    ],
)
def get_aow_date_by_date_of_birth(
    date_of_birth: date_aliased = Query(..., alias='dateOfBirth'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Acquire the AOW date
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/applications/{applicationId}/authorizations',
    description=""" __Activity name :__ GetApplicationAuthorizationsByApplicationId

Get the authorizations of the application.
We expose which activities are accessable by the application and which "rechten" and "producten" are required for the user/employer to enable those activities.
 """,
    tags=['application_management', 'user_management'],
)
def get_application_authorizations_by_application_id(
    application_id: UUID = Path(..., alias='applicationId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Authorizations for the application
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/applications/{applicationId}/logo',
    description=""" __Activity name :__ GetApplicationLogo

This activity is listed twice in the documentation due to the specified version caching path parameter. Including or exluding this parameter results in slightly different behaviour.

__Caching:__ This resource changes very infrequently and can be cached for a longer time.

Get the logo of the application. In case no logo is know the service will return a 404. """,
    tags=['application_management', 'provider_information_retrieval'],
)
def get_application_logo(
    application_id: UUID = Path(..., alias='applicationId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Download the application logo
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/chamberofcommerce/{chamberOfCommerceNumber}/companyinformation',
    description=""" __Activity name:__ GetCompanyInformationByChamberOfCommerceNumber

This endpoint allows the user to acquire basic company information for a specific chamber of commerce number.
 """,
    tags=['company_information_retrieval'],
)
def get_company_information_by_chamber_of_commerce_number(
    chamber_of_commerce_number: str = Path(..., alias='chamberOfCommerceNumber'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Acquire company information
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/datanewbusiness/functions',
    description=""" __Activity name :__  GetDataNewBusinessFunctions <br/> Get a list of functions known by Data New Business. <br/>
 """,
    tags=['function_management', 'functions_management'],
)
def get_data_new_business_functions(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Get a list of functions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/datanewbusiness/token',
    description=""" __Activity name :__ GetDataNewBusinessToken

Get a token for calling the Data New Business (DNB) API.  DNB is a part of Van Spaendonck and with its API, DNB provides users data-based insights such as the salary checker. 
 """,
    tags=['data_new_business_management', 'application_management'],
)
def get_data_new_business_token(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Get Data New Business token
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/locationservices/address',
    description=""" __Activity name :__  GetAddressyByPostalCodeAndHouseNumber <br/> Acquire the address for a combination of `postalCode` and `houseNumber`.  Only Dutch addresses are supported. Both the postalCode and houseNumber have to be specified as query parameters to perform a succesful call to this endpoint. The city and street name returned by this endpoint are according to the nen standard     <br/>
 """,
    tags=['address_lookup'],
)
def get_address_by_postal_code_and_house_number(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    postal_code: str = Query(..., alias='postalCode'),
    house_number: int = Query(..., alias='houseNumber'),
):
    """
    Acquire the address for a combination of `postalCode` and `houseNumber`
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers',
    description=""" __Activity name :__ GetProvidersByUser

Get a list of all providers accessible to the current user.
Note: With the current functioning of Loket, the list will always contain 1 provider.

Note: This endpoint is typically not relevant for most external parties, as the GetEmployerByUser endpoint will be much more relevant as starting point.
 """,
    tags=['provider_management', 'provider_information_retrieval'],
)
def get_providers_by_user(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of providers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/applicationsets/{applicationSetId}',
    description=""" __Activity name:__ DeleteProviderApplicationSetByApplicationSetId

Delete an applicationset for the provider
 """,
    tags=[
        'application_management',
        'application_set_management',
        'user_application_set_management',
    ],
)
def delete_provider_application_set_by_application_set_id(
    application_set_id: UUID = Path(..., alias='applicationSetId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a specific applicationset
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/applicationsets/{applicationSetId}',
    description=""" __Activity name:__ PutProviderApplicationSetByApplicationSetId


 Edit the details for an applicationset.
 """,
    tags=['application_management', 'application_set_management'],
)
def put_provider_application_set_by_application_set_id(
    application_set_id: UUID = Path(..., alias='applicationSetId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit the details of an applicationset
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/authorizationsets/{authorizationsetid}',
    description=""" __Activity name :__ GetAuthorizationSetsByAuthorizationSetId 


 Details of an authorization set. 
 """,
    tags=['application_management', 'user_management'],
)
def get_authorization_sets_by_authorization_set_id(
    authorization_set_id: UUID = Query(..., alias='authorizationSetId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    authorizationsetid: str = ...,
):
    """
    Details of a authorization set
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/emailidentities/{emailIdentityId}',
    description=""" __Activity name:__ DeleteEmailIdentityByEmailIdentityId
    

Delete an EmailIdentity for a provider. An EmailIdentity can only be deleted when it's not used in an emailTemplate.
 """,
    tags=[
        'provider_management',
        'email_identity_management',
        'employer_contact_management',
    ],
)
def delete_email_identity_by_email_identity_id(
    email_identity_id: UUID = Path(..., alias='emailIdentityId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Delete an EmailIdentity for a provider
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/emailidentities/{emailIdentityId}/sendtestemail',
    description=""" __Activity name:__ PostSendProviderTestemailByEmailIdentityId
    

Send an email to test the email identity configuration. 
 """,
    tags=['provider_management', 'email_identity_management'],
)
def post_send_provider_testemail_by_email_identity_id(
    email_identity_id: UUID = Path(..., alias='emailIdentityId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Provider emailIdentity test email
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers',
    description=""" __Activity name :__ GetEmployersByUserId

Get a list of all employers accessible to the current user

Please note the following general remark regarding the Loket API. If an id is required as a path parameter, in almost all cases the UUID of the specific resource should be used. In the employer resource this corresponds to the the 'id' field, as is typical. (so do NOT use employerNumber as your path parameter for any following requests)
 """,
    tags=[
        'employer_data_retrieval',
        'employer_management',
        'employer_related_operations',
    ],
)
def get_employers_by_user_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of employers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/providers/employers/announcements',
    description=""" __Activity name :__ PatchAnnouncementsByEmployerId

Mark announcements as read
 """,
    tags=['announcement_management'],
)
def patch_announcements(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    body: ProvidersEmployersAnnouncementsPatchRequest = ...,
):
    """
    Mark one or more announcements as read.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/benefitinkindtypes/{benefitInKindTypeId}',
    description=""" __Activity name :__ DeleteBenefitInKindTypeByBenefitInKindTypeId

Delete an existing benefit in kind type record
 """,
    tags=['benefit_in_kind_type_management', 'benefit_in_kind_management'],
)
def delete_benefit_in_kind_type_by_benefit_in_kind_type_id(
    benefit_in_kind_type_id: UUID = Path(..., alias='benefitInKindTypeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete an benefit in kind type record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/benefitinkindtypes/{benefitInKindTypeId}',
    description=""" __Activity name :__ GetBenefitInKindTypeByBenefitInKindTypeId

Get the details of an benefit in kind type
 """,
    tags=['benefit_in_kind_type_management', 'benefit_in_kind_management'],
)
def get_benefit_in_kind_type_by_benefit_in_kind_type_id(
    benefit_in_kind_type_id: UUID = Path(..., alias='benefitInKindTypeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Details of an benefit in kind type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/benefitinkindtypes/{benefitInKindTypeId}',
    description=""" __Activity name :__ PutBenefitInKindTypeByBenefitInKindTypeId
 """,
    tags=['benefit_in_kind_type_management', 'benefit_in_kind_management'],
)
def put_benefit_in_kind_type_by_benefit_in_kind_type_id(
    benefit_in_kind_type_id: UUID = Path(..., alias='benefitInKindTypeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit an benefit in kind type record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/providers/employers/conceptemployees/import/{payrollAdministrationId}',
    description=""" __Activity name :__ PatchImportConceptEmployeesByPayrollAdministrationId

__Metadata:__ No metadata

Currently supported file is the payroll tax return XML (year 2022 or later).
 """,
    tags=[
        'employee_concept_management',
        'payroll_administration_management',
        'employment_management',
    ],
)
def patch_import_concept_employees_by_payroll_administration_id(
    concept_employee_id: UUID = Query(..., alias='conceptEmployeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payroll_administration_id: str = Path(..., alias='payrollAdministrationId'),
    file: UploadFile = ...,
):
    """
    Import concept employees via a file
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/conceptemployees/metadata/payrollAdministration/{payrollAdministrationId}/payScale/{payscaleKey}/paygrade/{paygradeKey}',
    description=""" __Activity name :__ GetConceptEmployeePayGradeMetaDataByPayrollAdministrationIdAndPayscaleKeyAndPayGradeKey

Acquire data on a specific paygrade, this consists of a list of paygrade values and their respective startDates.

If a valid `date` parameter is included in the call, the list will consists of one item that is applicable for that date.
 """,
    tags=[
        'employee_concept_management',
        'wage_management',
        'payroll_administration_management',
        'employee_management',
    ],
)
def get_employee_paygrade_metadata(
    payroll_administration_id: UUID = Path(..., alias='payrollAdministrationId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payscale_key: int = Path(..., alias='payscaleKey'),
    paygrade_key: int = Path(..., alias='paygradeKey'),
    date: Optional[date_aliased] = None,
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Paygrade metadata for concept employee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/conceptemployees/minimized/{conceptEmployeeId}',
    description=""" __Activity name :__ GetConceptEmployeeMinimizedByConceptEmployeeId


 Get the details of a concept employee with fewer fields
 """,
    tags=['employee_concept_management', 'concept_employee_dossier_management'],
)
def get_concept_employee_minimized_by_concept_employee_id(
    concept_employee_id: UUID = Path(..., alias='conceptEmployeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Details of a concept employee with fewer fields.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/conceptemployees/minimized/{conceptEmployeeId}',
    description=""" __Activity name :__ PutConceptEmployeeMinimizedByConceptEmployeeId

Edit the details of a concept employee with fewer fields.

* Possible options (metadata) for generic fields of the type "metadata" can be acquired (GET) by adding `/metadata` to the URL.
 """,
    tags=[
        'employee_concept_management',
        'employment_management',
        'employee_management',
    ],
)
def put_concept_employee_minized_by_concept_employee_id(
    concept_employee_id: UUID = Path(..., alias='conceptEmployeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit the details of a concept employee with fewer fields.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/conceptemployees/{conceptEmployeeId}',
    description=""" __Activity name :__ DeleteConceptEmployeeByConceptEmployeeId

Delete a concept employee
 """,
    tags=[
        'employee_concept_management',
        'concept_employee_dossier_management',
        'employee_management',
    ],
)
def delete_concept_employee_by_concept_employee_id(
    concept_employee_id: UUID = Path(..., alias='conceptEmployeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a concept employee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/conceptemployees/{conceptEmployeeId}',
    description=""" __Activity name :__ GetConceptEmployeeByConceptEmployeeId


 Get the details of a concept employee
 """,
    tags=[
        'employee_concept_management',
        'concept_employee_dossier_management',
        'employee_management',
    ],
)
def get_concept_employee_by_concept_employee_id(
    concept_employee_id: UUID = Path(..., alias='conceptEmployeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Details of a concept employee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/conceptemployees/{conceptEmployeeId}',
    description=""" __Activity name :__ PutConceptEmployeeByConceptEmployeeId

Edit the details of a concept employee

* Possible options (metadata) for generic fields of the type "metadata" can be acquired (GET) by adding `/metadata` to the URL.
* Possible options dependent on a specific payrollAdministration can be acquired via `../providers/employers/conceptemployees/metadata/payrollAdministration/{payrollAdministrationId}`.
* Possible options for payGrade can be acquired via `../providers/employers/conceptemployees/metadata/payrolladministration/{payrollAdministrationId}/payscale/{payScaleKey}`.

A `payGrade` has time based values dictating the wage for a given period. These values can be acquired by performing another metadata request `../providers/employers/conceptemployees/metadata/payscale/{payScaleKey}/paygrade/{payGradeKey}`.


__NonPayrollAdministrations__ For nonPayrollAdministrations the equivalent MetaData-endpoints are also available as described above. However NO specific defaults endpoint is available for the nonPayrollAdministration.
 """,
    tags=[
        'employee_concept_management',
        'concept_employee_dossier_management',
        'employee_management',
    ],
)
def put_concept_employee_by_concept_employee_id(
    concept_employee_id: UUID = Path(..., alias='conceptEmployeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit the details of a concept employee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/conceptemployees/{conceptEmployeeId}/assessment/initiate',
    description=""" __Activity name :__ PostInitiateAssessmentByConceptEmployeeId

__Metadata:__ No metadata available. No defaults available.


Initiate the proces to perform an assessment for a concept employee.
 """,
    tags=[
        'employee_concept_management',
        'preboarding_trajectory_management',
        'audit_and_assessment_handling',
    ],
)
def post_initiate_assessment_by_concept_employee_id(
    concept_employee_id: UUID = Path(..., alias='conceptEmployeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Initiate assessment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/conceptemployees/{conceptEmployeeId}/citizenservicenumber',
    description=""" __Activity name :__ GetCitizenServiceNumberByConceptEmployeeId

Get the citizen service number (BSN) of a concept employee.  BSN is separately authorized in Loket and is therefore designed to have its own activities.  
 """,
    tags=['employee_concept_management', 'wage_management', 'employment_management'],
)
def get_citizen_service_number_by_concept_employee_id(
    concept_employee_id: UUID = Path(..., alias='conceptEmployeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Citizen service number of a concept employee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/conceptemployees/{conceptEmployeeId}/citizenservicenumber',
    description=""" __Activity name :__ PutCitizenServiceNumberByConceptEmployeeId

Update the citizen service number (BSN) of a concept employee BSN is separately authorized in Loket and is therefore designed to have its own activities.
 """,
    tags=['employee_concept_management', 'employment_management'],
)
def put_citizen_service_number_by_concept_employee_id(
    concept_employee_id: UUID = Path(..., alias='conceptEmployeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Update the citizen service number of a concept employee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/providers/employers/conceptemployees/{conceptEmployeeId}/convertToEmployee',
    description=""" __Activity name :__ PatchConvertToEmployeeByConceptEmployeeId

This endpoint "converts" the conceptEmployee to an actual employee in Loket. This means creating a number of records including Employee, Employment, WorkingHours, Wage etc. If the promotion is succesful the concept employee record will be deleted.

The GUID of the conceptEmployee will be copied over to the GUID of the newly created Employee.

Before performing these steps, quite a number of validations are performed to ensure that the provided information can be used to create a functionally valid employee.


If the employeeNumber is empty then this will be set automatically for the employee. (i.e. highest available number +1)

__Additional functionality :__
* It is possible to call an alternative functionality closely related to this functionality. This additional functionality will perform the validation ONLY, and it will NOT convert the conceptEmployee to an actual employee even when all validation rules are successful. Other than not performing the actual step of converting the employee the endpoint will behave identically to the actual endpoint.
* This functionality can be applied by setting the optional X-ValidateOnly header to true
 """,
    tags=[
        'concept_employee_dossier_management',
        'employee_concept_management',
        'employee_management',
    ],
)
def patch_convert_to_employee_by_concept_employee_id(
    concept_employee_id: UUID = Path(..., alias='conceptEmployeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
    x__validate_only: Optional[bool] = Header(None, alias='X-ValidateOnly'),
):
    """
    Convert a concept employee to an employee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/conceptemployees/{conceptEmployeeId}/documents',
    description=""" __Activity name :__ GetDocumentsByConceptEmployeeId

Get a list of documents within the concept employee's dossier (werknemerdossier). Via Qwoater.
 """,
    tags=[
        'concept_employee_dossier_management',
        'employee_concept_management',
        'document_management',
    ],
)
def get_documents_by_concept_employee_id(
    concept_employee_id: UUID = Path(..., alias='conceptEmployeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Get a list of concept employee dossier documents
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/conceptemployees/{conceptEmployeeId}/documents',
    description=""" __Activity name :__ PostDocumentByConceptEmployeeId

__Metadata:__ Possible options for fields of the type 'metadata' can be acquired(GET)by adding `/metadata` to the POST URL.

Upload a document within the concept employee's dossier (werknemerdossier). Via Qwoater.
 """,
    tags=['concept_employee_dossier_management', 'dossier_management'],
)
def post_document_by_concept_employee_id(
    concept_employee_id: UUID = Path(..., alias='conceptEmployeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Upload a document to the concept employee dossier
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/conceptemployees/{conceptEmployeeId}/documents/{documentId}',
    description=""" __Activity name:__ DeleteDocumentByConceptEmployeeIdAndDocumentId

Delete a document in the concept employee dossier
 """,
    tags=[
        'concept_employee_dossier_management',
        'dossier_management',
        'document_management',
    ],
)
def delete_document_by_concept_employee_id_and_document_id(
    concept_employee_id: UUID = Path(..., alias='conceptEmployeeId'),
    document_id: str = Path(..., alias='documentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Delete a document in the concept employee dossier
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/conceptemployees/{conceptEmployeeId}/documents/{documentId}',
    description=""" __Activity name :__ GetDocumentByConceptEmployeeIdAndDocumentId

Download the file of a given concept employee dossier entry. Via Qwoater.
 """,
    tags=[
        'concept_employee_dossier_management',
        'document_management',
        'employee_concept_management',
        'download_request_management',
    ],
)
def get_document_by_concept_employee_id_and_document_id(
    concept_employee_id: UUID = Path(..., alias='conceptEmployeeId'),
    document_id: str = Path(..., alias='documentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
):
    """
    Download concept employee dossier document
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/conceptemployees/{conceptEmployeeId}/documents/{documentId}',
    description=""" __Activity name:__ PutDocumentByConceptEmployeeIdAndDocumentId

Edit the details for a document in the concept employee dossier
 """,
    tags=[
        'concept_employee_dossier_management',
        'employee_concept_management',
        'document_management',
    ],
)
def put_document_by_concept_employee_id_and_document_id(
    concept_employee_id: UUID = Path(..., alias='conceptEmployeeId'),
    document_id: str = Path(..., alias='documentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Edit the details of an concept employee dossier document
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/conceptemployees/{conceptEmployeeId}/documents/{documentId}/audittrail',
    description=""" __Activity name :__ GetAuditTrailByConceptEmployeeIdAndDocumentId

Get audittrail for the document in the concept employee dossier.
 """,
    tags=['concept_employee_dossier_management', 'audit_trail_management'],
)
def get_audit_trail_by_concept_employee_id_and_document_id(
    document_id: str = Path(..., alias='documentId'),
    concept_employee_id: UUID = Path(..., alias='conceptEmployeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Get audittrail for the document in the concept employee dossier
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/conceptemployees/{conceptEmployeeId}/documents/{documentId}/signature',
    description=""" __Activity name :__ DeleteSignatureByConceptEmployeeIdAndDocumentId

__Metadata:__ No metadata available.

Delete the proces to sign a document for an Conceptemployee.
 """,
    tags=[
        'concept_employee_dossier_management',
        'signature_management',
        'employee_concept_management',
    ],
)
def delete_signature_by_concept_employee_id_and_document_id(
    concept_employee_id: UUID = Path(..., alias='conceptEmployeeId'),
    document_id: str = Path(..., alias='documentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Delete signature - Conceptemployee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/conceptemployees/{conceptEmployeeId}/documents/{documentId}/signature',
    description=""" __Activity name :__ GetSignatureByConceptEmployeeIdAndDocumentId

__Metadata:__ No metadata available.

Retrieve the status of the signing.
 """,
    tags=['employee_concept_management', 'concept_employee_dossier_management'],
)
def get_signature_by_concept_employee_id_and_document_id(
    concept_employee_id: UUID = Path(..., alias='conceptEmployeeId'),
    document_id: str = Path(..., alias='documentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Signature details - Conceptemployee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/conceptemployees/{conceptEmployeeId}/documents/{documentId}/signature/initiate',
    description=""" __Activity name :__ PostInitiateSignatureByConceptEmployeeIdAndDocumentId

__Metadata:__ No metadata available. Defaults are available by adding /defaults to the path.

Initiate the proces to sign a document for an employment by one or more signers.
 """,
    tags=[
        'employee_concept_management',
        'concept_employee_dossier_management',
        'signature_management',
    ],
)
def post_initiate_signature_by_concept_employee_id_and_document_id(
    concept_employee_id: UUID = Path(..., alias='conceptEmployeeId'),
    document_id: str = Path(..., alias='documentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Initiate signature - Conceptemployee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/conceptemployees/{conceptEmployeeId}/documents/{documentId}/signature/report',
    description=""" __Activity name :__ GetSignatureReportByConceptEmployeeIdAndDocumentId

__Metadata:__ No metadata available.

Report of the signature.
 """,
    tags=[
        'concept_employee_dossier_management',
        'document_management',
        'signature_management',
        'employee_concept_management',
    ],
)
def get_signature_report_by_concept_employee_id_and_document_id(
    concept_employee_id: UUID = Path(..., alias='conceptEmployeeId'),
    document_id: str = Path(..., alias='documentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Retrieve the report of the signing - Conceptemployee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/conceptemployees/{conceptEmployeeId}/documenttemplates/{documentId}/generatedocument',
    description=""" __Activity name :__ PostGenerateDocumentByConceptEmployeeIdAndDocumentId

__Metadata:__ Available templates can be acquired(GET) at Employer level(/v2/providers/employers/{conceptEmployeeId}/documenttemplates/generatedocument/metadata).

Generate a document for an concept employee and store it in the employment dossier.  Via Qwoater.
 """,
    tags=[
        'concept_employee_dossier_management',
        'document_management',
        'employee_concept_management',
    ],
)
def post_generate_document_by_concept_employee_id_and_document_id(
    concept_employee_id: UUID = Path(..., alias='conceptEmployeeId'),
    document_id: str = Path(..., alias='documentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Generate a document for an concept employee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/conceptemployees/{conceptEmployeeId}/documenttemplates/{documentId}/generatedocument/preview',
    description=""" __Activity name :__ PostGenerateDocumentPreviewByConceptEmployeeIdAndDocumentId

__Metadata:__ Available templates can be acquired(GET) at Employer level(/v2/providers/employers/{employerId}/documenttemplates/generatedocument/metadata).

Generate a document for an concept employee and receive a preview. Via Qwoater.
 """,
    tags=[
        'concept_employee_dossier_management',
        'employment_document_management',
        'employee_concept_management',
    ],
)
def generate_document_preview_concept_employee(
    concept_employee_id: UUID = Path(..., alias='conceptEmployeeId'),
    document_id: str = Path(..., alias='documentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Generate a document for an concept employee - preview
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/conceptemployees/{conceptEmployeeId}/dossier"',
    description=""" __Activity name:__ DeleteDossierByConceptEmployeeId

Delete a complete dossier, with all documents in it, for the concept employee
 """,
    tags=['concept_employee_dossier_management', 'employee_concept_management'],
)
def delete_dossier_by_concept_employee_id(
    concept_employee_id: UUID = Path(..., alias='conceptEmployeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Delete the complete concept employee dossier
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/conceptemployees/{conceptEmployeeId}/dossier"',
    description=""" __Activity name :__ GetDocumentCountByConceptEmployeeId

Get a count of the number of documents in the dossier. Via Qwoater.
 """,
    tags=['employee_concept_management', 'concept_employee_dossier_management'],
)
def get_document_count_by_concept_employee_id(
    concept_employee_id: UUID = Path(..., alias='conceptEmployeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Document count
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/providers/employers/conceptemployees/{conceptEmployeeId}/preboardingtrajectory',
    description=""" __Activity name :__ PatchPreboardingTrajectoryByConceptEmployeeId
 """,
    tags=['preboarding_trajectory_management', 'employee_concept_management'],
)
def patch_preboarding_trajectory_by_concept_employee_id(
    concept_employee_id: UUID = Path(..., alias='conceptEmployeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Change status of a preboarding trajectory
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/conceptemployees/{conceptEmployeeId}/preboardingtrajectory',
    description=""" __Activity name :__ PostPreboardingTrajectoryByConceptEmployeeId
 """,
    tags=['preboarding_trajectory_management', 'employee_concept_management'],
)
def post_preboarding_trajectory_by_concept_employee_id(
    concept_employee_id: UUID = Path(..., alias='conceptEmployeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Add a preboarding trajectory
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/conceptemployees/{conceptEmployeeId}/selfservice',
    description=""" __Activity name :__ GetConceptEmployeeSelfServiceByConceptEmployeeId

Get the details of a Concept employee with regards to ESS access
 """,
    tags=['employee_self_service_management', 'employee_concept_management'],
)
def get_concept_employee_self_service_by_concept_employee_id(
    employee_id: UUID = Query(..., alias='employeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
    concept_employee_id: str = Path(..., alias='conceptEmployeeId'),
):
    """
    Details of a Concept employee self service portal status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/contractcodes/{contractCodeId}',
    description=""" __Activity name :__ DeleteContractCodeByContractCodeId


Delete an existing contract code record
 """,
    tags=['contract_code_management', 'insurance_contract_management'],
)
def delete_contract_code_by_contract_code_id(
    contract_code_id: UUID = Path(..., alias='contractCodeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a contract code record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/contractcodes/{contractCodeId}',
    description=""" __Activity name :__ GetContractCodeByContractCodeId


Get the details of a contract code
 """,
    tags=['contract_code_management', 'insurance_contract_management'],
)
def get_contract_code_by_contract_code_id(
    contract_code_id: UUID = Path(..., alias='contractCodeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Details of a contract code
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/contractcodes/{contractCodeId}',
    description=""" __Activity name :__ PutContractCodeByContractCodeId
 """,
    tags=['contract_code_management', 'employer_data_management'],
)
def put_contract_code_by_contract_code_id(
    contract_code_id: UUID = Path(..., alias='contractCodeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit a contract code record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/customfields/{customFieldId}',
    description=""" __Activity name :__ DeleteCustomFieldByCustomFieldId

Delete an existing custom field record
 """,
    tags=['custom_field_management'],
)
def delete_custom_field_by_custom_field_id(
    custom_field_id: UUID = Path(..., alias='customFieldId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a custom field record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/customfields/{customFieldId}',
    description=""" __Activity name :__ GetCustomFieldByCustomFieldId

Get the details of a custom field
 """,
    tags=[
        'custom_field_management',
        'employee_custom_field_management',
        'employment_custom_field_management',
    ],
)
def get_custom_field_by_custom_field_id(
    custom_field_id: UUID = Path(..., alias='customFieldId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Details of a custom field
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/customfields/{customFieldId}',
    description=""" __Activity name :__ PutCustomFieldByCustomFieldId
 """,
    tags=[
        'custom_field_management',
        'employee_custom_field_management',
        'employment_custom_field_management',
    ],
)
def put_custom_field_by_custom_field_id(
    custom_field_id: UUID = Path(..., alias='customFieldId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit a custom field record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/customholidays/{customHolidayId}',
    description=""" __Activity name :__ DeleteCustomHolidayByCustomHolidayId

Delete an existing custom holiday record
 """,
    tags=['custom_holiday_management', 'application_management'],
)
def delete_custom_holiday_by_custom_holiday_id(
    custom_holiday_id: UUID = Path(..., alias='customHolidayId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a custom holiday record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/customholidays/{customHolidayId}',
    description=""" __Activity name :__ GetCustomHolidayByCustomHolidayId

Get the details of a custom holiday
 """,
    tags=['custom_holiday_management'],
)
def get_custom_holiday_by_custom_holiday_id(
    custom_holiday_id: UUID = Path(..., alias='customHolidayId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Details of a custom holiday
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/customholidays/{customHolidayId}',
    description=""" __Activity name :__ PutCustomHolidayByCustomHolidayId
 """,
    tags=['custom_holiday_management'],
)
def put_custom_holiday_by_custom_holiday_id(
    custom_holiday_id: UUID = Path(..., alias='customHolidayId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit a custom holiday record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/departments/{departmentId}',
    description=""" __Activity name:__ GetDepartmentByDepartmentId

Get the details of department
 """,
    tags=['department_management', 'employer_data_management'],
)
def get_department_by_department_id(
    department_id: UUID = Path(..., alias='departmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Details of a department
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/departments/{departmentId}',
    description=""" __Activity name:__ PutDepartmentByDepartmentId

Edit the details for a department

__Metadata :__ Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the POST URL.
 """,
    tags=['department_management', 'employer_data_management'],
)
def put_department_by_department_id(
    department_id: UUID = Path(..., alias='departmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit the details of a department
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/educationfurtherindications/{educationFurtherIndicationId}',
    description=""" __Activity name :__ DeleteEducationFurtherIndicationByEducationFurtherIndicationId

Delete an existing education further indication record
 """,
    tags=['education_indication_management'],
)
def delete_education_further_indication(
    education_further_indication_id: UUID = Path(
        ..., alias='educationFurtherIndicationId'
    ),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete an education further indication record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/educationfurtherindications/{educationFurtherIndicationId}',
    description=""" __Activity name :__ GetEducationFurtherIndicationByEducationFurtherIndicationId

Get the details of an education further indication
 """,
    tags=[
        'education_indication_management',
        'education_management',
        'employee_education_management',
    ],
)
def get_education_further_indication_details(
    education_further_indication_id: UUID = Path(
        ..., alias='educationFurtherIndicationId'
    ),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Details of an education further indication
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/educationfurtherindications/{educationFurtherIndicationId}',
    description=""" __Activity name :__ PutEducationFurtherIndicationByEducationFurtherIndicationId
 """,
    tags=[
        'education_indication_management',
        'education_record_management',
        'employee_education_management',
    ],
)
def edit_education_further_indication(
    education_further_indication_id: UUID = Path(
        ..., alias='educationFurtherIndicationId'
    ),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit an education further indication record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/educationtypes/{educationTypeId}',
    description=""" __Activity name :__ DeleteEducationTypeByEducationTypeId

Delete an existing education type record
 """,
    tags=[
        'education_type_management',
        'education_management',
        'education_record_management',
    ],
)
def delete_education_type_by_education_type_id(
    education_type_id: UUID = Path(..., alias='educationTypeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete an education type record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/educationtypes/{educationTypeId}',
    description=""" __Activity name :__ GetEducationTypeByEducationTypeId

Get the details of an education type
 """,
    tags=[
        'education_type_management',
        'education_management',
        'employee_education_management',
    ],
)
def get_education_type_by_education_type_id(
    education_type_id: UUID = Path(..., alias='educationTypeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Details of an education type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/educationtypes/{educationTypeId}',
    description=""" __Activity name :__ PutEducationTypeByEducationTypeId
 """,
    tags=[
        'education_type_management',
        'education_record_management',
        'employee_education_management',
    ],
)
def put_education_type_by_education_type_id(
    education_type_id: UUID = Path(..., alias='educationTypeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit an education type record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/emailidentities/{emailIdentityId}',
    description=""" __Activity name:__ DeleteEmailIdentityByEmailIdentityId
    

Delete an EmailIdentity for an employer. An EmailIdentity can only be deleted when it's not used in an emailTemplate.
 """,
    tags=['employer_contact_management', 'email_identity_management'],
)
def delete_providers_employers_emailidentities__email_identity_id(
    email_identity_id: UUID = Path(..., alias='emailIdentityId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Delete an EmailIdentity for an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/emailidentities/{emailIdentityId}/sendtestemail',
    description=""" __Activity name:__ PostSendEmployerTestemailByEmailIdentityId
    

Send an email to test the email identity configuration. 
 """,
    tags=['employer_contact_management', 'email_identity_management'],
)
def post_send_employer_testemail_by_email_identity_id(
    email_identity_id: UUID = Path(..., alias='emailIdentityId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Employer emailIdentity test email
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/absences/absencecontactHistory/{absencecontactHistoryId}',
    description=""" __Activity name :__ DeleteAbsenceContactHistoryByAbsenceContactHistoryId

Delete an existing record from the contact history
 """,
    tags=[
        'absence_contact_management',
        'absence_progress_management',
        'absence_management',
    ],
)
def delete_absence_contact_history_by_absence_contact_history_id(
    absencecontact_history_id: UUID = Path(..., alias='absencecontactHistoryId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a specific record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/absences/absencecontactHistory/{absencecontactHistoryId}',
    description=""" __Activity name :__ GetAbsenceContactHistoryByAbsenceContactHistoryId

Get the details of a contact 
 """,
    tags=[
        'absence_contact_management',
        'employee_absence_management',
        'contact_management',
    ],
)
def get_absence_contact_history_by_absence_contact_history_id(
    absencecontact_history_id: UUID = Path(..., alias='absencecontactHistoryId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Details of a contact history
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/absences/absencecontactHistory/{absencecontactHistoryId}',
    description=""" __Activity name :__ PutAbsenceContactHistoryByAbsenceContactHistoryId

__Metadata :__ Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the PUT URL.

Edit the details of a contact history
 """,
    tags=['absence_contact_management', 'contact_management'],
)
def put_absence_contact_history_by_absence_contact_history_id(
    absencecontact_history_id: UUID = Path(..., alias='absencecontactHistoryId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit the details of a contact history
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/absences/absenceprogress/{absenceProgressId}',
    description=""" __Activity name :__ DeleteAbsenceProgressByAbsenceProgressId

Delete an existing Absence Progress (for an employee). There always has to remain one record of absence progress for an absence. This last record is removed when the absence is deleted.
 """,
    tags=['absence_progress_management', 'absence_management'],
)
def delete_absence_progress_by_absence_progress_id(
    absence_progress_id: UUID = Path(..., alias='absenceProgressId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a specific Absence Progress record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/absences/absenceprogress/{absenceProgressId}',
    description=""" __Activity name :__ GetAbsenceProgressByAbsenceProgressId

Get the details of an Absence Progress        
 """,
    tags=[
        'absence_progress_management',
        'absence_management',
        'employee_absence_management',
    ],
)
def get_absence_progress_by_absence_progress_id(
    absence_progress_id: UUID = Path(..., alias='absenceProgressId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Details of an Absence Progress
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/absences/absenceprogress/{absenceProgressId}',
    description=""" __Activity name :__ PutAbsenceProgressByAbsenceProgressId

__Metadata :__  Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the PUT URL.

Edit the details of an absence progress
 """,
    tags=['absence_progress_management', 'absence_management'],
)
def put_absence_progress_by_absence_progress(
    absence_progress_id: UUID = Path(..., alias='absenceProgressId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit the details of an absence progress
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/absences/{absenceId}',
    description=""" __Activity name :__ DeleteAbsenceByAbsenceId

Delete an existing absence (for an employee). If succesfull, this function also deletes the underlying absence progress records
 """,
    tags=[
        'absence_management',
        'absence_progress_management',
        'employee_absence_management',
    ],
)
def delete_absence_by_absence_id(
    absence_id: UUID = Path(..., alias='absenceId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a specific absence record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/absences/{absenceId}',
    description=""" __Activity name :__ GetAbsenceByAbsenceId

Get the details of an Absence        
 """,
    tags=[
        'absence_management',
        'employee_absence_management',
        'absence_progress_management',
        'absence_contact_management',
    ],
)
def get_absence_by_absence_id(
    absence_id: UUID = Path(..., alias='absenceId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Details of an Absence
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/absences/{absenceId}',
    description=""" __Activity name :__ PutAbsenceByAbsenceId

__Metadata :__  Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the PUT URL.

Edit the details of am Absence
 """,
    tags=[
        'absence_management',
        'absence_progress_management',
        'absence_contact_management',
        'employee_absence_management',
    ],
)
def put_absence_by_absence(
    absence_id: UUID = Path(..., alias='absenceId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit the details of a Absence
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/absences/{absenceId}/absencecontactHistory',
    description=""" __Activity name :__ GetAbsenceContactHistoryByAbsenceId

Get the contacts history for a specific absence (verzuimmelding).
 """,
    tags=['absence_contact_management', 'absence_management'],
)
def get_absence_contacts_history_by_absence_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    absence_id: UUID = Path(..., alias='absenceId'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Contact history for an absence
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/absences/{absenceId}/absencecontactHistory',
    description=""" __Activity name :__ PostAbsenceContactHistoryByAbsenceId

__Metadata :__  Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the POST URL.

__Defaults :__ Default values for a new object can be acquired by adding `/defaults' to the POST URL. 
 """,
    tags=[
        'absence_contact_management',
        'absence_management',
        'employee_absence_management',
    ],
)
def post_absence_contact_history_by_absence_id(
    absence_id: UUID = Path(..., alias='absenceId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create a contact history for an Absence
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/absences/{absenceId}/absenceprogress',
    description=""" __Activity name :__ GetAbsenceProgressByAbsenceId

Get a list of absence progress (verzuimverloop) for a specific absence (verzuimmelding).
 """,
    tags=['absence_progress_management', 'absence_management'],
)
def get_absence_progress_by_absence_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    absence_id: UUID = Path(..., alias='absenceId'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of absence progress for an absence
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/absences/{absenceId}/absenceprogress',
    description=""" __Activity name :__ PostAbsenceProgressByAbsenceId

__Metadata :__  Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the POST URL.

__Defaults :__ Default values for a new object can be acquired by adding `/defaults' to the POST URL. 

Add an Absence Progress (=Ziekteverloop) for an employee. As is common with closed chain entities, the endDate of the previous record will be filled depending on the startDate of the new one.

Practically this means that a full recovery notification has been performed. 
 """,
    tags=['absence_progress_management', 'absence_management'],
)
def post_absence_progress_by_absence_id(
    absence_id: UUID = Path(..., alias='absenceId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create an Absence Progress for an Absence
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/providers/employers/employees/absences/{absenceId}/closeabsence',
    description=""" __Activity name :__ PatchCloseAbsenceByAbsenceId

A succesfull call to this endpoint will close the absence and the underlying absence progress (with an empty endDate). 
 """,
    tags=['absence_management', 'employee_absence_management'],
)
def patch_close_absence_by_absence_id(
    absence_id: UUID = Path(..., alias='absenceId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Close an absence
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/providers/employers/employees/absences/{absenceId}/reopenabsence',
    description=""" __Activity name :__ PatchReopenAbsenceByAbsenceId

When performing a succesfull call to this endpoint, then the absence and the underlying absence progress will we reopend.
Both `endOfAbsenceDate` and `endOfAbsenceReason` will be set to null
 """,
    tags=['absence_management', 'employee_absence_management'],
)
def patch_reopen_absence_by_absence_id(
    absence_id: UUID = Path(..., alias='absenceId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Reopen an absence
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/children/{childId}',
    description=""" __Activity name :__ DeleteChildByChildId

Delete an existing child (for an employee)
 """,
    tags=['child_management'],
)
def delete_child_by_child_id(
    child_id: UUID = Path(..., alias='childId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a specific child record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/children/{childId}',
    description=""" __Activity name :__ GetChildByChildId

Get the details of a child        
 """,
    tags=['child_management', 'employee_family_management'],
)
def get_child_by_child_id(
    child_id: UUID = Path(..., alias='childId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Details of a child
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/children/{childId}',
    description=""" __Activity name :__ PutChildByChildId

__Metadata :__  Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the PUT URL.

Edit the details of a child
 """,
    tags=['child_management', 'employee_family_management'],
)
def put_child_by_child_id(
    child_id: UUID = Path(..., alias='childId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit the details of a child
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/contacts/{contactId}',
    description=""" __Activity name :__ DeleteContactByContactId

Delete an existing Contact (for an employee)
 """,
    tags=['contact_management', 'provider_management'],
)
def delete_contact_by_contact_id(
    contact_id: UUID = Path(..., alias='contactId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a specific contact
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/contacts/{contactId}',
    description=""" __Activity name :__ GetContactByContactId  

Get the details of a single contact
 """,
    tags=['contact_management', 'employee_management'],
)
def get_contact_by_contact_id(
    contact_id: UUID = Path(..., alias='contactId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Details of a single contact
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/contacts/{contactId}',
    description=""" __Activity name :__ PutContactByContactId  

__Metadata :__  Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the PUT URL.

Edit the details of a contact
 """,
    tags=['contact_management', 'employee_contact_management'],
)
def put_contact_by_contact_id(
    contact_id: UUID = Path(..., alias='contactId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit a contact
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/customfields/{employeeCustomFieldId}',
    description=""" __Activity name :__ DeleteEmployeeCustomFieldByEmployeeCustomFieldId

Delete an existing custom field record
 """,
    tags=['custom_field_management', 'employee_custom_field_management'],
)
def delete_employee_custom_field_by_employee_custom_field_id(
    employee_custom_field_id: UUID = Path(..., alias='employeeCustomFieldId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete an employee custom field record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/customfields/{employeeCustomFieldId}',
    description=""" __Activity name :__ GetEmployeeCustomFieldByEmployeeCustomFieldId

Get the details of a custom field
 """,
    tags=[
        'custom_field_management',
        'employee_custom_field_management',
        'employee_custom_fields_management',
    ],
)
def get_employee_custom_field_by_employee_custom_field_id(
    employee_custom_field_id: UUID = Path(..., alias='employeeCustomFieldId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Details of an employee custom field
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/customfields/{employeeCustomFieldId}',
    description=""" __Activity name :__ PutEmployeeCustomFieldByEmployeeCustomFieldId

__Metadata :__ No metadata available for this endpoint
 """,
    tags=[
        'employee_custom_field_management',
        'custom_field_management',
        'employee_management',
        'employment_custom_fields_management',
        'employee_custom_fields_management',
    ],
)
def put_employee_custom_field_by_employee_custom_field_id(
    employee_custom_field_id: UUID = Path(..., alias='employeeCustomFieldId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit an employee custom field record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/educations/{employeeEducationId}',
    description=""" __Activity name :__ DeleteEducationByEducationId

Delete an existing Education (for an employee)
 """,
    tags=[
        'education_record_management',
        'employee_education_management',
        'education_indication_management',
    ],
)
def delete_education_by_education_id(
    employee_education_id: UUID = Path(..., alias='employeeEducationId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a specific education
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/educations/{employeeEducationId}',
    description=""" __Activity name :__ GetEducationByEducationId  

Get the details of a single education
 """,
    tags=['employee_education_management', 'education_record_management'],
)
def get_education_by_education_id(
    employee_education_id: UUID = Path(..., alias='employeeEducationId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Details of a single education
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/educations/{employeeEducationId}',
    description=""" __Activity name :__ PutEducationByEducationId  

__Metadata :__  Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the PUT URL.

Edit the details of a education
 """,
    tags=[
        'education_record_management',
        'employee_education_management',
        'education_management',
    ],
)
def put_education_by_education_id(
    employee_education_id: UUID = Path(..., alias='employeeEducationId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit a Education
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/providers/employers/employees/employments/WageProposals',
    description=""" __Activity name :__ PatchWageProposalsByWageProposalId

Accept or reject wage proposals
 """,
    tags=['wage_management', 'employment_management', 'employer_related_operations'],
)
def patch_wage_proposals_by_wage_proposal_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Accept or reject wage proposals
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/employments/abpfunds/{abpFundId}',
    description=""" __Activity name :__ DeleteAbpFundByAbpFundId

Delete an existing abp fund record.
 """,
    tags=['abp_fund_management', 'employment_fund_management'],
)
def delete_abp_fund_by_abp_fund_id(
    abp_fund_id: UUID = Path(..., alias='abpFundId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a specific abp fund record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/abpfunds/{abpFundId}',
    description=""" __Activity name :__ GetAbpFundByAbpFundId

Get the details of an abp fund
 """,
    tags=['abp_fund_management'],
)
def get_abp_fund_by_abp_fund_id(
    abp_fund_id: UUID = Path(..., alias='abpFundId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Details of an abp fund
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/employments/abpfunds/{abpFundId}',
    description=""" __Activity name :__ PutAbpFundByAbpFundId

__Metadata :__ Possible options for fields of the type "metadata" can be acquired (GET) by adding `/metadata` to the PUT URL.
 """,
    tags=[
        'abp_fund_management',
        'employment_fund_management',
        'employment_fund_operations',
    ],
)
def put_abp_fund_by_abp_fund_id(
    abp_fund_id: UUID = Path(..., alias='abpFundId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit a abp fund record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/employments/attachmentsofearnings/{attachmentOfEarningsId}',
    description=""" __Activity name :__ DeleteAttachmentOfEarningsByAttachmentOfEarningsId

Delete an existing attachment of earnings record
 """,
    tags=['earnings_attachment_management'],
)
def delete_attachment_of_earnings_by_attachment_of_earnings_id(
    attachment_of_earnings_id: UUID = Path(..., alias='attachmentOfEarningsId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete an attachment of earnings record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/attachmentsofearnings/{attachmentOfEarningsId}',
    description=""" __Activity name :__ GetAttachmentOfEarningsByAttachmentOfEarningsId

Get the details of an attachment of earnings record
 """,
    tags=['earnings_attachment_management'],
)
def get_attachment_of_earnings_by_attachment_of_earnings_id(
    attachment_of_earnings_id: UUID = Path(..., alias='attachmentOfEarningsId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Get the details of an attachment of earnings record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/employments/attachmentsofearnings/{attachmentOfEarningsId}',
    description=""" __Activity name :__ PutAttachmentOfEarningsByAttachmentOfEarningsId

Update the details of a single attachment of earnings record

__Metadata :__ Possible values for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the URL
 """,
    tags=[
        'earnings_attachment_management',
        'wage_management',
        'employment_record_management',
    ],
)
def put_attachment_of_earnings_by_attachment_of_earnings_id(
    attachment_of_earnings_id: UUID = Path(..., alias='attachmentOfEarningsId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit the details of an attachment of earnings record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/employments/basesforcalculation/{baseforcalculationId}',
    description=""" __Activity name :__ DeleteBaseForCalculationByBaseForCalculationId

Delete an existing base for calculation
 """,
    tags=[
        'base_for_calculation_management',
        'provider_management',
        'custom_field_management',
        'benefit_in_kind_management',
        'fiscal_properties_management',
    ],
)
def delete_base_for_calculation_by_base_for_calculation_id(
    baseforcalculation_id: UUID = Path(..., alias='baseforcalculationId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a specific record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/basesforcalculation/{baseforcalculationId}',
    description=""" __Activity name :__ GetBaseForCalculationByBaseForCalculationId

Get the details of a base for employment fund calculations.
 """,
    tags=[
        'base_for_calculation_management',
        'employment_fund_management',
        'base_fund_calculation_management',
    ],
)
def get_base_for_calculation_by_base_for_calculation_id(
    baseforcalculation_id: UUID = Path(..., alias='baseforcalculationId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Details of an base for employment fund calculations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/employments/basesforcalculation/{baseforcalculationId}',
    description=""" __Activity name :__ PutBaseForCalculationByBaseForCalculationId

__Metadata :__ Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the PUT URL.

Edit the properties of a base for calculation
 """,
    tags=[
        'base_for_calculation_management',
        'base_fund_calculation_management',
        'employment_management',
    ],
)
def put_base_for_calculation_by_base_for_calculation_id(
    baseforcalculation_id: UUID = Path(..., alias='baseforcalculationId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Change the properties of a base for calculation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/employments/basesforemploymentfundcalculation/{baseforemploymentfundcalculationId}',
    description=""" __Activity name :__ DeleteBaseForEmploymentFundCalculationByBaseForEmploymentFundCalculationId

Delete an existing base for employment fund calculation
 """,
    tags=[
        'base_for_calculation_management',
        'base_fund_calculation_management',
        'employment_management',
    ],
)
def delete_record_by_id(
    baseforemploymentfundcalculation_id: UUID = Path(
        ..., alias='baseforemploymentfundcalculationId'
    ),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a specific record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/basesforemploymentfundcalculation/{baseforemploymentfundcalculationId}',
    description=""" __Activity name :__ GetBaseForEmploymentFundCalculationByBaseForEmploymentFundCalculationId

Get the details of a base for employment fund calculations.
 """,
    tags=[
        'base_for_calculation_management',
        'base_fund_calculation_management',
        'employment_fund_management',
    ],
)
def get_employment_fund_calculation_base_details(
    baseforemploymentfundcalculation_id: UUID = Path(
        ..., alias='baseforemploymentfundcalculationId'
    ),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Details of an base for employment fund calculations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/employments/basesforemploymentfundcalculation/{baseforemploymentfundcalculationId}',
    description=""" __Activity name :__ PutBaseForEmploymentFundCalculationByBaseForEmploymentFundCalculationId

__Metadata :__ Possible options for fields of the type "metadata" can be acquired (GET) by adding `/metadata` to the PUT URL.

Edit the properties of a base for employment calculation
 """,
    tags=[
        'base_for_calculation_management',
        'employment_fund_management',
        'base_fund_calculation_management',
    ],
)
def update_base_employment_fund_calculation_properties(
    baseforemploymentfundcalculation_id: UUID = Path(
        ..., alias='baseforemploymentfundcalculationId'
    ),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Change the properties of a base for employment fund calculation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/employments/benefitsAndDeductions/{benefitsanddeductionsId}',
    description=""" __Activity name :__ DeleteBenefitsAndDeductionsByBenefitsAndDeductionsId

Delete a benefit or deduction for the employment
 """,
    tags=['benefits_and_deductions_management'],
)
def delete_benefits_and_deductions_by_benefits_and_deductions_id(
    benefitsanddeductions_id: UUID = Path(..., alias='benefitsanddeductionsId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a specific benefit or deduction record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/benefitsAndDeductions/{benefitsanddeductionsId}',
    description=""" __Activity name :__ GetBenefitsAndDeductionsBybenefitsAndDeductionsId

Get a benefit or deduction for the employment
 """,
    tags=['benefits_and_deductions_management', 'employer_related_operations'],
)
def get_benefits_and_deductions_bybenefits_and_deductions_id(
    benefitsanddeductions_id: UUID = Path(..., alias='benefitsanddeductionsId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Detail of a benefit or deduction record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/employments/benefitsAndDeductions/{benefitsanddeductionsId}',
    description=""" __Activity name :__ PutBenefitsAndDeductionsByBenefitsAndDeductionsId

Update a benefit or deduction for the employment
__Metadata :__ Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the POST URL.
 """,
    tags=['benefits_and_deductions_management'],
)
def put_benefits_and_deductions_by_benefits_and_deductions_id(
    benefitsanddeductions_id: UUID = Path(..., alias='benefitsanddeductionsId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit the details of a benefit or deduction record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/employments/benefitsinkind/{benefitInKindId}',
    description=""" __Activity name :__ DeleteBenefitInKindByBenefitInKindId

Delete an existing benefit in kind record
 """,
    tags=['benefit_in_kind_management', 'benefit_in_kind_type_management'],
)
def delete_benefit_in_kind_by_benefit_in_kind_id(
    benefit_in_kind_id: UUID = Path(..., alias='benefitInKindId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a benefit in kind record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/benefitsinkind/{benefitInKindId}',
    description=""" __Activity name :__ GetBenefitInKindByBenefitInKindId

Get the details of a benefit in kind
 """,
    tags=['benefit_in_kind_management', 'benefit_in_kind_type_management'],
)
def get_benefit_in_kind_by_benefit_in_kind_id(
    benefit_in_kind_id: UUID = Path(..., alias='benefitInKindId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Details of an benefit in kind
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/employments/benefitsinkind/{benefitInKindId}',
    description=""" __Activity name :__ PutBenefitInKindByBenefitInKindId

__Metadata :__ Possible options for fields of the type 'metadata' can be acquired (GET) by adding ` / metadata ` to the PUT URL.
 """,
    tags=['benefit_in_kind_management', 'benefit_in_kind_type_management'],
)
def put_benefit_in_kind_by_benefit_in_kind_id(
    benefit_in_kind_id: UUID = Path(..., alias='benefitInKindId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit a benefit in kind record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/employments/companycars/{companyCarId}',
    description=""" __Activity name:__ DeleteCompanyCarByCompanyCarId

Delete a company car record for the employment

Please note this resource is related for the registration of the company car for HRM purposes. This resource is NOT related to the registration of the fiscal company car(s) which is used in salary calculations.
 """,
    tags=['company_car_management', 'fiscal_company_management'],
)
def delete_company_car_by_company_car_id(
    company_car_id: UUID = Path(..., alias='companyCarId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a specific company car record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/companycars/{companyCarId}',
    description=""" __Activity name:__ GetCompanyCarByCompanyCarId


 Get the details of a company car 


Please note this resource is related for the registration of the company car for HRM purposes. This resource is NOT related to the registration of the fiscal company car(s) which is used in salary calculations.
 """,
    tags=['company_car_management', 'company_information_retrieval'],
)
def get_company_car_by_company_car_id(
    company_car_id: UUID = Path(..., alias='companyCarId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Details of a company car record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/employments/companycars/{companyCarId}',
    description=""" __Activity name:__ PutCompanyCarByCompanyCarId


 Edit the details for a company car record.


Please note this resource is related for the registration of the company car for HRM purposes. This resource is NOT related to the registration of the fiscal company car(s) which is used in salary calculations.


 __Metadata :__ Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the PUT URL.
 """,
    tags=['company_car_management'],
)
def put_company_car_by_company_car_id(
    company_car_id: UUID = Path(..., alias='companyCarId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit the details of a company car record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/employments/costperhour/{costperhourId}',
    description=""" __Activity name :__ DeleteCostPerHourByCostPerHourId

Delete an existing cost per hour record
 """,
    tags=['cost_per_hour_management', 'cost_management'],
)
def delete_cost_per_hour_by_cost_per_hour_id(
    cost_per_hour_id: UUID = Query(..., alias='costPerHourId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
    costperhour_id: str = Path(..., alias='costperhourId'),
):
    """
    Delete a cost per hour record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/costperhour/{costperhourId}',
    description=""" __Activity name :__ GetCostPerHourByCostPerHourId

Get the details of a cost per hour record
 """,
    tags=['cost_per_hour_management', 'cost_management', 'wage_management'],
)
def get_cost_per_hour_by_cost_per_hour_id(
    cost_per_hour_id: UUID = Query(..., alias='costPerHourId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    costperhour_id: str = Path(..., alias='costperhourId'),
):
    """
    Details of cost per hour
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/employments/costperhour/{costperhourId}',
    description=""" __Activity name :__ PutCostperhourByCostperhourId

__Metadata :__ No metadata.
 """,
    tags=['cost_per_hour_management', 'cost_management', 'wage_management'],
)
def put_costperhour_by_costperhour_id(
    cost_per_hour_id: UUID = Query(..., alias='costPerHourId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
    costperhour_id: str = Path(..., alias='costperhourId'),
):
    """
    Edit a cost per hour record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/employments/customfields/{employmentCustomFieldId}',
    description=""" __Activity name :__ DeleteEmploymentCustomFieldByEmploymentCustomFieldId

Delete an existing custom field record
 """,
    tags=[
        'custom_field_management',
        'employment_custom_field_management',
        'employee_custom_field_management',
        'employment_custom_fields_management',
    ],
)
def delete_employment_custom_field_by_employment_custom_field_id(
    employment_custom_field_id: UUID = Path(..., alias='employmentCustomFieldId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete an employment custom field record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/customfields/{employmentCustomFieldId}',
    description=""" __Activity name :__ GetEmploymentCustomFieldByEmploymentCustomFieldId

Get the details of a custom field
 """,
    tags=[
        'employment_custom_field_management',
        'employee_custom_field_management',
        'employment_custom_fields_management',
    ],
)
def get_employment_custom_field_by_employment_custom_field_id(
    employment_custom_field_id: UUID = Path(..., alias='employmentCustomFieldId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Details of an employment custom field
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/employments/customfields/{employmentCustomFieldId}',
    description=""" __Activity name :__ PutEmploymentCustomFieldByEmploymentCustomFieldId

__Metadata :__ Possible options for fields of the type 'metadata' can be acquired (GET) by adding ` / metadata ` to the PUT URL.
 """,
    tags=[
        'employment_custom_field_management',
        'custom_field_management',
        'employee_custom_field_management',
        'employment_custom_fields_management',
    ],
)
def put_employment_custom_field_by_employment_custom_field_id(
    employment_custom_field_id: UUID = Path(..., alias='employmentCustomFieldId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit an employment custom field record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/employments/customnotifications/{customNotificationId}',
    description=""" __Activity name :__ DeleteCustomNotificationByCustomNotificationId

Delete an existing custom notification record
 """,
    tags=['custom_notification_management', 'custom_notifications_management'],
)
def delete_custom_notification_by_custom_notification_id(
    custom_notification_id: UUID = Path(..., alias='customNotificationId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a custom notification record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/customnotifications/{customNotificationId}',
    description=""" __Activity name :__ GetCustomNotificationByCustomNotificationId

Get the details of a custom notification
 """,
    tags=['custom_notification_management', 'custom_notifications_management'],
)
def get_custom_notification_by_custom_notification_id(
    custom_notification_id: UUID = Path(..., alias='customNotificationId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Details of a custom notification
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/employments/customnotifications/{customNotificationId}',
    description=""" __Activity name :__ PutCustomNotificationByCustomNotificationId

__Metadata :__ Possible options for fields of the type 'metadata' can be acquired (GET) by adding ` / metadata ` to the PUT URL.
 """,
    tags=['custom_notification_management', 'custom_notifications_management'],
)
def put_custom_notification_by_custom_notification_id(
    custom_notification_id: UUID = Path(..., alias='customNotificationId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit a custom notification record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/providers/employers/employees/employments/declarations/process',
    description=""" __Activity name :__ PatchProcessDeclarationsByDeclarationId

Process approved declarations into the payrolling data.

Please check the description of the status-field in this resource to read about the workflow of declarations.
 """,
    tags=['declaration_management', 'declarations_management'],
)
def patch_process_declarations_by_declaration_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    )
):
    """
    Process approved declarations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/providers/employers/employees/employments/declarations/review',
    description=""" __Activity name :__ PatchReviewDeclarationsByDeclarationIds

Review (accept or reject) open declarations

Please check the description of the status-field in this resource to read about the workflow of declarations.
 """,
    tags=['declaration_management', 'declarations_management', 'employment_management'],
)
def patch_review_declarations_by_declaration_ids(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Review (accept or reject) open declarations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/declarations/{declarationId}',
    description=""" __Activity name :__ GetDeclarationsByDeclarationId

Get the details of a declaration
 """,
    tags=['declaration_management', 'declarations_management'],
)
def get_declarations_by_declaration_id(
    declaration_id: UUID = Path(..., alias='declarationId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Details of a declaration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/declarations/{declarationId}/attachment',
    description=""" __Activity name :__ GetAttachmentByDeclarationId

Download the attachment (via Qwoater) for the given declarationId. In case no attachment is know the service will return a 404.
 """,
    tags=[
        'declaration_management',
        'download_request_management',
        'document_management',
    ],
)
def get_attachment_by_declaration_id(
    declaration_id: UUID = Path(..., alias='declarationId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
):
    """
    Download attachment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/declarations/{declarationId}/audittrail',
    description=""" __Activity name :__ GetDeclarationAuditTrailByDeclarationId

Get the audit trail of a declaration
 """,
    tags=[
        'declaration_management',
        'audit_trail_management',
        'declarations_management',
        'audit_and_assessment_handling',
    ],
)
def get_declaration_audit_trail_by_declaration_id(
    declaration_id: UUID = Path(..., alias='declarationId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Audit trail of a declaration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/employments/deviatingawfcontributions/{deviatingAwfContributionId}',
    description=""" __Activity name:__ DeleteDeviatingAwfContributionByDeviatingAwfContributionId

Delete a Deviating AWF contribution record for the employment
 """,
    tags=['deviating_awf_contribution_management', 'deviating_records_management'],
)
def delete_deviating_awf_contribution_by_id(
    deviating_awf_contribution_id: UUID = Path(..., alias='deviatingAwfContributionId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a specific Deviating AWF contributions record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/deviatingawfcontributions/{deviatingAwfContributionId}',
    description=""" __Activity name:__ GetDeviatingAwfContributionByDeviatingAwfContributionId

Get the details of a Deviating AWF contributions record
 """,
    tags=['deviating_awf_contribution_management', 'deviating_records_management'],
)
def get_deviating_awf_contribution_by_deviating_awf_contribution_id(
    deviating_awf_contribution_id: UUID = Path(..., alias='deviatingAwfContributionId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Details of a Deviating AWF contributions record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/employments/deviatingawfcontributions/{deviatingAwfContributionId}',
    description=""" __Activity name:__ PutDeviatingAwfContributionByDeviatingAwfContributionId
__Metadata :__ Possible options for fields of the type 'metadata' can be acquired (GET) by adding ` / metadata ` to the PUT URL.

Edit the details for a Deviating AWF contribution record
 """,
    tags=['deviating_awf_contribution_management', 'deviating_records_management'],
)
def put_deviating_awf_contribution_by_deviating_awf_contribution_id(
    deviating_awf_contribution_id: UUID = Path(..., alias='deviatingAwfContributionId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit the details of a Deviating AWF contributions record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/employments/deviatinghourlywages/{deviatingHourlyWageId}',
    description=""" __Activity name :__ DeleteDeviatingHourlyWageByDeviatingHourlyWageId

Delete an existing deviating hourly wage record
 """,
    tags=[
        'deviating_hourly_wage_management',
        'deviating_records_management',
        'wage_management',
    ],
)
def delete_deviating_hourly_wage_by_deviating_hourly_wage_id(
    deviating_hourly_wage_id: UUID = Path(..., alias='deviatingHourlyWageId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a deviating hourly wage record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/deviatinghourlywages/{deviatingHourlyWageId}',
    description=""" __Activity name :__ GetDeviatingHourlyWageByDeviatingHourlyWageId

Get the details of a deviating hourly wage
 """,
    tags=[
        'deviating_hourly_wage_management',
        'wage_management',
        'deviating_records_management',
    ],
)
def get_deviating_hourly_wage_by_deviating_hourly_wage_id(
    deviating_hourly_wage_id: UUID = Path(..., alias='deviatingHourlyWageId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Details of an deviating hourly wage
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/employments/deviatinghourlywages/{deviatingHourlyWageId}',
    description=""" __Activity name :__ PutDeviatingHourlyWageByDeviatingHourlyWageId

__Metadata :__ No metadata as `payrollComponent` is read only in the PUT.
 """,
    tags=[
        'deviating_hourly_wage_management',
        'deviating_records_management',
        'wage_management',
    ],
)
def put_deviating_hourly_wage_by_deviating_hourly_wage_id(
    deviating_hourly_wage_id: UUID = Path(..., alias='deviatingHourlyWageId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit a deviating hourly wage record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/employments/employmentfunds/{employmentFundId}',
    description=""" __Activity name :__ DeleteEmploymentFundByEmploymentFundId

Delete an existing employment fund record.
 """,
    tags=['employment_fund_management', 'employment_fund_operations'],
)
def delete_employment_fund_by_employment_fund_id(
    employment_fund_id: UUID = Path(..., alias='employmentFundId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a specific employment fund record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/employmentfunds/{employmentFundId}',
    description=""" __Activity name :__ GetEmploymentFundByEmploymentFundId

Get the details of an employment fund
 """,
    tags=['employment_fund_management', 'employment_fund_operations'],
)
def get_employment_fund_by_employment_fund_id(
    employment_fund_id: UUID = Path(..., alias='employmentFundId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Details of an employment fund
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/employments/employmentfunds/{employmentFundId}',
    description=""" __Activity name :__ PutEmploymentFundByEmploymentFundId

__Metadata :__ Possible options for fields of the type "metadata" can be acquired (GET) by adding `/metadata` to the PUT URL.
 """,
    tags=['employment_fund_management', 'employment_fund_operations'],
)
def put_employment_fund_by_employment_fund_id(
    employment_fund_id: UUID = Path(..., alias='employmentFundId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit a employment fund record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/employments/fiscalcompanycars/{fiscalCompanyCarId}',
    description=""" __Activity name:__ DeleteFiscalCompanyCarByFiscalCompanyCarId

Delete a fiscal company car record for the employment

Please note this resource is related for the registration of the company car for tax purposes. This is NOT directly related to the registration of the company car(s) related to the HRM-module Verstrekking
 """,
    tags=['company_car_management', 'fiscal_company_management'],
)
def delete_fiscal_company_car_by_fiscal_company_car_id(
    fiscal_company_car_id: UUID = Path(..., alias='fiscalCompanyCarId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a specific fiscal company car record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/fiscalcompanycars/{fiscalCompanyCarId}',
    description=""" __Activity name:__ GetFiscalCompanyCarByFiscalCompanyCarId


 Get the details of fiscal company car 


 Please note this resource is related for the registration of the company car for tax purposes.
 This is NOT directly related to the registration of the company car(s) related to the HRM-module Verstrekking
 """,
    tags=['company_car_management', 'fiscal_company_management'],
)
def get_fiscal_company_car_by_fiscal_company_car_id(
    fiscal_company_car_id: UUID = Path(..., alias='fiscalCompanyCarId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Details of a fiscal company car record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/employments/fiscalcompanycars/{fiscalCompanyCarId}',
    description=""" __Activity name:__ PutFiscalCompanyCarByFiscalCompanyCarId


 Edit the details for a fiscal company car record.


 Please note this resource is related for the registration of the company car for tax purposes.
 This is NOT directly related to the registration of the company car(s) related to the HRM-module Verstrekking


 __Metadata :__ Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the PUT URL.
 """,
    tags=['company_car_management', 'fiscal_company_management'],
)
def put_fiscal_company_car_by_fiscal_company_car_id(
    fiscal_company_car_id: UUID = Path(..., alias='fiscalCompanyCarId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit the details of a fiscal company car record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/employments/fiscalproperties/{fiscalPropertiesId}',
    description=""" __Activity name:__ DeleteFiscalPropertiesByFiscalPropertiesId

Delete a fiscal properties record for the employment
 """,
    tags=['fiscal_properties_management', 'fiscal_property_management'],
)
def delete_fiscal_properties_by_fiscal_properties_id(
    fiscal_properties_id: UUID = Path(..., alias='fiscalPropertiesId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a specific fiscal properties record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/fiscalproperties/{fiscalPropertiesId}',
    description=""" __Activity name:__ GetFiscalPropertiesByFiscalPropertiesId

Get the details of fiscal
 """,
    tags=[
        'fiscal_properties_management',
        'fiscal_company_management',
        'fiscal_property_management',
    ],
)
def get_fiscal_properties_by_fiscal_properties_id(
    fiscal_properties_id: UUID = Path(..., alias='fiscalPropertiesId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Details of a fiscal record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/employments/fiscalproperties/{fiscalPropertiesId}',
    description=""" __Activity name:__ PutFiscalPropertiesByFiscalPropertiesId

Edit the details for a fiscal properties record

Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the PUT URL.
 """,
    tags=['fiscal_properties_management', 'fiscal_company_management'],
)
def put_fiscal_properties_by_fiscal_properties_id(
    fiscal_properties_id: UUID = Path(..., alias='fiscalPropertiesId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit the details of a fiscal record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/employments/healthcareinsuranceactconfigurations/{healthcareInsuranceActConfigurationId}',
    description=""" __Activity name:__ DeleteHealthcareInsuranceActConfigurationByHealthcareInsuranceActConfigurationId

Delete a Healthcare Insurance Act record for the employment
 """,
    tags=['healthcare_insurance_act_management', 'healthcare_insurance_management'],
)
def delete_healthcare_insurance_act_record(
    healthcare_insurance_act_configuration_id: UUID = Path(
        ..., alias='healthcareInsuranceActConfigurationId'
    ),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a specific Healthcare Insurance Act record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/healthcareinsuranceactconfigurations/{healthcareInsuranceActConfigurationId}',
    description=""" __Activity name:__ GetHealthcareInsuranceActConfigurationByHealthcareInsuranceActConfigurationId

Get the details of a Healthcare Insurance Act configuration record
 """,
    tags=['healthcare_insurance_act_management', 'healthcare_insurance_management'],
)
def retrieve_healthcare_insurance_act_details_by_id(
    healthcare_insurance_act_configuration_id: UUID = Path(
        ..., alias='healthcareInsuranceActConfigurationId'
    ),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Details of a Healthcare Insurance Act record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/employments/healthcareinsuranceactconfigurations/{healthcareInsuranceActConfigurationId}',
    description=""" __Activity name:__ PutHealthcareInsuranceActConfigurationByHealthcareInsuranceActConfigurationId

Edit the details for a Healthcare Insurance Act record

__Metadata :__ Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the PUT URL.
 """,
    tags=['healthcare_insurance_act_management', 'healthcare_insurance_management'],
)
def edit_healthcare_insurance_act_record(
    healthcare_insurance_act_configuration_id: UUID = Path(
        ..., alias='healthcareInsuranceActConfigurationId'
    ),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit the details of a Healthcare Insurance Act record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/employments/journalallocations/{journalAllocationId}',
    description=""" __Activity name:__ DeleteJournalAllocationByJournalAllocationId

Delete a journal allocation record
 """,
    tags=['journal_allocation_management', 'employment_management'],
)
def delete_journal_allocation_by_journal_allocation_id(
    journal_allocation_id: UUID = Path(..., alias='journalAllocationId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a specific journal allocation record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/journalallocations/{journalAllocationId}',
    description=""" __Activity name:__ GetJournalAllocationByJournalAllocationId

Get the details of a financial journal allocation record (journaliseren module). 
 """,
    tags=['journal_allocation_management'],
)
def get_journal_allocation_by_journal_allocation_id(
    journal_allocation_id: UUID = Path(..., alias='journalAllocationId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Details of a journal allocation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/employments/journalallocations/{journalAllocationId}',
    description=""" __Activity name:__ PutJournalAllocationByJournalAllocationId

Edit the details of a financial journal allocation record (journaliseren module)

* Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the PUT URL.
* Possible options dependent on a specific `startPeriod` can be acquired via `/metadata/year/{year}/period/{period}`
 """,
    tags=['journal_allocation_management', 'employment_record_management'],
)
def put_journal_allocation_by_journal_allocation_id(
    journal_allocation_id: UUID = Path(..., alias='journalAllocationId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit the details of a journal allocation record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/employments/leave/{leaveId}',
    description=""" __Activity name :__ DeleteLeaveByLeaveId

Delete an existing Leave record
 """,
    tags=['leave_management', 'leave_management_operations', 'absence_management'],
)
def delete_leave_by_leave_id(
    leave_id: UUID = Path(..., alias='leaveId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a specific leave record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/leave/{leaveId}',
    description=""" __Activity name :__ GetLeaveByLeaveId

Returns one leave entry (either addition or subtraction). """,
    tags=['leave_management', 'absence_management', 'leave_management_operations'],
)
def get_leave_by_leave_id(
    leave_id: UUID = Path(..., alias='leaveId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    A single leave entry
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/employments/leave/{leaveId}',
    description=""" __Activity name :__ PutLeaveByLeaveId

Edit the details of a leave
 """,
    tags=['leave_management', 'leave_management_operations'],
)
def put_leave_by_leave_id(
    leave_id: UUID = Path(..., alias='leaveId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit the details of a leave
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/leave/{leaveId}/metadata',
    description=""" __Activity name :__ GetLeaveMetadataByLeaveId

Returns the metadata values for all the metadata fields.
 """,
    tags=['leave_management', 'leave_policy_management', 'leave_management_operations'],
)
def get_leave_metadata_by_leave_id(
    leave_id: UUID = Path(..., alias='leaveId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Get the values for the metadata fields
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/providers/employers/employees/employments/leaverequests',
    description=""" __Activity name :__ PatchLeaveRequestsByLeaveRequestIds

This endpoints changes the status of the list of leave requests provided in the request body to the provided status. The leave requests are processed one by one. The leave requests that had no error's will be commited to the database while those with an error will be skipped. If an error occured the service will return a 400 bad request with a message explaining what error occured for what ID (GUID).  The leave requests that where processed succesfully will not be returned in te response.
 """,
    tags=['leave_management', 'leave_management_operations'],
)
def patch_leave_requests_by_leave_request_ids(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Change the status of leave requests
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/leaverequests/{leaveRequestId}',
    description=""" __Activity name :__ GetLeaveRequestByLeaveRequestId

Get the details of a single leave request
 """,
    tags=['leave_management', 'leave_management_operations'],
)
def get_leave_request_by_leave_request_id(
    leave_request_id: UUID = Path(..., alias='leaveRequestId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Details of a leave request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/employments/leaverequests/{leaveRequestId}',
    description=""" __Activity name :__ PutLeaveRequestByLeaveRequestId
   

Change the details of a Leave request

__Important:__ A PUT is only allowed when the leave requests is in the status "submitted"/"ingediend". Only the field of `commentHandler`  may be editied in other statuses.
 """,
    tags=['leave_management', 'leave_management_operations'],
)
def put_leave_request_by_leave_request_id(
    leave_request_id: UUID = Path(..., alias='leaveRequestId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Change the details of a leave request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/employments/notes/{noteId}',
    description=""" __Activity name :__ DeleteEmploymentNoteByNoteId

Delete an existing note record
 """,
    tags=[
        'employment_note_management',
        'employee_note_management',
        'employment_notes_management',
    ],
)
def delete_employment_note_by_note_id(
    note_id: UUID = Path(..., alias='noteId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete an employment note record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/notes/{noteId}',
    description=""" __Activity name :__ GetEmploymentNoteByNoteId

Get the details of an employment note
 """,
    tags=[
        'employment_note_management',
        'employment_notes_management',
        'employee_note_management',
    ],
)
def get_employment_note_by_note_id(
    note_id: UUID = Path(..., alias='noteId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Details of an employment note
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/employments/notes/{noteId}',
    description=""" __Activity name :__ PutEmploymentNoteByNoteId

__Metadata :__ Possible options for fields of the type 'metadata' can be acquired (GET) by adding ` / metadata ` to the PUT URL.
 """,
    tags=[
        'employment_note_management',
        'employment_notes_management',
        'employee_note_management',
    ],
)
def put_employment_note_by_note_id(
    note_id: UUID = Path(..., alias='noteId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit an employment note record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/employments/organizationalentities/{organizationalEntityId}',
    description=""" __Activity name:__ DeleteOrganizationalEntityByOrganizationalEntityId

Delete a organizational entity for the employment
 """,
    tags=['organizational_entity_management', 'provider_management'],
)
def delete_organizational_entity_by_organizational_entity_id(
    organizational_entity_id: UUID = Path(..., alias='organizationalEntityId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a specific organizational entity record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/organizationalentities/{organizationalEntityId}',
    description=""" __Activity name:__ GetOrganizationalEntityByOrganizationalEntityId

Get the details of organizational entity
 """,
    tags=['organizational_entity_management', 'employer_data_retrieval'],
)
def get_organizational_entity_by_organizational_entity_id(
    organizational_entity_id: UUID = Path(..., alias='organizationalEntityId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Details of an organizational entity
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/employments/organizationalentities/{organizationalEntityId}',
    description=""" __Activity name:__ PutOrganizationalEntityByOrganizationalEntityId

Edit the details for an organizational entity

Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the PUT URL.
 """,
    tags=['organizational_entity_management'],
)
def put_organizational_entity_by_organizational_entity_id(
    organizational_entity_id: UUID = Path(..., alias='organizationalEntityId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit the details of an organizational entity
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/employments/otherPayrollVariables/{otherPayrollVariablesId}',
    description=""" __Activity name :__ DeleteOtherPayrollVariablesByOtherPayrollVariablesId

Delete an existing other payroll variables record (for an employment)
 """,
    tags=['payroll_variables_management', 'employee_management'],
)
def delete_other_payroll_variables_by_other_payroll_variables_id(
    other_payroll_variables_id: UUID = Path(..., alias='otherPayrollVariablesId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a specific other payroll variables record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/otherPayrollVariables/{otherPayrollVariablesId}',
    description=""" __Activity name :__ GetOtherPayrollVariablesByOtherPayrollVariablesId

Get the details of other payroll variables for an employment
 """,
    tags=[
        'payroll_variables_management',
        'wage_management',
        'employment_record_management',
        'payroll_data_management',
    ],
)
def get_other_payroll_variables_by_other_payroll_variables_id(
    other_payroll_variables_id: UUID = Path(..., alias='otherPayrollVariablesId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Details of other payroll variables for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/employments/otherPayrollVariables/{otherPayrollVariablesId}',
    description=""" __Activity name :__ PutOtherPayrollVariablesByOtherPayrollVariablesId

Change the details of an other payroll variables record

__Metadata :__ Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the PUT URL.
 """,
    tags=[
        'payroll_variables_management',
        'payroll_variable_management',
        'wage_management',
    ],
)
def put_other_payroll_variables_by_other_payroll_variables_id(
    other_payroll_variables_id: UUID = Path(..., alias='otherPayrollVariablesId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Change the details of an other payroll variables record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/employments/paymentinformationnonsepa/{paymentInformationNonSepaId}',
    description=""" __Activity name :__ DeletePaymentInformationNonSepaByPaymentInformationNonSepaId

Delete a payment information non-SEPA record (for an employment)
 """,
    tags=['payment_information_management', 'provider_management'],
)
def delete_non_sepa_payment_info_by_id(
    payment_information_non_sepa_id: UUID = Path(
        ..., alias='paymentInformationNonSepaId'
    ),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a payment information non-SEPA record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/paymentinformationnonsepa/{paymentInformationNonSepaId}',
    description=""" __Activity name :__ GetPaymentInformationNonSepaByPaymentInformationNonSepaId

Get the detail of a payment information non-SEPA record.
For a specific payroll component, the record indicates to which IBAN account number it should be related for the purpose of outgoing payments. 
This includes, but is not limited to, the payment of wages for an employment.
For each payroll component there can only be one outgoing payment record per employment.
 """,
    tags=['payment_information_management'],
)
def get_non_sepa_payment_info_by_id(
    payment_information_non_sepa_id: UUID = Path(
        ..., alias='paymentInformationNonSepaId'
    ),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Get the details of a payment information non-SEPA
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/employments/paymentinformationnonsepa/{paymentInformationNonSepaId}',
    description=""" __Activity name :__ PutPaymentInformationNonSepaByPaymentInformationNonSepaId

Edit an existing payment information non-SEPA record (for an employment).
For each unique payroll component there can only be one payment record per employment.

__Metadata :__ Possible values for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the URL
 """,
    tags=['payment_information_management'],
)
def change_payment_info_non_sepa_details(
    payment_information_non_sepa_id: UUID = Path(
        ..., alias='paymentInformationNonSepaId'
    ),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Change the details of a payment information non-SEPA
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/employments/paymentinformationsepa/{paymentInformationSepaId}',
    description=""" __Activity name :__ DeletePaymentInformationSepaByPaymentInformationSepaId

Delete an existing SEPA payment-record (for an employment)
 """,
    tags=['payment_information_management', 'sepa_file_operations'],
)
def delete_payment_information_sepa_bypayment_information_sepa_id(
    payment_information_sepa_id: UUID = Path(..., alias='paymentInformationSepaId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a specific SEPA payment-record record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/paymentinformationsepa/{paymentInformationSepaId}',
    description=""" __Activity name :__ GetPaymentInformationSepaBypaymentInformationSepaId

Get the detail of a payment information SEPA record.
 
For a specific payroll component, the record indicates to which IBAN account number it should be related for the purpose of outgoing payments.  This includes, but is not limited to, the payment of wages for an employment. For each payroll component there can only be one outgoing payment record per employment.
 """,
    tags=['payment_information_management'],
)
def get_payment_information_sepa_bypayment_information_sepa_id(
    payment_information_sepa_id: UUID = Path(..., alias='paymentInformationSepaId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Get the details of a payment information sepa
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/employments/paymentinformationsepa/{paymentInformationSepaId}',
    description=""" __Activity name :__ PutPaymentInformationSepaByPaymentInformationSepaId

Edit an existing SEPA payment-record (for an employment).
For each unique payroll component there can only be one payment record per employment.
Possible values for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the URL
 """,
    tags=['payment_information_management'],
)
def put_payment_information_sepa_by_payment_information_sepa_id(
    payment_information_sepa_id: UUID = Path(..., alias='paymentInformationSepaId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    change the details of a payment information sepa
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/employments/paymentinformationsepaseparatepayments/{paymentInformationSepaSeparatePaymentId}',
    description=""" __Activity name :__ DeletePaymentInformationSepaSeparatePaymentByPaymentInformationSepaSeparatePaymentId

Delete an existing SEPA payment-record (for an employment)
 """,
    tags=['payment_information_management', 'sepa_file_operations'],
)
def delete_sepa_payment_record(
    payment_information_sepa_separate_payment_id: UUID = Path(
        ..., alias='paymentInformationSepaSeparatePaymentId'
    ),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a payment information SEPA separate payment record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/paymentinformationsepaseparatepayments/{paymentInformationSepaSeparatePaymentId}',
    description=""" __Activity name :__ GetPaymentInformationSepaSeparatePaymentByPaymentInformationSepaSeparatePaymentId

Get the detail of a payment information SEPA record. For a specific payroll component, the record indicates to which IBAN account number it should be related for the purpose of outgoing payments.  This includes, but is not limited to, the payment of wages for an employment.  For each payroll component there can only be one outgoing payment record per employment.
 """,
    tags=['payment_information_management', 'sepa_file_operations'],
)
def get_sepa_payment_info_by_id(
    payment_information_sepa_separate_payment_id: UUID = Path(
        ..., alias='paymentInformationSepaSeparatePaymentId'
    ),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Get the details of a payment information SEPA separate payment record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/employments/paymentinformationsepaseparatepayments/{paymentInformationSepaSeparatePaymentId}',
    description=""" __Activity name :__ PutPaymentInformationSepaSeparatePaymentByPaymentInformationSepaSeparatePaymentId

Edit an existing separate payment-record (for an employment). For each unique payroll component there can only be one payment record per employment.

__Metadata :__ Not applicable for this resource.
 """,
    tags=['payment_information_management'],
)
def edit_payment_info_sepa_separate_payment(
    payment_information_sepa_separate_payment_id: UUID = Path(
        ..., alias='paymentInformationSepaSeparatePaymentId'
    ),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit the details of a payment information separate payment record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/employments/payrollperioddata/{payrollperioddataId}',
    description=""" __Activity name:__ DeletePayrollPeriodDataByPayrollPeriodDataId

Delete a payroll period data record for the employment
 """,
    tags=['payroll_period_management', 'payroll_data_management'],
)
def delete_payroll_period_data_by_payroll_period_data_id(
    payrollperioddata_id: UUID = Path(..., alias='payrollperioddataId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a specific payroll period data record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/payrollperioddata/{payrollperioddataId}',
    description=""" __Activity name :__ GetPayrollPeriodDataByPayrollPeriodDataId <br/> <br/>         Get the details of payroll period data
 """,
    tags=['payroll_period_management', 'payroll_data_management'],
)
def get_payroll_period_data_by_payroll_period_data_id(
    payrollperioddata_id: UUID = Path(..., alias='payrollperioddataId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Details of a payroll period data
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/employments/payrollperioddata/{payrollperioddataId}',
    description=""" __Activity name :__ PutPayrollPeriodDataByPayrollPeriodDataId <br/> <br/>         Edit the details for payroll period data <br/> <br/> __Metadata :__ <br/> Possible values for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the PUT URL <br/> Possible values for fields of the type 'metadata' that are PERIOD-specific can be acquired (GET) by adding `/metadata/year/{year}/period/{periodNumber}` to the PUT URL     <br/>
 """,
    tags=[
        'payroll_period_management',
        'payroll_data_management',
        'employment_management',
    ],
)
def put_payroll_period_data_by_payroll_period_data_id(
    payrollperioddata_id: UUID = Path(..., alias='payrollperioddataId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit the details of an payroll period data
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/employments/pensionbenefits/{pensionBenefitId}',
    description=""" __Activity name :__ DeletePensionBenefitByPensionBenefitId

Delete an existing pension benefit record
 """,
    tags=['pension_benefit_management', 'pension_benefit_operations'],
)
def delete_pension_benefit_by_pension_benefit_id(
    pension_benefit_id: UUID = Path(..., alias='pensionBenefitId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a pension benefit record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/pensionbenefits/{pensionBenefitId}',
    description=""" __Activity name :__ GetPensionBenefitByPensionBenefitId

Get the details of a pension benefit
 """,
    tags=['pension_benefit_management', 'pension_benefit_operations'],
)
def get_pension_benefit_by_pension_benefit_id(
    pension_benefit_id: UUID = Path(..., alias='pensionBenefitId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Details of an pension benefit
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/employments/pensionbenefits/{pensionBenefitId}',
    description=""" __Activity name :__ PutPensionBenefitByPensionBenefitId

__Metadata :__ No metadata
 """,
    tags=['pension_benefit_management', 'pension_benefit_operations'],
)
def put_pension_benefit_by_pension_benefit_id(
    pension_benefit_id: UUID = Path(..., alias='pensionBenefitId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit a pension benefit record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/employments/protectedearnings/{protectedEarningsId}',
    description=""" __Activity name :__ DeleteProtectedEarningsByProtectedEarningsId

Delete an existing protected earnings record
 """,
    tags=['protected_earnings_operations'],
)
def delete_protected_earnings_by_protected_earnings_id(
    protected_earnings_id: UUID = Path(..., alias='protectedEarningsId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete an protected earnings record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/protectedearnings/{protectedEarningsId}',
    description=""" __Activity name :__ GetProtectedEarningsByProtectedEarningsId

Get the details of an protected earnings record
 """,
    tags=['protected_earnings_operations', 'insurance_contract_management'],
)
def get_protected_earnings_by_protected_earnings_id(
    protected_earnings_id: UUID = Path(..., alias='protectedEarningsId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Get the details of an protected earnings record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/employments/protectedearnings/{protectedEarningsId}',
    description=""" __Activity name :__ PutProtectedEarningsByProtectedEarningsId

Update the details of a single protected earnings record

__Metadata :__ There is no metadata for this resource
 """,
    tags=['protected_earnings_operations', 'wage_management'],
)
def put_protected_earnings_by_protected_earnings_id(
    protected_earnings_id: UUID = Path(..., alias='protectedEarningsId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit the details of an protected earnings record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/employments/socialsecuritybenefits/{socialSecurityBenefitId}',
    description=""" __Activity name:__ DeleteSocialSecurityBenefitBySocialSecurityBenefitId

Delete a social security record for the employment
 """,
    tags=[
        'social_security_benefits_operations',
        'social_security_record_management',
        'social_security_management',
    ],
)
def delete_social_security_benefit_by_social_security_benefit_id(
    social_security_benefit_id: UUID = Path(..., alias='socialSecurityBenefitId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a specific social security benefits record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/socialsecuritybenefits/{socialSecurityBenefitId}',
    description=""" __Activity name:__ GetSocialSecurityBenefitBySocialSecurityBenefitId

Get the details of a social security benefits record
 """,
    tags=[
        'social_security_benefits_operations',
        'social_security_record_management',
        'social_security_management',
    ],
)
def get_social_security_benefit_by_social_security_benefit_id(
    social_security_benefit_id: UUID = Path(..., alias='socialSecurityBenefitId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Details of a social security benefits record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/employments/socialsecuritybenefits/{socialSecurityBenefitId}',
    description=""" __Activity name:__ PutSocialSecurityBenefitBySocialSecurityBenefitId
__Metadata :__ Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the PUT URL.

Edit the details for a social security record
 """,
    tags=[
        'social_security_benefits_operations',
        'social_security_record_management',
        'social_security_management',
    ],
)
def put_social_security_benefit_by_social_security_benefit_id(
    social_security_benefit_id: UUID = Path(..., alias='socialSecurityBenefitId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit the details of a social security benefits record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/employments/socialsecurityconfigurations/{socialSecurityConfigurationId}',
    description=""" __Activity name:__ DeleteSocialSecurityConfigurationBySocialSecurityConfigurationId

Delete a social security record for the employment
 """,
    tags=['social_security_record_management', 'social_security_management'],
)
def delete_social_security_record_by_id(
    social_security_configuration_id: UUID = Path(
        ..., alias='socialSecurityConfigurationId'
    ),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a specific social security record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/socialsecurityconfigurations/{socialSecurityConfigurationId}',
    description=""" __Activity name:__ GetSocialSecurityConfigurationBySocialSecurityConfigurationId

Get the details of a social security configuration record
 """,
    tags=['social_security_record_management', 'social_security_management'],
)
def fetch_social_security_record_details(
    social_security_configuration_id: UUID = Path(
        ..., alias='socialSecurityConfigurationId'
    ),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Details of a social security record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/employments/socialsecurityconfigurations/{socialSecurityConfigurationId}',
    description=""" __Activity name:__ PutSocialSecurityConfigurationBySocialSecurityConfigurationId

Edit the details for a social security record
 """,
    tags=['social_security_record_management', 'social_security_management'],
)
def edit_social_security_record(
    social_security_configuration_id: UUID = Path(
        ..., alias='socialSecurityConfigurationId'
    ),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit the details of a social security record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/employments/wachtgeld/{wachtegeldenId}',
    description=""" __Activity name :__ DeleteWachtgeldByWachtgeldId

Delete an existing wachtgeld record
 """,
    tags=['wachtgeld_management'],
)
def delete_wachtgeld_by_wachtgeld_id(
    wachtgeld_id: UUID = Query(..., alias='wachtgeldId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
    wachtegelden_id: str = Path(..., alias='wachtegeldenId'),
):
    """
    Delete a wachtgeld record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/wachtgeld/{wachtegeldenId}',
    description=""" __Activity name :__ GetWachtgeldByWachtgeldId

Get the details of a wachtgeld record
 """,
    tags=['wachtgeld_management', 'employment_management'],
)
def get_wachtgeld_by_wachtgeld_id(
    wachtgeld_id: UUID = Query(..., alias='wachtgeldId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    wachtegelden_id: str = Path(..., alias='wachtegeldenId'),
):
    """
    Details of wachtgeld
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/employments/wachtgeld/{wachtegeldenId}',
    description=""" __Activity name :__ PutWachtgeldByWachtgeldId

__Metadata :__ No metadata.
 """,
    tags=['wachtgeld_management', 'employment_management'],
)
def put_wachtgeld_by_wachtgeld_id(
    wachtgeld_id: UUID = Query(..., alias='wachtgeldId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
    wachtegelden_id: str = Path(..., alias='wachtegeldenId'),
):
    """
    Edit a wachtgeld record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/employments/wages/{wageId}',
    description=""" __Activity name :__ DeleteWageByWageId

Delete a wage record for the employment
 """,
    tags=['wage_record_management', 'wage_management'],
)
def delete_wage_by_wage_id(
    wage_id: UUID = Path(..., alias='wageId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a specific wage record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/wages/{wageId}',
    description=""" __Activity name :__ GetWageByWageId

Get the details of a single wage
 """,
    tags=['wage_management', 'wage_record_management', 'employment_wage_management'],
)
def get_wage_by_wage_id(
    wage_id: UUID = Path(..., alias='wageId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Details of a single wage
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/employments/wages/{wageId}',
    description=""" __Activity name :__ PutWageByWageId

Edit the details of a wage 

__Metadata :__ Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the PUT wage URL.

        
The possible options for `payGrade` are scoped by a `payScale`. To obtain the pay grades for a pay scale a metadata call has to be performed with the following format `../wages/metadata/payscale/{key}`. Where {key} is the key of the `payScale` (obtained via the first metadata call) for which the pay grades are to be returned.
 """,
    tags=['wage_management', 'wage_record_management', 'employment_wage_management'],
)
def put_wage_by_wage_id(
    wage_id: UUID = Path(..., alias='wageId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit a wage
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/employments/workinghours/{workinghoursId}',
    description=""" __Activity name :__ DeleteWorkingHoursByWorkingHoursId <br/> <br/>        Delete an existing working hours record (for an employment)
 """,
    tags=['working_hours_management', 'employee_hours_management'],
)
def delete_working_hours_by_working_hours_id(
    workinghours_id: UUID = Path(..., alias='workinghoursId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a specific working hours record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/workinghours/{workinghoursId}',
    description=""" __Activity name :__  GetWorkingHoursByWorkingHoursId <br/> <br/>  Get the details of a working hours record
 """,
    tags=[
        'working_hours_management',
        'employee_hours_management',
        'employer_data_retrieval',
    ],
)
def get_working_hours_by_working_hours_id(
    workinghours_id: UUID = Path(..., alias='workinghoursId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Details of the working hours
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/employments/workinghours/{workinghoursId}',
    description=""" __Activity name :__  PutWorkingHoursByWorkingHoursId       <br/> <br/>  Create a new working hours record for an employment<br/>  Please note that so-called chain validation exists for working hours records. In other words, the time periods of records for an employment cannot overlap with each other.<br/> A new or changed startDate affects the endDate of its preceding record.<br/>  When PUT-ing a new record, the startDate must be greater then the preceding record's startDate.

__Metadata :__ Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the PUT URL.
 """,
    tags=['working_hours_management', 'employee_hours_management'],
)
def put_working_hours_by_working_hours_id(
    workinghours_id: UUID = Path(..., alias='workinghoursId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit the working hours
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}',
    description=""" __Activity name :__ GetEmploymentByEmploymentId

Get the details for an employment
 """,
    tags=[
        'employment_record_management',
        'employment_management',
        'employee_management',
    ],
)
def get_employment_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Details of an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/providers/employers/employees/employments/{employmentId}',
    description=""" __Activity name :__ PatchTypeOfEmploymentCategoryTypeFieldsByEmploymentId

Edit a small subset of fields of an employment. 

Possible values for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the URL
 """,
    tags=[
        'employment_management',
        'employment_record_management',
        'employment_custom_field_management',
    ],
)
def patch_type_of_employment_category_type_fields_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit the type of an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/employments/{employmentId}',
    description=""" __Activity name :__ PutEmploymentByEmploymentId

Edit the details of an employment

Possible values for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the URL
 """,
    tags=[
        'employment_management',
        'employment_record_management',
        'employee_management',
    ],
)
def put_employment_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit the details of an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/abpfunds',
    description=""" __Activity name :__ GetAbpFundsByEmploymentId

Get a list of the abp funds the employment partakes in.
 """,
    tags=['employment_fund_management', 'abp_fund_management', 'employment_management'],
)
def get_abp_funds_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of abp funds the employment partakes in
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/abpfunds',
    description=""" __Activity name :__ PostAbpFundByEmploymentId

__Metadata :__ Possible options for fields of the type "metadata" can be acquired (GET) by adding `/metadata` to the POST URL.

__Defaults :__ Default values for a new object can be acquired by adding `/defaults" to the POST URL.

Activate an abp fund for an employment """,
    tags=[
        'abp_fund_management',
        'employment_fund_management',
        'employment_fund_operations',
    ],
)
def post_abp_fund_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Activate an abp fund for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/attachmentsofearnings',
    description=""" __Activity name :__ GetAttachmentOfEarningsByEmploymentId

Get a list of attachment of earnings records
 """,
    tags=['earnings_attachment_management', 'wage_management'],
)
def get_attachment_of_earnings_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Get a list of attachment of earnings records
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/attachmentsofearnings',
    description=""" __Activity name :__ PostAttachmentOfEarningsByEmploymentId

Create a new attachment of earnings record for an employment.

__Metadata :__ Possible values for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the URL

__Defaults :__ Default values for a new object can be acquired by adding `/defaults' to the POST URL.
 """,
    tags=[
        'earnings_attachment_management',
        'wage_management',
        'employment_record_management',
    ],
)
def post_attachment_of_earnings_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create a new attachment of earnings record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/basesforcalculation',
    description=""" __Activity name :__ GetBasesForCalculationByEmploymentId

Get a list of the bases (money) that are used as the base for certain calculations.
 """,
    tags=[
        'base_fund_calculation_management',
        'employment_fund_management',
        'base_for_calculation_management',
    ],
)
def get_bases_for_calculation_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of bases for employment fund calculations.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/basesforcalculation',
    description=""" __Activity name :__ PostBaseForCalculationByEmploymentId

__Metadata :__ Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the POST URL.

__Defaults :__ Default values for a new object can be acquired by adding `/defaults` to the POST URL.

Add a base for calculation record.
 """,
    tags=[
        'base_for_calculation_management',
        'employment_fund_management',
        'base_fund_calculation_management',
    ],
)
def post_base_fund_calculation_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Add a base for calculation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/basesforemploymentfundcalculation',
    description=""" __Activity name :__ GetBasesForEmploymentFundCalculationByEmploymentId

Get a list of the bases (money) that are used in employment fund calculations.
 """,
    tags=[
        'base_for_calculation_management',
        'employment_fund_management',
        'base_fund_calculation_management',
    ],
)
def get_bases_for_employment_fund_calculation_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of bases for employment fund calculations.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/basesforemploymentfundcalculation',
    description=""" __Activity name :__ PostBaseForEmploymentFundCalculationByEmploymentId

__Metadata :__ Possible options for fields of the type "metadata" can be acquired (GET) by adding `/metadata` to the POST URL.

__Defaults :__ Default values for a new object can be acquired by adding `/defaults" to the POST URL.

Add a base for employment fund calculation.
 """,
    tags=[
        'base_for_calculation_management',
        'employment_fund_management',
        'base_fund_calculation_management',
        'employment_fund_operations',
    ],
)
def post_base_for_employment_fund_calculation_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Add a base for employment fund calculation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/benefitsInKind',
    description=""" __Activity name:__ GetBenefitsInKindByEmploymentId
Get a list of the Benefits in kind of the employment.
 """,
    tags=[
        'benefit_in_kind_management',
        'benefits_and_deductions_management',
        'employment_fund_operations',
    ],
)
def get_benefits_in_kind_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List Benefits in kind
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/benefitsInKind',
    description=""" __Activity name :__ PostBenefitInKindByEmploymentId

__Metadata:__ Possible options for fields of the type 'metadata' can be acquired(GET)by adding `/metadata` to the POST URL.

__Defaults:__ Default values for a new object can be acquired by adding `/defaults' to the POST URL.
 """,
    tags=[
        'benefit_in_kind_management',
        'benefits_and_deductions_management',
        'employment_fund_operations',
    ],
)
def post_benefit_in_kind_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Add a Benefit in kind for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/benefitsanddeductions',
    description=""" __Activity name :__ GetBenefitsAndDeductionsByEmploymentId

Get a list of benefits and deductions for the employment
 """,
    tags=['benefits_and_deductions_management', 'employer_related_operations'],
)
def get_benefits_and_deductions_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    list of benefits and deductions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/benefitsanddeductions',
    description=""" __Activity name :__ PostBenefitsAndDeductionsByEmploymentId

Add a benefit or deduction for the employment

__Metadata :__  Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the POST URL.

__Defaults :__ Default values for a new object can be acquired by adding `/defaults` to the POST URL.
 """,
    tags=['benefits_and_deductions_management', 'employment_management'],
)
def postbenefits_and_deductions_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Add a benefit or deduction record for the employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/companycars',
    description=""" __Activity name:__ GetCompanyCarsByEmploymentId
    

Get the list of company cars for an employment. 

Please note this resource is related for the registration of the company car for HRM purposes. This resource is NOT related to the registration of the fiscal company car(s) which is used in salary calculations.
 """,
    tags=['company_car_management', 'employee_management'],
)
def get_company_cars_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of  company cars for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/companycars',
    description=""" __Activity name:__ PostCompanyCarByEmploymentId
    

Create a company car record for an employment.

Please note this resource is related for the registration of the company car for HRM purposes. This resource is NOT related to the registration of the fiscal company car(s) which is used in salary calculations.

__Metadata :__ Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the POST URL.

__Defaults :__ There are no defaults available.
 """,
    tags=['company_car_management', 'employment_management'],
)
def post_company_car_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create a company car record for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/providers/employers/employees/employments/{employmentId}/correctstartdate',
    description=""" __Activity name :__ PatchCorrectStartDateByEmploymentId

Edit the starting date (i.e. the official first day of a contract) of an employment. Please note that changing the starting data for an employment affects multiple entities in Loket (e.g. wage-records etc). 


 * With a correction of the starting date, you are responsible for the associated notifications. 
 """,
    tags=[
        'employment_management',
        'employee_management',
        'employment_record_management',
    ],
)
def patch_correct_start_date_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Correct the start (employment) date for an employment.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/costperhour',
    description=""" __Activity name:__ GetCostPerHourByEmploymentId
    

Get the list of costs per hour for an employment
 """,
    tags=['cost_per_hour_management', 'cost_management', 'wage_management'],
)
def get_cost_per_hour_by_employment_id(
    include_estimation: Optional[bool] = Query(None, alias='includeEstimation'),
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of costs per hour for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/costperhour',
    description=""" __Activity name :__ PostCostPerHourByEmploymentId

__Metadata:__ Possible options for fields of the type 'metadata' can be acquired(GET)by adding `/metadata` to the POST URL.

__Defaults:__ Defaults can be acquired(GET)by adding `/defaults` to the POST URL.
 """,
    tags=['cost_per_hour_management', 'cost_management', 'employment_management'],
)
def post_cost_per_hour_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Add a cost per hour for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/customfields',
    description=""" __Activity name :__ GetEmploymentCustomFieldsByEmploymentId

Get a list of the custom fields for an employment.

__Note:__ custom fields are user defined at the employer level.
 """,
    tags=[
        'employment_custom_field_management',
        'custom_field_management',
        'employee_custom_field_management',
        'employment_custom_fields_management',
    ],
)
def get_employment_custom_fieldss_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List employment custom fields for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/customfields',
    description=""" __Activity name :__ PostEmploymentCustomFieldByEmploymentId

__Metadata:__ Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the POST URL.
 """,
    tags=[
        'employment_custom_field_management',
        'custom_field_management',
        'employment_custom_fields_management',
    ],
)
def post_employment_custom_field_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Add an employment custom field for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/customnotifications',
    description=""" __Activity name :__ GetCustomNotificationsByEmploymentId
Get a list of the custom notifications of the employment.
__Note:__ custom notifications are user defined for a specific employment.
 """,
    tags=['custom_notification_management', 'custom_notifications_management'],
)
def get_custom_notifications_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List custom notification
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/customnotifications',
    description=""" __Activity name :__ PostCustomNotificationByEmploymentId

__Metadata:__ Possible options for fields of the type 'metadata' can be acquired(GET)by adding `/metadata` to the POST URL.

__Defaults:__ Default values for a new object can be acquired by adding `/defaults' to the POST URL.
 """,
    tags=[
        'custom_notification_management',
        'custom_notifications_management',
        'employment_custom_field_management',
    ],
)
def post_custom_notification_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Add a custom notification for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/declarations',
    description=""" __Activity name :__ GetDeclarationsByEmploymentId

Returns a list of declarations for the employments of the employer
 """,
    tags=[
        'declaration_management',
        'declarations_management',
        'employment_record_management',
    ],
)
def get_declarations_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of declarations for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/deviatingawfcontributions',
    description=""" __Activity name:__ GetDeviatingAwfContributionsByEmploymentId
Get the list of Deviating AWF contributions records for an employment
 """,
    tags=['deviating_awf_contribution_management', 'deviating_records_management'],
)
def get_deviating_awf_contribution_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of Deviating AWF contributions records for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/deviatingawfcontributions',
    description=""" __Activity name:__ PostDeviatingAwfContributionByEmploymentId
Create a Deviating AWF contributions record for an employment

__Metadata:__ Possible options for fields of the type 'metadata' can be acquired(GET)by adding `/metadata` to the POST URL.

__Defaults:__ Default values for a new object can be acquired by adding `/defaults' to the POST URL.
 """,
    tags=[
        'deviating_awf_contribution_management',
        'deviating_records_management',
        'employment_management',
    ],
)
def post_deviating_awf_contribution_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create a Deviating AWF contributions record for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/deviatinghourlywages',
    description=""" __Activity name :__ GetDeviatingHourlyWagesByEmploymentId

Get a list of the deviating hourly wages of the employment.

__Note:__ Loket.nl has different ways to register deviating hourly wage. 
 """,
    tags=[
        'deviating_hourly_wage_management',
        'wage_management',
        'deviating_records_management',
    ],
)
def get_deviating_hourly_wages_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List deviating hourly wage
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/deviatinghourlywages',
    description=""" __Activity name :__ PostDeviatingHourlyWageByEmploymentId __Metadata:__ Possible options for fields of the type 'metadata' can be acquired(GET)by adding `/metadata` to the POST URL. __Defaults:__ Default values for a new object can be acquired by adding `/defaults' to the POST URL.
 """,
    tags=[
        'deviating_hourly_wage_management',
        'deviating_records_management',
        'wage_management',
    ],
)
def post_deviating_hourly_wage_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Add a deviating hourly wage for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/documents',
    description=""" __Activity name :__ GetDocumentsByEmploymentId

Get a list of documents within the employee's employment dossier (werknemerdossier). Via Qwoater.
 """,
    tags=[
        'concept_employee_dossier_management',
        'employment_document_management',
        'dossier_management',
    ],
)
def get_documents_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Get a list of employment dossier documents
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/documents',
    description=""" __Activity name :__ PostDocumentByEmploymentId

__Metadata:__ Possible options for fields of the type 'metadata' can be acquired(GET)by adding `/metadata` to the POST URL.

Upload a document within the employee's employment dossier (werknemerdossier). Via Qwoater.
 """,
    tags=[
        'concept_employee_dossier_management',
        'dossier_management',
        'employment_document_management',
    ],
)
def post_document_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Upload a document to the employment dossier
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/employments/{employmentId}/documents/{documentId}',
    description=""" __Activity name:__ DeleteDocumentByEmploymentIdAndDocumentId

Delete a document in the employment dossier
 """,
    tags=[
        'dossier_management',
        'employment_document_management',
        'document_management',
    ],
)
def delete_document_by_employment_id_and_document_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    document_id: str = Path(..., alias='documentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Delete a document in the employment dossier
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/documents/{documentId}',
    description=""" __Activity name :__ GetDocumentByEmploymentIdAndDocumentId

Download the file of a given employment dossier entry. Via Qwoater.
 """,
    tags=[
        'employment_document_management',
        'dossier_management',
        'document_management',
    ],
)
def get_document_by_employment_id_and_document_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    document_id: str = Path(..., alias='documentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
):
    """
    Download employment dossier document
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/employments/{employmentId}/documents/{documentId}',
    description=""" __Activity name:__ PutDocumentByEmploymentIdAndDocumentId

Edit the details for a document in the employment dossier
 """,
    tags=[
        'employment_document_management',
        'dossier_management',
        'employment_management',
    ],
)
def put_document_by_employment_id_and_document_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    document_id: str = Path(..., alias='documentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Edit the details of an employment dossier document
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/documents/{documentId}/audittrail',
    description=""" __Activity name :__ GetAuditTrailByEmploymentIdAndDocumentId

Get audittrail for the document in the employment dossier.
 """,
    tags=[
        'audit_trail_management',
        'employment_record_management',
        'dossier_management',
    ],
)
def get_audit_trail_by_employment_id_and_document_id(
    document_id: str = Path(..., alias='documentId'),
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Get audittrail for the document in the employment dossier
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/employments/{employmentId}/documents/{documentId}/signature',
    description=""" __Activity name :__ DeleteSignatureByEmploymentIdAndDocumentId

__Metadata:__ No metadata available.

Delete the proces to sign a document for an employment.
 """,
    tags=['signature_management', 'employment_document_management'],
)
def delete_signature_by_employment_id_and_document_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    document_id: str = Path(..., alias='documentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Delete signature - Employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/documents/{documentId}/signature',
    description=""" __Activity name :__ GetSignatureByEmploymentIdAndDocumentId

__Metadata:__ No metadata available.

Retrieve the status of the signing.
 """,
    tags=[
        'employment_document_management',
        'concept_employee_dossier_management',
        'document_management',
        'signature_management',
        'employment_record_management',
    ],
)
def get_signature_by_employment_id_and_document_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    document_id: str = Path(..., alias='documentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Signature details - Employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/documents/{documentId}/signature/initiate',
    description=""" __Activity name :__ PostInitiateSignatureByEmploymentIdAndDocumentId

__Metadata:__ No metadata available. Defaults are available by adding /defaults to the path.

Initiate the proces to sign a document for an employment by one or more signers.
 """,
    tags=[
        'employment_management',
        'employment_document_management',
        'signature_management',
    ],
)
def post_initiate_signature_by_employment_id_and_document_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    document_id: str = Path(..., alias='documentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Initiate signature - Employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/documents/{documentId}/signature/report',
    description=""" __Activity name :__ GetSignatureReportByEmploymentIdAndDocumentId

__Metadata:__ No metadata available.

Report of the signature.
 """,
    tags=[
        'employment_document_management',
        'signature_management',
        'employment_management',
        'employment_record_management',
    ],
)
def get_signature_report_by_employment_id_and_document_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    document_id: str = Path(..., alias='documentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Retrieve the report of the signing - Employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/documenttemplates/{documentId}/generatedocument',
    description=""" __Activity name :__ PostGenerateDocumentByEmploymentIdAndDocumentId

__Metadata:__ Available templates can be acquired(GET) at Employer level(/v2/providers/employers/{employerId}/documenttemplates/generatedocument/metadata).

Generate a document for an employment and store it in the employment dossier. Via Qwoater.
 """,
    tags=[
        'employment_document_management',
        'employment_record_management',
        'document_management',
    ],
)
def post_generate_document_by_employment_id_and_document_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    document_id: str = Path(..., alias='documentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Generate a document for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/documenttemplates/{documentId}/generatedocument/preview',
    description=""" __Activity name :__ PostGenerateDocumentPreviewByEmploymentIdAndDocumentId

__Metadata:__ Available templates can be acquired(GET) at Employer level(/v2/providers/employers/{employerId}/documenttemplates/generatedocument/metadata).

Generate a document for an employment and receive a preview. Via Qwoater.
 """,
    tags=[
        'employment_document_management',
        'employment_management',
        'document_management',
    ],
)
def post_generate_document_preview_by_employment_id_and_document_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    document_id: str = Path(..., alias='documentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Generate a document for an employment - preview
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/providers/employers/employees/employments/{employmentId}/employeeprofile',
    description=""" __Activity name :__ PatchEmployeeProfileByEmploymentId

Create Fondsen, Grondslagen and toeslagen based on the employment's employeeProfile.
 """,
    tags=[
        'employee_profile_management',
        'employment_management',
        'employee_management',
    ],
)
def patch_employee_profile_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Activate employee profile for the employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/employmentfunds',
    description=""" __Activity name :__ GetEmploymentFundsByEmploymentId

Get a list of the funds the employment partakes in.
 """,
    tags=['employment_fund_management', 'employment_fund_operations'],
)
def get_employment_funds_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of funds the employment partakes in
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/employmentfunds',
    description=""" __Activity name :__ PostEmploymentFundByEmploymentId

__Metadata :__ Possible options for fields of the type "metadata" can be acquired (GET) by adding `/metadata` to the POST URL.

__Defaults :__ Default values for a new object can be acquired by adding `/defaults" to the POST URL.

Activate a fund for an employment """,
    tags=[
        'employment_fund_management',
        'employment_management',
        'abp_fund_management',
        'employment_fund_operations',
    ],
)
def post_employment_fund_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Activate a fund for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/fiscalcompanycars',
    description=""" __Activity name:__ GetFiscalCompanyCarsByEmploymentId
    

Get the list of fiscal company cars for an employment. 

Please note this resource is related for the registration of the company car for tax purposes. This is NOT directly related to the registration of the company car(s) related to the HRM-module 'Verstrekking'
 """,
    tags=['company_car_management', 'employment_management'],
)
def get_fiscal_company_cars_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of fiscal company cars for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/fiscalcompanycars',
    description=""" __Activity name:__ PostFiscalCompanyCarByEmploymentId
    

Create a fiscal company cars record for an employment.

Please note this resource is related for the registration of the company car for tax purposes and will be included in the salary calculations.  This is NOT directly related to the registration of the company car(s) related to the HRM-module Verstrekking

__Metadata :__ Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the POST URL.

__Defaults :__ Default values for a new object can be acquired by adding `/defaults' to the POST URL.
 """,
    tags=[
        'company_car_management',
        'employment_record_management',
        'employee_management',
    ],
)
def post_fiscal_company_car_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create a fiscal company car record for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/fiscalproperties',
    description=""" __Activity name:__ GetFiscalPropertiesByEmploymentId
    

Get the list of fiscal properties for an employment
 """,
    tags=[
        'fiscal_properties_management',
        'employment_fund_management',
        'employment_record_management',
    ],
)
def get_fiscal_properties_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of fiscal properties for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/fiscalproperties',
    description=""" __Activity name:__ PostFiscalPropertiesByEmploymentId
    

Create a fiscal properties record for an employment

__Metadata :__ Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the POST URL.

__Defaults :__ Default values for a new object can be acquired by adding `/defaults' to the POST URL.
 """,
    tags=[
        'employment_record_management',
        'fiscal_company_management',
        'employer_management',
        'employment_management',
    ],
)
def post_fiscal_properties_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create a fiscal record for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/healthcareinsuranceactconfigurations',
    description=""" __Activity name:__ GetHealthcareInsuranceActConfigurationsByEmploymentId
    

Get the list of Healthcare Insurance Act configuration records for an employment
 """,
    tags=['healthcare_insurance_act_management', 'healthcare_insurance_management'],
)
def get_healthcare_insurance_act_configuration_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of Healthcare Insurance Act records for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/healthcareinsuranceactconfigurations',
    description=""" __Activity name:__ PostHealthcareInsuranceActConfigurationByEmploymentId
    

Create a Healthcare Insurance Act configuration record for an employment

__Metadata :__ Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the POST URL.

__Defaults :__ Default values for a new object can be acquired by adding `/defaults' to the POST URL.
 """,
    tags=['healthcare_insurance_act_management', 'healthcare_insurance_management'],
)
def post_healthcare_insurance_act_configuration_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create a Healthcare Insurance Act record for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/journalallocations',
    description=""" __Activity name:__ GetJournalAllocationsByEmploymentId
    

Get the list of financial journal allocations (journaliseren module) for an employment. 
 """,
    tags=['journal_allocation_management', 'employment_management'],
)
def get_journal_allocations_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of journal allocations for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/journalallocations',
    description=""" __Activity name:__ PostJournalAllocationByEmploymentId
    

Create a new financial journal allocation record for an employment (journaliseren module).

__Metadata :__ Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the POST URL. Possible options dependent on a specific `startPeriod` can be acquired via `/metadata/year/{year}/period/{period}

__Defaults :__ There is NO /defaults endpoint available for this resource.
 """,
    tags=['journal_allocation_management', 'employment_management'],
)
def post_journal_allocation_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create a new journal allocation record for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/leave',
    description=""" __Activity name :__ GetLeaveByEmploymentId <br/>  <br/>  Returns all the leave entries (both addition and subtraction) for the given employment.
 """,
    tags=['leave_management', 'leave_management_operations'],
)
def get_leave_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of all the leave entries
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/leave',
    description=""" __Activity name :__ PostLeaveByEmploymentId

Add a Leave record for an employment
 """,
    tags=[
        'leave_management',
        'leave_management_operations',
        'employment_management',
        'employee_absence_management',
    ],
)
def post_leave_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create a leave record for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/leave/defaults',
    description=""" __Activity name :__ GetLeaveDefaultsByEmploymentId

Returns the default values for all the fields. In case no default is present `null` will be returned.
 """,
    tags=[
        'employment_management',
        'employment_custom_field_management',
        'application_management',
        'user_management',
    ],
)
def get_leave_defaults_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Get the default values to be used when POSTing a new record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/leave/metadata',
    description=""" __Activity name :__ GetLeaveMetadataByEmploymentId

Returns the metadata values for all the metadata fields.
 """,
    tags=[
        'employment_record_management',
        'employee_management',
        'employment_custom_field_management',
    ],
)
def get_leave_metadata_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Get the values for the metadata fields
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/leave/overview/{year}',
    description=""" __Activity name :__ GetLeaveOverviewByEmploymentIdandYear
Download the leave overview for a year in a single PDF

__Metadata :__ Possible options for `year` can be acquired (GET) the following URL /providers/employers/employees/employments/{employmentId}/leave/overview/metadata.
 """,
    tags=['leave_management', 'leave_management_operations'],
)
def get_leave_overview_by_employment_idand_year(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    employment_id: UUID = Path(..., alias='employmentId'),
    year: int = ...,
):
    """
    Download the leave overview for an employment and year
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/leave/proposedleavehours',
    description=""" __Activity name :__ GetProposedLeaveHoursByEmploymentId

Returns the numberOfHours (only in hours) calculated based on the employments working- hours/schedual 

__Note:__  The function will only work if the employment is either linked to no leave policy or linked to only leave policy(s) that use hours as the unit of leave.

Further more how the leave hours are calculated can be managed in the leave policy with the `applyLeaveSchedule` and `working hours` resource with the field `calculateUsingWorkPattern.leaveHours` The order is as follows. If calculateUsingWorkPattern.leaveHours is true the work patern from workinghours is used otherwise if applyLeaveSchedule is set to true the `leavePattern` is used otherwise the workinghours are used
 """,
    tags=['leave_management', 'leave_management_operations', 'employment_management'],
)
def get_proposed_leave_hours_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    start_date: Optional[constr(pattern=r'date')] = Query(None, alias='startDate'),
    end_date: Optional[constr(pattern=r'date')] = Query(None, alias='endDate'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Get the proposed number of leave hours for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/leavebalances',
    description=""" __Activity name :__ GetLeaveBalancesByEmploymentId <br/>  <br/>  Returns the yearly leave balances for each leave type.
 """,
    tags=['leave_management', 'leave_management_operations'],
)
def get_leave_balances_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of yearly leave balances for each leave type.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/leavepolicies',
    description=""" __Activity name:__ GetLeavePoliciesByEmploymentId
    

Get the list of leave policies linked to the employment.
If a leave policy and employment are linked, that means the employment will be provided the leave based on the policy.
 """,
    tags=[
        'leave_management',
        'leave_policy_management',
        'employment_management',
        'leave_management_operations',
    ],
)
def get_leave_policies_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Get list of linked leave policies for the employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/providers/employers/employees/employments/{employmentId}/leavepolicies',
    description=""" __Activity name:__ PatchLeavePoliciesByEmploymentId

__Metadata :__ Possible options can be acquired (GET) by adding `/metadata` to the POST URL.

This endpoint enables the user to link or unlink multiple 'linkages' with one call.
 """,
    tags=[
        'leave_management',
        'leave_policy_management',
        'employment_management',
        'leave_management_operations',
    ],
)
def patch_leave_policies_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    body: ProvidersEmployersEmployeesEmploymentsEmploymentIdLeavepoliciesPatchRequest = ...,
):
    """
    Link or unlink leave policies for the employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/leaverequests',
    description=""" __Activity name :__ GetLeaveRequestsByEmploymentId

Get a list of all leave requests for the given employment
 """,
    tags=['leave_management', 'leave_management_operations'],
)
def get_leave_requests_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    leave requests by employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/notes',
    description=""" __Activity name :__ GetEmploymentNotesByEmploymentId

Get a list of notes, available for the user, for the employment. 
 """,
    tags=[
        'employment_note_management',
        'employment_management',
        'employment_notes_management',
    ],
)
def get_employment_notes_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Get a list of notes for an employment.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/notes',
    description=""" __Activity name :__ PostEmploymentNoteByEmploymentId

__Metadata:__ Possible options for fields of the type 'metadata' can be acquired(GET)by adding `/metadata` to the POST URL.

__Defaults:__ Default values for a new object can be acquired by adding `/defaults' to the POST URL.
 """,
    tags=['employment_note_management', 'employment_notes_management'],
)
def post_employment_note_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Add a note for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/organizationalentities',
    description=""" __Activity name:__ GetOrganizationalEntitiesByEmploymentId
    

Get the list of organizational entities for an employment
 """,
    tags=[
        'organizational_entity_management',
        'employment_management',
        'employer_data_retrieval',
    ],
)
def get_organizational_entities_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of organizational entities for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/organizationalentities',
    description=""" __Activity name:__ PostOrganizationalEntityByEmploymentId
    

Create an organizational entity for an employment

__Metadata :__ Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the POST URL.

__Defaults :__ Default values for a new object can be acquired by adding `/defaults' to the POST URL.
 """,
    tags=['organizational_entity_management', 'employment_management'],
)
def post_organizational_entity_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create an organizational entity for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/otherPayrollVariables',
    description=""" __Activity name :__ GetOtherPayrollVariablesByEmploymentId

Get a list of the other payroll variables for an employment Other payroll variables are a set of infrequently used properties for the payroll (wage tax and pension) proces
 """,
    tags=['payroll_variables_management', 'wage_management', 'employment_management'],
)
def get_other_payroll_variables_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of other payroll variables for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/otherPayrollVariables',
    description=""" __Activity name :__ PostOtherPayrollVariablesByEmploymentId

Add other payroll variables for an employment.
__Metadata :__ Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the POST URL.

__Defaults :__ Default values for a new object can be acquired by adding `/defaults' to the POST URL.
 """,
    tags=[
        'payroll_variables_management',
        'employment_custom_field_management',
        'employment_management',
    ],
)
def post_other_payroll_variables_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Add other payroll variables for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/paymentinformationnonsepa',
    description=""" __Activity name :__ GetPaymentInformationNonSepaByEmploymentId

Get a list of payment information for non-SEPA bank accounts for an employment. These are payments to be performed that will NOT be based on an IBAN (which is the standard), so this is mostly useful for foreign payments that are not based within a SEPA-country. 

For a specific payroll component, the record indicates to which account payments will be made.  This includes, but is not limited to, the payment of wages for an employment.

For each payroll component there can only be one payment Information record per employment.
 """,
    tags=['payment_information_management'],
)
def get_payment_information_non_sepa_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Get a list of payment information non-SEPA
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/paymentinformationnonsepa',
    description=""" __Activity name :__ PostPaymentInformationNonSepaByEmploymentId

Create a new payment information non-SEPA record for an employment. For each unique payroll component there can only be one payment information non-SEPA record per employment.

__Metadata :__ Possible values for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the URL

__Defaults :__ Default values for a new object can be acquired by adding `/defaults' to the POST URL.
 """,
    tags=['payment_information_management'],
)
def post_payment_information_non_sepa_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create a new payment information non-SEPA record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/paymentinformationsepa',
    description=""" __Activity name :__ GetPaymentInformationSepaByEmploymentId

Get a list of payment information for SEPA bank accounts (IBAN's) for an employment.
 
For a specific payroll component, the record indicates to which IBAN payments will be made. 
This includes, but is not limited to, the payment of wages for an employment.
 
For each payroll component there can only be one payment information record per employment.
 """,
    tags=['payment_information_management'],
)
def get_payment_information_sepa_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Get a list of payment information sepa
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/paymentinformationsepa',
    description=""" __Activity name :__ PostPaymentInformationSepaByEmploymentId

Create a new Payment information SEPA record for an employment.<br/> For each unique payroll component there can only be one payment record per employment.

__Metadata :__ Possible values for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the URL

__Defaults :__ Default values for a new object can be acquired by adding `/defaults' to the POST URL.
 """,
    tags=['payment_information_management'],
)
def post_payment_information_sepa_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    create a new payment information sepa record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/paymentinformationsepaseparatepayments',
    description=""" __Activity name :__ GetPaymentInformationSepaSeparatePaymentByEmploymentId

Get a list of records that indicate, if applicable, the bank account(s) (i.e. IBAN's) where a given amount of the net salary for this employment will be paid to.
 """,
    tags=['payment_information_management', 'wage_management'],
)
def get_payment_information_sepa_separate_payment_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Get a list of payment information SEPA separate payment records
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/paymentinformationsepaseparatepayments',
    description=""" __Activity name :__ PostPaymentInformationSepaSeparatePaymentByEmploymentId

Create a new payment information SEPA separate payment record for an employment.<br/>

__Metadata :__ Not applicable for this resource.

__Defaults :__ Default values for a new object can be acquired by adding `/defaults' to the POST URL.
 """,
    tags=['payment_information_management'],
)
def post_payment_information_sepa_separate_payment_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create a new payment information SEPA separate payment record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/payrollSimulatorData',
    description=""" __Activity name :__ GetPayrollSimulatorDataByEmploymentId

Get an overview of the data used in a payroll simulation
 """,
    tags=['payroll_data_management', 'wage_management', 'employment_record_management'],
)
def get_payroll_simulator_data_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Overview of the data used in a payroll simulation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/payrollperioddata',
    description=""" __Activity name :__ GetPayrollPeriodDataByEmploymentId <br/> <br/> Get a list of all payroll period data for an employment. Payroll period data relates to a single payroll period.
 """,
    tags=['payroll_period_management', 'payroll_data_management'],
)
def get_payroll_period_data_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    list of payroll period data
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/providers/employers/employees/employments/{employmentId}/payrollperioddata',
    description=""" **This endpoint is the REST alternative to the ImporteerGegevens (Variabele Gegevens) SOAP webservice functionality**  <br/> <br/> __Activity name :__ PatchPayrollPeriodDataByEmploymentId <br/> <br/>         This endpoint is typically used by applications that are considered to be leading in regard to the values for the payroll components they manage. For most (external) applications this will the most viable endpoint to achieve that functionality. Loket considers these parties as not interested in the current state of the payroll period data in the Loket.nl database. This endpoint is provided to make these scenarios easier to implement since no GET call is required to determine whether a POST or PUT call is to be performed to either insert or update payroll period data.
Based on the current state of the database Loket.nl will either insert a new record or update the existing record with the supplied data.
* A new record is created when the combination of `payrollPeriod`, `shift`, `payslipType`, `distributionUnit`, `costCenter` and `costUnit` is valid and _does not_ exist for the employment. Next to that, the objects consisting of `payrollComponent`, `value` and `attribute` are inserted into the database. <br />
* An update is performed when the combination of `payrollPeriod`, `shift`, `payslipType`, `distributionUnit`, `costCenter` and `costUnit` _does_ exist for the employment. In that case the specified objects consisting of `payrollComponent`, `value` and `attribute` are inserted into the database, overwriting existing values. Existing records with a `payrollComponent.key` that is not supplied in the request are not modified. <br/> <br/> __Metadata :__ <br/> Possible values for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the PATCH URL <br/> Possible values for fields of the type 'metadata' that are PERIOD-specific can be acquired (GET) by adding `/metadata/year/{year}/period/{periodNumber}` to the PATCH URL     <br/> <br/>   __Default values :__ <br/> Default values may be acquired by adding `/defaults` (GET) to the PATCH url . It is very much (!!!) recommended to acquire the defaults-objects first and use that information when inserting data for this employment. I.e. use the default values for costCenter, shift etcetera and the complement the object with the payroll components you want to provide. <br/> <br/>      __Extra background reading :__ <br/> It may be useful to read more about payroll period data (variabele gegevens, mutaties) on the Loket.nl [helpdesk portal](https://helpdesk.loket.nl/hc/nl/articles/115003667669-Variabele-mutaties-Individuele-vastlegging). Please note that this information is in Dutch and access is required. <br/>
 """,
    tags=['payroll_period_management', 'payroll_data_management', 'wage_management'],
)
def patch_payroll_period_data_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Insert or update payroll period data
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/payrollperioddata',
    description=""" __Activity name :__ PostPayrollPeriodDataByEmploymentId <br/> <br/>         Create a payroll period date record for an employment <br/> <br/> __Metadata :__ <br/> Possible values for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the POST URL <br/> Possible values for fields of the type 'metadata' that are PERIOD-specific can be acquired (GET) by adding `/metadata/year/{year}/period/{periodNumber}` to the POST URL <br/> __Default values :__ <br/> * Default values may be acquired by adding `/defaults` (GET) to the POST url
 """,
    tags=[
        'payroll_period_management',
        'employment_management',
        'payroll_data_management',
    ],
)
def post_payroll_period_data_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create an payroll period data record for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/payrollperiodresults/year/{year}',
    description=""" __Activity name :__ GetPayrollPeriodResultsByEmploymentIdAndYear

Download the payroll results (conform overzicht strook) of an employment per payroll period for the provided year.

**Please note the following:**  There is a major functional difference between acquiring the payslips per payroll run or acquiring payroll results per payroll period(in this case a year). In Loket, for each (approved) run there will be payroll results for that run. Each employment with any results in that payroll run will have (one or more) payslips, these are the payroll results/ payslips for that run. Often these results relate to the payroll period for which that payroll run is performed, but the results may apply to other payroll periods. __For example:__ the payroll run for March may contain results that apply to the months January and/or February. (this may occur within a specific year)

* Requesting payslips/results per RUN will provide you all payroll results from that specific payrollrun regardless of the period it applies to.
* Requesting PERIOD results will provide you all (approved) payroll results for that period regardless of the payroll run it comes from.

De facto the payslips/results per RUN are your actual payslips (loonstrook). The results per period are more useful as an overview per period (overzichtstrook).

One more remark: the response of this endpoint is dependent on the role of the user. If the user has role 'werknemer' than the results shown are only based on those approved payroll runs where the ESS-date is on or before today. For other users the results will contain data from all approved payroll runs regardless of ESS-date.
 """,
    tags=[
        'payroll_period_management',
        'payroll_data_management',
        'employment_management',
        'wage_management',
    ],
)
def get_payroll_period_results_by_employment_id_and_year(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    employment_id: UUID = Path(..., alias='employmentId'),
    year: int = ...,
):
    """
    Get payroll period results of an employment for a year
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/payslips',
    description=""" __Activity name :__ GetPayslipsByEmploymentId

Get a list of payslips for the specified employment, including the GUID of the corresponding payroll run.

The function of this endpoint is dependent on the role of the user;
* For users with the role of 'werknemer';  The endpoint only returns results for payrollruns that have the status 'approved' AND for which results of the payroll are available for ESS (based on the ESS-date of the payrollrun) .
* For users with any other role (in most cases); the endpoin returns results for approved payrollruns irregardless of the ESS date.
 """,
    tags=['payslip_management', 'employment_management', 'wage_management'],
)
def get_payslips_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of payslips for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/payslips/summary/{payrollPeriodId}',
    description=""" __Activity name :__ GetPayrollPeriodSummaryByEmploymentIdAndPayrollPeriodId

Download a cummulative payslip for a single payroll period in a single PDF.

e.g. If the employment has to payslips for a single period this endpoint will return one (summary)payslip that is the cummaltion of both the payslips.

__Metadata :__ Possible options for `payrollPeriodId` can be acquired (GET) the following URL /providers/employers/employees/employments/{employmentId}/payslips/summary/metadata.
Please note that the returned payroll periods are dependend on the year filter setting for the employer. The options are, return payroll periodes for:
 
* current payroll year * current and previous payroll year * all payroll years
 """,
    tags=['payslip_management', 'payroll_data_management', 'wage_management'],
)
def download_cumulative_payslip_by_employment_and_period(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    employment_id: UUID = Path(..., alias='employmentId'),
    payroll_period_id: UUID = Path(..., alias='payrollPeriodId'),
):
    """
    Download a cummulative payslip for a single payroll period
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/payslips/{payrollrunId}',
    description=""" __Activity name :__ GetPayslipsByEmploymentIdAndPayrollRunId

Download the payslips or its underlying payroll results of an employment for the specified payrollrun

**Please note: this endpoint has two types of output:**
* the payslip(s) as a single PDF-file
* the underlying payroll result data for the payslip(s) in JSON-format  

This may be specified by providing the desired format in the `Accept` header of your request.
 """,
    tags=['payslip_management', 'payroll_run_management', 'employment_management'],
)
def get_payslips_by_employment_id_and_payroll_run_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    employment_id: UUID = Path(..., alias='employmentId'),
    payrollrun_id: UUID = Path(..., alias='payrollrunId'),
):
    """
    Download payslips of an employment for a payrollrun
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/payslips/{year}',
    description=""" __Activity name :__ GetPayslipsByEmploymentIdAndYear

Download the payslips for a payroll year in a single PDF

__Metadata :__ Possible options for `year` can be acquired (GET) the following URL /providers/employers/employees/employments/{employmentId}/payslips/metadata.
 """,
    tags=['payslip_management', 'payroll_data_management'],
)
def get_payslips_by_employment_id_and_year(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    employment_id: UUID = Path(..., alias='employmentId'),
    year: int = ...,
):
    """
    Download payslips for an employment and year
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/pensionbenefits',
    description=""" __Activity name :__ GetPensionBenefitsByEmploymentId

Get a list of the pension benefits of the employment.

__Note:__ Loket.nl has different ways to register pension benefit. 
 """,
    tags=[
        'pension_benefit_management',
        'pension_benefit_operations',
        'pension_benefits_management',
    ],
)
def get_pension_benefits_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List pension benefit
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/pensionbenefits',
    description=""" __Activity name :__ PostPensionBenefitByEmploymentId

__Metadata :__ No metadata

__Defaults :__ No default values
 """,
    tags=[
        'pension_benefit_management',
        'pension_benefit_operations',
        'benefits_and_deductions_management',
    ],
)
def post_pension_benefit_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Add a pension benefit for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/protectedearnings',
    description=""" __Activity name :__ GetProtectedEarningsByEmploymentId

Get a list of protected earnings records
 """,
    tags=[
        'protected_earnings_operations',
        'wage_management',
        'employment_record_management',
    ],
)
def get_protected_earnings_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Get a list of protected earnings records
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/protectedearnings',
    description=""" __Activity name :__ PostProtectedEarningsByEmploymentId

Create a new protected earnings record for an employment.

__Metadata :__ There is no metadata for this resource

__Defaults :__ Default values for a new object can be acquired by adding `/defaults' to the POST URL.
 """,
    tags=[
        'protected_earnings_operations',
        'wage_management',
        'employment_record_management',
    ],
)
def post_protected_earnings_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create a new protected earnings record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/providers/employers/employees/employments/{employmentId}/reinstate',
    description=""" __Activity name :__  PatchReinstateByEmploymentId

reinstate for an employment. <br/> Effectively,  termination is reversed by using this endpoint and therefore the employment will be considered active again. 

Maak een uitdienst melding ongedaan.<br/> Effectief gezien, 'datum uit dienst' gegevens worden teruggedraaid waardoor het dienstverband weer als actief zal worden beschouwd in Loket <br/>
 """,
    tags=[
        'employment_status_management',
        'employment_management',
        'employment_record_management',
    ],
)
def patch_reinstate_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Undo termination for an employment.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/socialsecuritybenefits',
    description=""" __Activity name:__ GetSocialSecurityBenefitsByEmploymentId
    

Get the list of social security benefits records for an employment
 """,
    tags=[
        'social_security_benefits_operations',
        'social_security_record_management',
        'benefits_and_deductions_management',
    ],
)
def get_social_security_benefit_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of social security benefits records for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/socialsecuritybenefits',
    description=""" __Activity name:__ PostSocialSecurityBenefitByEmploymentId
    

Create a social security benefits record for an employment
__Metadata :__ Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the POST URL.

__Defaults :__ Default values for a new object can be acquired by adding `/defaults' to the POST URL.
 """,
    tags=[
        'social_security_benefits_operations',
        'social_security_record_management',
        'benefits_and_deductions_management',
        'employment_record_management',
    ],
)
def post_social_security_benefit_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create a social security benefits record for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/socialsecurityconfigurations',
    description=""" __Activity name:__ GetSocialSecurityConfigurationsByEmploymentId
    

Get the list of social security configuration records for an employment
 """,
    tags=[
        'social_security_record_management',
        'social_security_management',
        'employee_management',
    ],
)
def get_social_security_configuration_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of social security records for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/socialsecurityconfigurations',
    description=""" __Activity name:__ PostSocialSecurityConfigurationByEmploymentId
    

Create a social security configuration record for an employment

__Defaults :__ Default values for a new object can be acquired by adding `/defaults' to the POST URL.
 """,
    tags=[
        'social_security_record_management',
        'social_security_management',
        'employment_record_management',
    ],
)
def post_social_security_configuration_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create a social security record for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/providers/employers/employees/employments/{employmentId}/terminate',
    description=""" __Activity name :__  PatchTerminateByEmploymentId

Terminate an employment. Effectively, the `endDate` of the employment will be set to the given date.<br/> Please note that setting the `endDate` for an employment affects multiple resources in Loket (e.g. wage, workingHours and absence). Note that the termination date is to be filled with the last day of employment.<br/>

If the termination needs to be reversed use the `../employments/{employmentId}/reinstate` endpoint. <br/> If the termination needs to be changed, use this endpoint to revise the termination data<br/>

The metadata for endOfEmploymentReason and endOfEmploymentReasonTaxAuthorities are included in the 'regular' metadata-endpoint of the Employment resource. 
 """,
    tags=[
        'employment_status_management',
        'employment_record_management',
        'employee_management',
    ],
)
def patch_terminate_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Terminate an employment.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/transitioncompensation',
    description=""" __Activity name :__ PostTransitionCompensationEmploymentByEmploymentId

Create an additional employment for an already existing and terminated employment with the sole purpose to pay out a transition compensation.
 """,
    tags=['transition_compensation_management', 'employment_management'],
)
def post_transition_compensation_employment_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create transition compensation employment for existing employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/transitioncompensation/calculate',
    description=""" This is a controller endpoint to perform a calculation. No actual data will be stored as a result of these actions.

__Activity name :__ PostCalculateTransitionCompensationByEmploymentId

__Defaults :__ Default values for a new object can be acquired by adding `/defaults` to the POST URL. This will only include the default values for the input parameter fields (the actual calculation of the transition compensation is not part of that)

A calculation help for determining the transition compensation amount. (rekenhulp transitievergoeding)
 """,
    tags=[
        'transition_compensation_management',
        'employment_fund_management',
        'employment_management',
        'wage_management',
    ],
)
def post_calculate_transition_compensation_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Calculate transition compensation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/transitioncompensation/calculate/defaults',
    description=""" __Activity name :__ GetCalculateTransitionCompensationDefaultsByEmploymentId


 Get the default values of the input parameters for the POST action.
 """,
    tags=['transition_compensation_management', 'employment_management'],
)
def get_calculate_transition_compensation_defaults_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Get default input parameters transition compensation
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/wachtgeld',
    description=""" __Activity name :__ GetWachtgeldByEmploymentId

Get a list of wachtgeld of the employment.

__Note:__ Wachtgeld, or redundancy pay, is an additional benefit that you receive on top of your unemployment benefit.
 """,
    tags=['wachtgeld_management', 'wage_management'],
)
def get_wachtgeld_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List wachtgeld
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/wachtgeld',
    description=""" __Activity name :__ PostWachtgeldByEmploymentId __Metadata:__ Possible options for fields of the type 'metadata' can be acquired(GET)by adding `/metadata` to the POST URL. __Defaults:__ Default values for a new object can be acquired by adding `/defaults' to the POST URL.
 """,
    tags=['wachtgeld_management', 'employment_management', 'employee_management'],
)
def post_wachtgeld_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Add a wachtgeld for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/wageprojection',
    description=""" __Activity name :__ PostWageProjectionByEmploymentId

This endpoint can only be used for employments that are already known in the loket.nl system.

__Metadata :__  No metadata endpoint available for this controller endpoint.

__Defaults :__ No defaults endpoint available for this controller endpoint. """,
    tags=['wage_projection_management', 'wage_management'],
)
def post_wage_projection_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Perform a wage projection
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/wageprojection/basedOnDefaultClaConfiguration',
    description=""" __Activity name :__ PostWageprojectionBasedOnDefaultClaConfigurationByEmploymentId

This endpoint can be used to calculate a wage projection based on a default collective labor agreement (CLA) configuration.  The input fields allow for certain customizations.

__Metadata :__  No metadata endpoint available for this controller endpoint.

__Defaults :__ No defaults endpoint available for this controller endpoint. """,
    tags=[
        'wage_projection_management',
        'wage_management',
        'employment_wage_management',
        'collective_labor_agreement_management',
    ],
)
def post_wage_projection_default_cla(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Perform a wage projection based on a default CLA configuration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/wages',
    description=""" __Activity name :__ GetWagesByEmploymentId

Get the list of wages for the employment
 """,
    tags=['wage_management', 'wage_record_management', 'employment_wage_management'],
)
def get_wages_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of wages for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/wages',
    description=""" __Activity name :__ PostWageByEmploymentId

Create a new wage record for the given employment

__Metadata :__ Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the POST Wage URL.

        
The possible options for `payGrade` are scoped by a `payScale`. To obtain the pay grades for a pay scale a metadata call has to be performed with the following format `../wages/metadata/payscale/{key}`. Where {key} is the key of the `payScale` (obtained via the first metadata call) for which the pay grades are to be returned.

__Defaults :__ Default values for a new object can be acquired by adding `/defaults' to the POST URL and performing a GET action.
 """,
    tags=['wage_management', 'employment_wage_management', 'wage_record_management'],
)
def post_wage_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create an wage for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/wagesheet/{year}',
    description=""" __Activity name :__ GetWageSheetByEmploymentIdAndYear

Download the wagesheet (loonstaat) for a payroll year

__Metadata :__ Possible options for `year` can be acquired (GET) the following URL /providers/employers/employees/employments/{employmentId}/wagesheet/metadata.

Returns the wage sheets for an employment
 """,
    tags=[
        'wage_management',
        'employment_wage_management',
        'wage_record_management',
        'payslip_management',
    ],
)
def get_wage_sheet_by_employment_id_and_year(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    employment_id: UUID = Path(..., alias='employmentId'),
    year: int = ...,
):
    """
    Download wage sheets for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/workinghours',
    description=""" __Activity name :__  GetWorkingHoursByEmploymentId  <br/> <br/>  Get the list of working hours for an employment <br/>
 """,
    tags=[
        'working_hours_management',
        'employment_record_management',
        'employee_management',
        'employee_hours_management',
    ],
)
def get_working_hours_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of working hours for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/employments/{employmentId}/workinghours',
    description=""" __Activity name :__  PostWorkingHoursByEmploymentId <br/> <br/>  Create a new working hours record for an employment<br/>  Please note that so-called chain validation exists for working hours records. In other words, the time periods of records for an employment cannot overlap with each other.<br/> A new or changed startDate affects the endDate of its preceding record.<br/>  When POST-ing a new record, the startDate must be greater then the preceding record's startDate.

__Metadata :__ Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the POST URL.

__Defaults :__ Default values for a new object can be acquired by adding `/defaults' to the POST URL.
 """,
    tags=[
        'working_hours_management',
        'employment_record_management',
        'employee_hours_management',
        'employment_management',
    ],
)
def post_working_hours_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create the working hours for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/yearendstatements',
    description=""" __Activity name :__ GetYearEndStatementsByEmploymentId

Get a list of year-end statements (i.e. list of years for which year-end statements are available) for an employment
 """,
    tags=['year_end_statements', 'employment_record_management', 'employee_management'],
)
def get_year_end_statements_by_employment_id(
    employment_id: UUID = Path(..., alias='employmentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Year-end statements for the employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/employments/{employmentId}/yearendstatements/{year}',
    description=""" __Activity name :__ GetYearEndStatementForYearByEmploymentId

Download the year-end statement of an employment for a year.
 """,
    tags=['year_end_statements', 'employment_record_management', 'report_downloads'],
)
def get_year_end_statement_for_year_by_employment_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    employment_id: UUID = Path(..., alias='employmentId'),
    year: int = ...,
):
    """
    Download year-end statement of an employment for a year
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/notes/{noteId}',
    description=""" __Activity name :__ DeleteEmployeeNoteByNoteId

Delete an existing note record
 """,
    tags=[
        'employment_note_management',
        'employee_note_management',
        'note_management',
        'employee_management',
    ],
)
def delete_employee_note_by_note_id(
    note_id: UUID = Path(..., alias='noteId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete an employee note record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/notes/{noteId}',
    description=""" __Activity name :__ GetEmployeeNoteByNoteId

Get the details of a note
 """,
    tags=['employee_note_management', 'employment_notes_management', 'note_management'],
)
def get_employee_note_by_note_id(
    note_id: UUID = Path(..., alias='noteId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Details of an employee note
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/notes/{noteId}',
    description=""" __Activity name :__ PutEmployeeNoteByNoteId

__Metadata :__ Possible options for fields of the type 'metadata' can be acquired (GET) by adding ` / metadata ` to the PUT URL.
 """,
    tags=['employment_note_management', 'employee_note_management', 'note_management'],
)
def put_employee_note_by_note_id(
    note_id: UUID = Path(..., alias='noteId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit an employee note record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/partners/{partnerId}',
    description=""" __Activity name :__ DeletePartnerByPartnerId

Delete an existing partner
 """,
    tags=['partner_management', 'employer_management'],
)
def delete_partner_by_partner_id(
    partner_id: UUID = Path(..., alias='partnerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a specific partner record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/partners/{partnerId}',
    description=""" __Activity name :__ GetPartnerByPartnerId

Get the details of a single partner
 """,
    tags=['partner_management', 'employee_partnership_management'],
)
def get_partner_by_partner_id(
    partner_id: UUID = Path(..., alias='partnerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Details of a single partner
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/partners/{partnerId}',
    description=""" __Activity name :__ PutPartnerByPartnerId

__Metadata :__  Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the PUT URL.

Edit the partner information
 """,
    tags=['partner_management', 'employee_and_family_management'],
)
def put_partner_by_partner_id(
    partner_id: UUID = Path(..., alias='partnerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit the details for a partner
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/providers/employers/employees/selfservice',
    description=""" __Activity name :__ PatchEmployeeSelfServiceAccessByEmployeeId

This endpoint allows the user to change the status of access for the employee's to ESS (Werknemer.loket).
 """,
    tags=['employee_access_management', 'employee_self_service_management'],
)
def patch_employee_self_service_access_by_employee_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Change the employee's self service (ESS) access
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/{employeeId}',
    description=""" __Activity name :__ GetEmployeeByEmployeeId

Get the details of a single employee
 """,
    tags=[
        'employee_management',
        'employee_profile_management',
        'employee_custom_fields_management',
        'employee_data_retrieval',
    ],
)
def get_employee_by_employee_id(
    employee_id: UUID = Path(..., alias='employeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Details of an employee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/{employeeId}',
    description=""" __Activity name :__ PutEmployeeByEmployeeId


Edit the employee details
<br />
Possible values for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the URL
 """,
    tags=[
        'employee_management',
        'employee_profile_management',
        'employee_absence_management',
    ],
)
def put_employee_by_employee_id(
    employee_id: UUID = Path(..., alias='employeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit the details of an employee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/{employeeId}/absences',
    description=""" __Activity name :__ GetAbsencesByEmployeeId

Get a list of all absences for the given employee
 """,
    tags=[
        'employee_absence_management',
        'absence_management',
        'absence_progress_management',
    ],
)
def get_absences_by_employee_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    employee_id: UUID = Path(..., alias='employeeId'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of absences for an employee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/{employeeId}/absences',
    description=""" __Activity name :__ PostAbsenceByEmployeeId

__Metadata :__  Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the POST URL.

__Defaults :__ Default values for a new object can be acquired by adding `/defaults' to the POST URL. 

Add an Absence (=verzuimmelding) for an employee. 

__Please note that if this endpoint is called succesfully both an absence (=verzuimmelding) AND one underlying absence progress (=verzuimverloop) will be created.__
 """,
    tags=['absence_management', 'employee_absence_management'],
)
def post_absence_by_employee_id(
    employee_id: UUID = Path(..., alias='employeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create an Absence for an employee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/{employeeId}/absences/overview',
    description=""" __Activity name :__ GetAbsenceOverviewByEmployeeId

Download the absence overview (verzuim) for a given time frame

__Metadata :__ No metadata
 """,
    tags=['employee_absence_management', 'absence_management'],
)
def get_absence_overview_by_employee_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    employee_id: UUID = Path(..., alias='employeeId'),
    start_date: constr(pattern=r'date') = Query(..., alias='startDate'),
    end_date: constr(pattern=r'date') = Query(..., alias='endDate'),
):
    """
    Download the absence overview for an employee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/{employeeId}/benifyurl',
    description=""" __Activity name :__ GetBenifyUrlByEmployeeId

Get a URL to access the Benify portal for an employee.
 """,
    tags=[
        'employee_management',
        'employee_access_management',
        'employee_profile_management',
    ],
)
def get_benify_url_by_employee_id(
    employee_id: UUID = Path(..., alias='employeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Get Benify URL for an employee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/{employeeId}/changeaddressrequest',
    description=""" __Activity name:__ PostChangeAddressRequestByEmployeeId
  

Allows the user to submit a change address request. Request because this request will trigger a workflow that might require the change to be approved.

__Metadata :__ Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the POST URL.

__Defaults :__ Default values for a new object can be acquired by adding `/defaults' to the POST URL.
 """,
    tags=['workflow_management', 'employee_management'],
)
def post_change_address_request_by_employee_id(
    employee_id: UUID = Path(..., alias='employeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Start the change address workflow for an employee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/{employeeId}/changecontactinformationrequest',
    description=""" __Activity name:__ PostChangeContactInformationRequestByEmployeeId
  

Allows the user to submit a change contactinformation request. Request because this request will trigger a workflow that might require the change to be approved.
 """,
    tags=['employee_contact_management', 'employee_management', 'workflow_management'],
)
def post_change_contact_information_request_by_employee_id(
    employee_id: UUID = Path(..., alias='employeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Start the change contactinformation workflow for an employee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/{employeeId}/children',
    description=""" __Activity name :__ GetChildrenByEmployeeId


 Get the list of children of the employee
 """,
    tags=['employee_family_management', 'employee_management', 'child_management'],
)
def get_children_by_employee_id(
    employee_id: UUID = Path(..., alias='employeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of children for an employee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/{employeeId}/children',
    description=""" __Activity name :__ PostChildByEmployeeId

__Metadata :__  Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the POST URL.

__Defaults :__ Default values for a new object can be acquired by adding `/defaults' to the POST URL. 

Add a child for an employee
 """,
    tags=[
        'child_management',
        'employee_family_management',
        'employee_management',
        'employee_and_family_management',
    ],
)
def post_child_by_employee_id(
    employee_id: UUID = Path(..., alias='employeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create an child for an employee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/{employeeId}/citizenservicenumber',
    description=""" __Activity name :__ GetCitizenServiceNumberByEmployeeId

Get the citizen service number of an employee. BSN is separately authorized in Loket and is therefore designed to have its own activities.
 """,
    tags=[
        'employee_concept_management',
        'employee_management',
        'employee_profile_management',
    ],
)
def get_citizen_service_number_by_employee_id(
    employee_id: UUID = Path(..., alias='employeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Citizen service number of an employee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/employees/{employeeId}/citizenservicenumber',
    description=""" __Activity name :__ PutCitizenServiceNumberByEmployeeId

Update the citizen service number of an employee.  BSN is separately authorized in Loket and is therefore designed to have its own activities.
 """,
    tags=['employee_concept_management', 'employee_management'],
)
def put_citizen_service_number_by_employee_id(
    employee_id: UUID = Path(..., alias='employeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Update the citizen service number of an employee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/{employeeId}/contacts',
    description=""" __Activity name :__ GetContactsByEmployeeId

Get list of contacts for an employee
 """,
    tags=['employee_contact_management', 'contact_management', 'employee_management'],
)
def get_contacts_by_employee_id(
    employee_id: UUID = Path(..., alias='employeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of contacts for an employee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/{employeeId}/contacts',
    description=""" __Activity name :__ PostContactByEmployeeId

__Metadata :__  Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the POST URL.

__Defaults :__ No default values

Create a new contact for an employee
 """,
    tags=['employee_management', 'contact_management', 'employee_contact_management'],
)
def post_contact_by_employee_id(
    employee_id: UUID = Path(..., alias='employeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create a contact for an employee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/{employeeId}/customfields',
    description=""" __Activity name :__ GetEmployeeCustomFieldsByEmployeeId

Get a list of the custom fields for an employee.

__Note:__ custom fields are user defined at the employer level.
 """,
    tags=[
        'employee_custom_field_management',
        'employee_management',
        'custom_field_management',
        'employee_custom_fields_management',
    ],
)
def get_employee_custom_fieldss_by_employee_id(
    employee_id: UUID = Path(..., alias='employeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List employee custom fields for an employee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/{employeeId}/customfields',
    description=""" __Activity name :__ PostEmployeeCustomFieldByEmployeeId

__Metadata:__ Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the POST URL.
 """,
    tags=[
        'custom_field_management',
        'employee_custom_field_management',
        'employee_custom_fields_management',
    ],
)
def post_employee_custom_field_by_employee_id(
    employee_id: UUID = Path(..., alias='employeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Add an employee custom field for an employee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/{employeeId}/educations',
    description=""" __Activity name :__ GetEducationsByEmployeeId

Get list of educations for an employee
 """,
    tags=[
        'education_record_management',
        'employee_education_management',
        'education_management',
    ],
)
def get_educations_by_employee_id(
    employee_id: UUID = Path(..., alias='employeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of educations for an employee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/{employeeId}/educations',
    description=""" __Activity name :__ PostEducationByEmployeeId

__Metadata :__  Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the POST URL.

__Defaults :__ No default values

Create a new education for an employee
 """,
    tags=[
        'employee_education_management',
        'education_record_management',
        'education_management',
        'employee_management',
    ],
)
def post_education_by_employee_id(
    employee_id: UUID = Path(..., alias='employeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create a education for an employee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/{employeeId}/employments',
    description=""" __Activity name :__ GetEmploymentsByEmployeeId

Get the list of employments for an employee
 """,
    tags=[
        'employee_employment_management',
        'employee_management',
        'employment_record_management',
        'employee_absence_management',
        'employment_management',
    ],
)
def get_employments_by_employee_id(
    employee_id: UUID = Path(..., alias='employeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of employments for an employee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/{employeeId}/employments',
    description=""" __Activity name :__ PostEmploymentByEmployeeId

Create an additional employment for an already existing employee.

Please note that the creation of an Employment is not RESTful by design.

In Loket, when a new Employee is created it will have to be created including its underlying Employment and its accessory resources. This specific endpoint is relevant in the following scenario: there is already an Employee with at least one Employment, and one wishes to create an additional Employment for that currently existing Employee. When successfully calling this endpoint, an Employment with its accessory resources will be created.

__Metadata :__ 
* Possible options (metadata) for generic fields of the type "metadata" can be acquired (GET) by adding `/metadata` to the URL.
* Possible options dependent on a specific payrollAdministration can be acquired by adding `/metadata/payrolladministration/{payrollAdministrationId}` to the url.
* Possible options for payGrade can be acquired by adding `metadata/payrolladministration/{payrollAdministrationId}/payscale/{payScaleKey}` to the url.

A `payGrade` has time based values dictating the wage for a given period. These values can be acquired by performing another metadata request by adding `/metadata/payrolladministration/{payrollAdministrationId}/payscale/{payScaleKey}/paygrade/{payGradeKey}` to the url. This endpoint has the optional parameter "date" that may be used to specifying a measure date.

__Defaults :__ Default values for a new object can be acquired by adding `/defaults` to the URL. 

        
Default values that are dependent on the selected payroll administration can be acquired by adding `../providers/employers/employees/employments/defaults/payrolladministration/{payrollAdministrationId}` to the URL.

__NonPayrollAdministrations__ For nonPayrollAdministrations the equivalent metaData-endpoints are also available as described above.  Also, a defaults endpoint is available for the nonPayrollAdministration.  Please note that this requires `../nonpayrolladministrations/{nonPayrollAdministrationId}` in the path.
 """,
    tags=[
        'employee_management',
        'employment_management',
        'employee_employment_management',
    ],
)
def post_employment_by_employee_id(
    employee_id: UUID = Path(..., alias='employeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create employment for existing employee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/{employeeId}/notes',
    description=""" __Activity name :__ GetEmployeeNotesByEmployeeId

Get a list of notes, available for the user, for the employee. 
 """,
    tags=[
        'employment_note_management',
        'employee_management',
        'employee_note_management',
    ],
)
def get_employee_notes_by_employee_id(
    employee_id: UUID = Path(..., alias='employeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Get a list of notes for an employee.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/{employeeId}/notes',
    description=""" __Activity name :__ PostEmployeeNoteByEmployeeId

__Metadata:__ Possible options for fields of the type 'metadata' can be acquired(GET)by adding `/metadata` to the POST URL.

__Defaults:__ Default values for a new object can be acquired by adding `/defaults' to the POST URL.
 """,
    tags=[
        'employee_note_management',
        'employment_notes_management',
        'employee_management',
    ],
)
def post_employee_note_by_employee_id(
    employee_id: UUID = Path(..., alias='employeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Add a note for an employee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/{employeeId}/occupationaldisabilities',
    description=""" __Activity name :__ GetOccupationalDisabilitiesByEmployeeId

Get the list of occupational disabilities for an employee. This endpoint returns occupational disability information regarding the Occupational Disability Insurance Act (WAO) and Work Capacity Act (WIA).
 """,
    tags=[
        'employee_management',
        'employee_absence_management',
        'employee_concept_management',
        'employee_custom_field_management',
    ],
)
def get_occupational_disabilities_by_employee_id(
    employee_id: UUID = Path(..., alias='employeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of occupational disabilities for an employee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/{employeeId}/partners',
    description=""" __Activity name :__ GetPartnersByEmployeeId

Get the list of partners of the employee
 """,
    tags=[
        'employee_partnership_management',
        'employee_management',
        'partner_management',
    ],
)
def get_partners_by_employee_id(
    employee_id: UUID = Path(..., alias='employeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of partners for an employee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/{employeeId}/partners',
    description=""" __Activity name :__ PostPartnerByEmployeeId

__Metadata :__  Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the POST URL.

__Defaults :__  Default values for a new object can be acquired by adding `/defaults' to the POST URL. 

Create the partner for an employee
 """,
    tags=[
        'employee_partnership_management',
        'partner_management',
        'employee_management',
    ],
)
def post_partner_by_employee_id(
    employee_id: UUID = Path(..., alias='employeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create the partner for an employee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/employees/{employeeId}/photo',
    description=""" __Activity name :__ DeleteEmployeePhotoByEmployeeId

Photo of the employee to use as an avatar/profile picture
 """,
    tags=['employee_photo_management', 'employee_management'],
)
def delete_employee_photo_by_employee_id(
    employee_id: UUID = Path(..., alias='employeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Delete employee photo
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/{employeeId}/photo',
    description=""" __Activity name :__ GetEmployeePhotoByEmployeeId

Photo of the employee to use as an avatar/profile picture

__Caching:__ This resource changes very infrequently and can be cached for a longer time.
 """,
    tags=['employee_photo_management', 'employee_management'],
)
def get_employee_photo_by_employee_id(
    employee_id: UUID = Path(..., alias='employeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Photo of an employee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/employees/{employeeId}/photo',
    description=""" __Activity name :__ PostEmployeePhotoByEmployeeId

Photo of the employee to use as an avatar/profile picture
 """,
    tags=['employee_photo_management', 'employee_management'],
)
def post_employee_photo_by_employee_id(
    employee_id: UUID = Path(..., alias='employeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Post employee photo
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/{employeeId}/photo/{version}',
    description=""" __Activity name :__ GetEmployeePhotoByEmployeeIdAndVersion

Photo of the employee to use as an avatar/profile picture

__Caching:__ This resource changes very infrequently and can be cached for a longer time.
 """,
    tags=['employee_photo_management', 'employee_management'],
)
def get_employee_photo_by_employee_id_and_version(
    employee_id: UUID = Path(..., alias='employeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    version: UUID = ...,
):
    """
    Photo of an employee
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/providers/employers/employees/{employeeId}/revokeEmployeeSelfServiceAccess',
    description=""" __Activity name :__ PatchRevokeEmployeeSelfServiceAccessByEmployeeId

This endpoint allows the user to set the 'revokeEmployeeSelfServiceAccessOn'. This date indicates on what day the access to WerknemerLoket (Employee Self Service) will be revoked (this is done by scheduled tasks that run during the night). This is particularly useful for situations where for example the employer wants to restrict access at a specific date in the future, for example 1st of May in the next year.

The value may be set to NULL and thus clearing the date on which access would be revoked. Please note that this endpoint will not automatically 'unblock' an Employee, as that would require a specific action.
 """,
    tags=['employee_access_management', 'user_management'],
)
def patch_revoke_employee_self_service_access_by_employee_id(
    employee_id: UUID = Path(..., alias='employeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Set the date on which to revoke ESS access
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/employees/{employeeId}/selfservice',
    description=""" __Activity name :__ GetEmployeeSelfServiceByEmployeeId

Get the details of an employee with regards to ESS access
 """,
    tags=['employee_self_service_management', 'employee_management'],
)
def get_employee_self_service_by_employee_id(
    employee_id: UUID = Path(..., alias='employeeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Details of and employees self service portal status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/functions/{functionId}',
    description=""" __Activity name:__ GetFunctionByFunctionId

Get the details of function
 """,
    tags=['function_management'],
)
def get_function_by_function_id(
    function_id: UUID = Path(..., alias='functionId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Details of a function
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/functions/{functionId}',
    description=""" __Activity name:__ PutFunctionByFunctionId

Edit the details for a function

__Metadata:__ No metadata
 """,
    tags=['function_management'],
)
def put_function_by_function_id(
    function_id: UUID = Path(..., alias='functionId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit the details of a function
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/lastmodifiedversionnumbers',
    description=""" __Activity name :__ GetEmployerLastModifiedVersionNumbersByUser

**What does the 'last modified' version number reflect**

The sequence number of an employer is a sequential number that reflects whether any changes have occurred in any of its UNDERLYING employments.

More precisely, it reflects the sequence number after the latest change of any database record that relates to an employment within this employer.   What we consider to be 'underlying' employment data is based on a predefined set of tables, and of course given id.  This predefined set of tables can be found [here](../TablesLastModifiedVersionNumber.xlsx)

The scope of this predefined set is to represent 'static' employment data (vaste gegevens), and thus excludes payroll period data (variabele gegevens).

**When to use**

This endpoint is most useful for integrations that regularly synchronize Loket employment data with another system.  As there are no webhooks available, in practice these integrations would need to regularly poll all data to see whether there any changes in the employment data.  The most elementary approach of getting all employment data every time you sync acquires a LOT of calls, in some cases even millions per day.  Even though we can handle quite a lot, this is not always the desired way for both client and server. Hence, this endpoint enables an alternative solution to set up such an integration.

**How to use**

With every update (including additions and deletions) the version number will increase. I.e. the version number will NEVER decrease over time.  (Please note this is not only true within the context of a single employer (or any other entity) but applies to all changes in the database).
Consequently, in practice one would use this endpoint to check if any empLoyer version numbers have increased by applying the filter query parameter to the version field, for example `?filter=version gt 70429274`.

*Recommended usage*

* Perform your regular synchronization of static employment data
* Store the highest version number, for which you have now processed all changes. (You may use the following parameter to do this `?orderBy=-lastModifiedVersionNumber` )
* Next time you want to perform synchronization. Call this endpoint with parameter `?filter=lastModifiedVersionNumber gt {{YourVersionNumber}}`
* Only get employment information for employers that are included in that filtered list. (exclude all other employers as you already know there have been no changes since the last synchronization)
 """,
    tags=['employer_data_retrieval', 'employer_data_management', 'employer_management'],
)
def get_employer_last_modified_version_numbers_by_user(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of employer last modified version numbers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/leavePolicies/agebasedleave/{ageBasedLeaveId}',
    description=""" __Activity name :__ DeleteAgeBasedLeaveByAgeBasedLeaveId

Delete an age based leave record
 """,
    tags=[
        'age_based_leave_management',
        'leave_management',
        'employee_absence_management',
    ],
)
def delete_age_based_leave_by_age_based_leave_id(
    age_based_leave_id: UUID = Path(..., alias='ageBasedLeaveId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete an age based leave record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/leavePolicies/agebasedleave/{ageBasedLeaveId}',
    description=""" __Activity name :__ GetAgeBasedLeaveByAgeBasedLeaveId

Returns one leave age based leave record """,
    tags=['age_based_leave_management', 'leave_management', 'leave_policy_management'],
)
def get_age_based_leave_by_age_based_leave_id(
    age_based_leave_id: UUID = Path(..., alias='ageBasedLeaveId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    An age based leave record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/leavePolicies/agebasedleave/{ageBasedLeaveId}',
    description=""" __Activity name :__ PutAgeBasedLeaveByAgeBasedLeaveId

Edit the details of an age based leave record
 """,
    tags=[
        'age_based_leave_management',
        'leave_management',
        'leave_management_operations',
    ],
)
def put_age_based_leave_by_age_based_leave_id(
    age_based_leave_id: UUID = Path(..., alias='ageBasedLeaveId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit the details of an age based leave
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/leavePolicies/wagebasedleave/{wageBasedLeaveId}',
    description=""" __Activity name :__ DeleteWageBasedLeaveByWageBasedLeaveId

Delete a wage based leave record
 """,
    tags=['wage_based_leave_management', 'leave_management', 'absence_management'],
)
def delete_wage_based_leave_by_wage_based_leave_id(
    wage_based_leave_id: UUID = Path(..., alias='wageBasedLeaveId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a wage based leave record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/leavePolicies/wagebasedleave/{wageBasedLeaveId}',
    description=""" __Activity name :__ GetWageBasedLeaveByAgeBasedLeaveId

Returns one leave wage based leave record """,
    tags=['wage_based_leave_management', 'leave_management', 'employment_management'],
)
def get_wage_based_leave_by_wage_based_leave_id(
    wage_based_leave_id: UUID = Path(..., alias='wageBasedLeaveId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    A wage based leave record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/leavePolicies/wagebasedleave/{wageBasedLeaveId}',
    description=""" __Activity name :__ PutWageBasedLeaveByWageBasedLeaveId

Edit the details of a wage based leave record
 """,
    tags=[
        'wage_based_leave_management',
        'leave_management',
        'employment_management',
        'leave_management_operations',
    ],
)
def put_wage_based_leave_by_wage_based_leave_id(
    wage_based_leave_id: UUID = Path(..., alias='wageBasedLeaveId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit the details of a wage based leave
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/leavePolicies/yearsofservicebasedleave/{yearsOfServiceBasedLeaveId}',
    description=""" __Activity name :__ DeleteYearsOfServiceBasedLeaveByYearsOfServiceBasedLeaveId

Delete an years of service based leave record
 """,
    tags=['years_of_service_leave_management', 'leave_management'],
)
def delete_years_of_service_leave_record(
    years_of_service_based_leave_id: UUID = Path(
        ..., alias='yearsOfServiceBasedLeaveId'
    ),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete an years of service based leave record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/leavePolicies/yearsofservicebasedleave/{yearsOfServiceBasedLeaveId}',
    description=""" __Activity name :__ GetYearsOfServiceBasedLeaveByYearsOfServiceBasedLeaveId

Returns one leave years of service based leave record """,
    tags=[
        'years_of_service_leave_management',
        'leave_management',
        'leave_policy_management',
        'employment_management',
    ],
)
def get_service_based_leave_record_by_id(
    years_of_service_based_leave_id: UUID = Path(
        ..., alias='yearsOfServiceBasedLeaveId'
    ),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    A years of service based leave record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/leavePolicies/yearsofservicebasedleave/{yearsOfServiceBasedLeaveId}',
    description=""" __Activity name :__ PutYearsOFServiceBasedLeaveByYearsOfServiceBasedLeaveId

Edit the details of a years of service based leave record
 """,
    tags=[
        'years_of_service_leave_management',
        'leave_management',
        'leave_policy_management',
        'employment_management',
    ],
)
def edit_years_of_service_leave_details(
    years_of_service_based_leave_id: UUID = Path(
        ..., alias='yearsOfServiceBasedLeaveId'
    ),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit the details of a years of service based leave
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/leavePolicies/{leavePolicyId}',
    description=""" __Activity name :__ DeleteLeavePolicyByLeavePolicyId

Delete a Leave policy
 """,
    tags=['leave_policy_management', 'leave_management_operations'],
)
def delete_leave_policy_by_leave_policy_id(
    leave_policy_id: UUID = Path(..., alias='leavePolicyId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a leave policy
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/leavePolicies/{leavePolicyId}',
    description=""" __Activity name :__ GetLeavePolicyByLeavePolicyId

Returns one leave policy """,
    tags=['leave_policy_management', 'leave_management_operations'],
)
def get_leave_policy_by_leave_policy_id(
    leave_policy_id: UUID = Path(..., alias='leavePolicyId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    A single leave policy
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/leavePolicies/{leavePolicyId}',
    description=""" __Activity name :__ PutLeavePolicyByLeavePolicyId

Edit the details of a leave policy
 """,
    tags=['leave_policy_management', 'leave_management_operations'],
)
def put_leave_policy_by_leave_policy_id(
    leave_policy_id: UUID = Path(..., alias='leavePolicyId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit the details of a leave policy
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/leavePolicies/{leavePolicyId}/agebasedleave',
    description=""" __Activity name :__ GetAgeBasedLeaveByLeavePolicyId <br/>  <br/>  Returns the age based leave for the given leave policy.
 """,
    tags=[
        'age_based_leave_management',
        'leave_policy_management',
        'leave_management_operations',
    ],
)
def get_age_based_leave_by_leave_policy_id(
    leave_policy_id: UUID = Path(..., alias='leavePolicyId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Age based leave
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/leavePolicies/{leavePolicyId}/agebasedleave',
    description=""" __Activity name :__ PostAgeBasedLeaveByLeavePolicyId

Add an age based leave 
 """,
    tags=['age_based_leave_management', 'leave_management', 'leave_policy_management'],
)
def post_age_based_leave_by_leave_policy_id(
    leave_policy_id: UUID = Path(..., alias='leavePolicyId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create an age based leave record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/leavePolicies/{leavePolicyId}/wagebasedleave',
    description=""" __Activity name :__ GetWageBasedLeaveByLeavePolicyId <br/>  <br/>  Returns the wage based leave for the given leave policy.
 """,
    tags=[
        'wage_based_leave_management',
        'leave_policy_management',
        'leave_management_operations',
        'employment_management',
    ],
)
def get_wage_based_leave_by_leave_policy_id(
    leave_policy_id: UUID = Path(..., alias='leavePolicyId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Wage based leave
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/leavePolicies/{leavePolicyId}/wagebasedleave',
    description=""" __Activity name :__ PostWageBasedLeaveByLeavePolicyId

Add a wage based leave 
 """,
    tags=[
        'wage_based_leave_management',
        'leave_policy_management',
        'leave_management_operations',
    ],
)
def post_wage_based_leave_by_leave_policy_id(
    leave_policy_id: UUID = Path(..., alias='leavePolicyId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create a wage based leave record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/leavePolicies/{leavePolicyId}/yearsofservicebasedleave',
    description=""" __Activity name :__ GetYearsOfServiceBasedLeaveByLeavePolicyId <br/>  <br/>  Returns the years of service based leave for the given leave policy.
 """,
    tags=[
        'years_of_service_leave_management',
        'leave_policy_management',
        'leave_management_operations',
    ],
)
def get_years_of_service_based_leave_by_leave_policy_id(
    leave_policy_id: UUID = Path(..., alias='leavePolicyId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    years of service based leave
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/leavePolicies/{leavePolicyId}/yearsofservicebasedleave',
    description=""" __Activity name :__ PostYearsOfServiceBasedLeaveByLeavePolicyId

Add a years of service based leave 
 """,
    tags=[
        'years_of_service_leave_management',
        'leave_policy_management',
        'leave_management',
    ],
)
def post_years_of_service_based_leave_by_leave_policy_id(
    leave_policy_id: UUID = Path(..., alias='leavePolicyId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create a years of service based leave record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/leavepolicies/{leavePolicyId}/employments',
    description=""" __Activity name:__ GetEmploymentsByLeavePolicyId
Get the list of employments that are linked for this leave policy.
When a leave policy and an employment are linked, that means the employment will be provided with leave based on the policy.
 """,
    tags=[
        'leave_management',
        'employment_management',
        'leave_policy_management',
        'leave_management_operations',
    ],
)
def get_employments_by_leave_policy_id(
    leave_policy_id: UUID = Path(..., alias='leavePolicyId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Get list of linked employments for the leave policy
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/providers/employers/leavepolicies/{leavePolicyId}/employments',
    description=""" __Activity name:__ PatchEmploymentsByLeavePolicyId
This endpoint enables the user to create or delete multiple 'linkages' with one call. This is mostly useful updating a larger number of employments for the given leave policy.
 """,
    tags=[
        'leave_management',
        'leave_policy_management',
        'employment_management',
        'leave_management_operations',
    ],
)
def patch_employments_by_leave_policy_id(
    leave_policy_id: UUID = Path(..., alias='leavePolicyId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    body: ProvidersEmployersLeavepoliciesLeavePolicyIdEmploymentsPatchRequest = ...,
):
    """
    Create or delete multiple linked employments for the leave policy
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/minimized',
    description=""" __Activity name :__ GetEmployersMinimizedByUser

Get a list of all employers accessible to the current user.  With this endpoint we introduced the "Minimized" resource which contains fewer fields then `/providers/employers`. This version should increase performance when requesting employments for large employers.
 """,
    tags=[
        'employer_data_retrieval',
        'employer_management',
        'provider_information_retrieval',
    ],
)
def get_employers_minimized_by_user(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of employers with fewer fields for performance reasons
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/notes/{noteId}',
    description=""" __Activity name :__ DeleteEmployerNoteByNoteId

Delete an existing note record
 """,
    tags=['employer_note_management', 'note_management', 'employment_notes_management'],
)
def delete_employer_note_by_note_id(
    note_id: UUID = Path(..., alias='noteId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete an employer note record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/notes/{noteId}',
    description=""" __Activity name :__ GetEmployerNoteByNoteId

Get the details of a note
 """,
    tags=['employer_note_management', 'note_management', 'employment_notes_management'],
)
def get_employer_note_by_note_id(
    note_id: UUID = Path(..., alias='noteId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Details of an employer note
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/notes/{noteId}',
    description=""" __Activity name :__ PutEmployerNoteByNoteId

__Metadata :__ Possible options for fields of the type 'metadata' can be acquired (GET) by adding ` / metadata ` to the PUT URL.
 """,
    tags=['employer_note_management', 'employment_note_management', 'note_management'],
)
def put_employer_note_by_note_id(
    note_id: UUID = Path(..., alias='noteId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit an employer note record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/providers/employers/notifications',
    description=""" __Activity name :__ PatchNotificationsByEmployerId

Mark notifications as read
 """,
    tags=['announcement_management', 'notification_management'],
)
def patch_notifications(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    body: ProvidersEmployersNotificationsPatchRequest = ...,
):
    """
    Mark one or more notifications as read.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/providers/employers/payrollAdministrations/{payrollAdministrationId}/mdvNotifications',
    description=""" __Activity name :__ PatchMdvNotificationsByPayrollAdministrationId

Mdv notifications
 """,
    tags=['notification_management', 'application_management'],
)
def patch_mdv_notifications_by_payroll_administration_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    payroll_administration_id: UUID = Path(..., alias='payrollAdministrationId'),
):
    """
    MDV notifications
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/apgpensiondeclarations/{apgPensionDeclarationId}',
    description=""" __Activity name :__ GetApgPensionDeclarationByApgPensionDeclarationId


Details of APG pension declaration
 """,
    tags=['apg_pension_declaration_management', 'pension_declarations'],
)
def get_apg_pension_declaration_by_apg_pension_declaration_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    apg_pension_declaration_id: UUID = Path(..., alias='apgPensionDeclarationId'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Detail APG pension declaration for an administration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/providers/employers/payrolladministrations/apgpensiondeclarations/{apgPensionDeclarationId}',
    description=""" __Activity name :__ PatchApgPensionDeclarationByApgPensionDeclarationId


This endpoints changes the status of the Apg pensiondeclaration based on the provided action.
 """,
    tags=[
        'apg_pension_declaration_management',
        'declaration_management',
        'pension_declarations',
    ],
)
def patch_apg_pension_declaration_by_apg_pension_declaration_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    apg_pension_declaration_id: str = Path(..., alias='apgPensionDeclarationId'),
    body: ProvidersEmployersPayrolladministrationsApgpensiondeclarationsApgPensionDeclarationIdPatchRequest = ...,
):
    """
    Change the status of a apg pension declaration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/apgpensiondeclarations/{apgPensionDeclarationId}/message',
    description=""" __Activity name :__ GetMessageByApgPensionDeclarationId  


Download the message of the APG pension declaration (pensioenaangiftebericht) in xml. Please note that this does NOT refer to the response message, but to the initial message i.e. pensioenaangiftebericht.
 """,
    tags=[
        'apg_pension_declaration_management',
        'declaration_management',
        'pension_declarations',
    ],
)
def get_message_by_apg_pension_declaration_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    apg_pension_declaration_id: UUID = Path(..., alias='apgPensionDeclarationId'),
):
    """
    Download the message of a of an APG pension declaration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/apgpensiondeclarations/{apgPensionDeclarationId}/overview',
    description=""" __Activity name :__ GetOverviewByApgPensionDeclarationId


Download the APG pension declaration overiew
 """,
    tags=[
        'apg_pension_declaration_management',
        'report_downloads',
        'declaration_management',
        'pension_declarations',
    ],
)
def get_overview_by_apg_pension_declaration_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    apg_pension_declaration_id: UUID = Path(..., alias='apgPensionDeclarationId'),
):
    """
    Download the overview report of an APG pension declaration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/journalruns/{journalrunId}',
    description=""" __Activity name :__ GetJournalRunByJournalRunId

Returns the details of a journal run. </br>
 """,
    tags=['journal_run_management'],
)
def get_journal_run_by_journal_run_id(
    journalrun_id: UUID = Path(..., alias='journalrunId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Details of a journal run
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/providers/employers/payrolladministrations/journalruns/{journalrunId}',
    description=""" __Activity name :__ PatchJournalRunByJournalRunId

Update the status of a journal run
* Action 'markAsSuccessfullyExported'; will change the status of the journal run to 'exported'. Please note this action will not perform an actual export, but simply allows the user the manage status to match their actualities.</br>
* Action 'MarkAsProcessingFailed'; will change the status of the journal run to 'export failed'. Please note this action will not perform an actual export, but simply allows the user the manage status to match their actualities.
 """,
    tags=['journal_run_management', 'payroll_run_management'],
)
def patch_journal_run_by_journal_run_id(
    journalrun_id: UUID = Path(..., alias='journalrunId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Change the status of a journal run
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/payrolladministrations/journalruns/{journalrunId}/download',
    description=""" __Activity name :__ PostDownloadJournalRunExportByJournalRunId

Download a journal run to a journal application. Use the defaults and metadata to acquire the journal application settings.
 """,
    tags=['journal_run_management', 'download_request_management'],
)
def post_download_journal_run_export_by_journal_run_id(
    journalrun_id: UUID = Path(..., alias='journalrunId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Download the journal run
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/journalruns/{journalrunId}/errors',
    description=""" __Activity name :__ GetJournalRunErrorsByJournalRunId

Errors that occured while processing the journalrun can be obtained via this endpoint.
 """,
    tags=['journal_run_management'],
)
def get_journal_run_errors_by_journal_run_id(
    journalrun_id: UUID = Path(..., alias='journalrunId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Errors of a journal run
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/journalruns/{journalrunId}/exportAuditTrail',
    description=""" __Activity name :__ GetJournalRunExportAuditTrailByJournalRunId

Returns the export audit trail for a journal run
 """,
    tags=['journal_run_management', 'report_downloads'],
)
def get_journal_run_export_audit_trail_by_journal_run_id(
    journalrun_id: UUID = Path(..., alias='journalrunId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List export attempts for a journal run
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/journalruns/{journalrunId}/results',
    description=""" __Activity name :__ GetJournalRunResultsByJournalRunId

Returns the journal run results for the journal run. Journal runs with journalRunStatus = 0,1,2,3 dont have results and this endpoint will return an error if called for a journal run with that status.
 """,
    tags=['journal_run_management', 'payroll_data_management'],
)
def get_journal_run_results_by_journal_run_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    journalrun_id: UUID = Path(..., alias='journalrunId'),
):
    """
    Get journal results for a journal run
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/journalruns/{journalrunId}/runoverview',
    description=""" __Activity name :__ GetRunOverviewByJournalRunId

Returns the journal run overview in csv for the journal run. Journal runs with journalRunStatus = 0,1,2,3 dont have results and this endpoint will return an error if called for a journal run with that status.
 """,
    tags=['journal_run_management', 'report_downloads'],
)
def get_run_overview_by_journal_run_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    journalrun_id: UUID = Path(..., alias='journalrunId'),
    report_journal_number: int = Query(..., alias='reportJournalNumber'),
    report_voucher_number: int = Query(..., alias='reportVoucherNumber'),
    report_description: Optional[str] = Query(None, alias='reportDescription'),
    report_year: int = Query(..., alias='reportYear'),
    report_period_number: int = Query(..., alias='reportPeriodNumber'),
    report_date: date_aliased = Query(..., alias='reportDate'),
):
    """
    Get journal run overview for a journal run
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/journalruns/{journalrunId}/runoverviewperemployment',
    description=""" __Activity name :__ GetRunOverviewPerEmploymentByJournalRunId

Returns the journal run overview in csv for the journal run. Journal runs with journalRunStatus = 0,1,2,3 dont have results and this endpoint will return an error if called for a journal run with that status.
 """,
    tags=['journal_run_management', 'employment_record_management'],
)
def get_run_overview_per_employment_by_journal_run_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    journalrun_id: UUID = Path(..., alias='journalrunId'),
    report_journal_number: int = Query(..., alias='reportJournalNumber'),
    report_voucher_number: int = Query(..., alias='reportVoucherNumber'),
    report_description: Optional[str] = Query(None, alias='reportDescription'),
    report_year: int = Query(..., alias='reportYear'),
    report_period_number: int = Query(..., alias='reportPeriodNumber'),
    report_date: date_aliased = Query(..., alias='reportDate'),
):
    """
    Get journal run overview per employment for a journal run
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/payrolladministrations/journalruns/{journalrunId}/send',
    description=""" __Activity name :__ PostSendJournalRunExportByJournalRunId

Send a journal run to a journal application. Use the defaults and metadata to acquire the journal application settings. The defaults endpoint contains values for all required fields. 

There are two metadata endpoints: 

- /journalruns/{journalrunId}/send/metadata

- /journalruns/{journalrunId}/send/metadata/accountId/{accountId}
 """,
    tags=['journal_run_management', 'payroll_run_management'],
)
def post_send_journal_run_export_by_journal_run_id(
    journalrun_id: UUID = Path(..., alias='journalrunId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Send the journal run
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/providers/employers/payrolladministrations/payrollruns',
    description=""" __Activity name :__ PatchPayrollrunsByPayrollRunIds

This action may only be performed succesfully of the following requirements are met;
* The payroll run is ready for approval (status 1)

Update the status of one or more payrollruns
 """,
    tags=['payroll_run_management', 'payroll_data_management', 'payroll_audit_trail'],
)
def patch_payrollruns_by_payroll_run_ids(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    body: ProvidersEmployersPayrolladministrationsPayrollrunsPatchRequest = ...,
):
    """
    Change the status of payrollruns
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/payrolladministrations/payrollruns/notes/{noteId}',
    description=""" __Activity name :__ DeletePayrollRunNoteByNoteId

Delete an existing note record
 """,
    tags=['employment_note_management', 'payroll_run_management'],
)
def delete_payroll_run_note_by_note_id(
    note_id: UUID = Path(..., alias='noteId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a payroll run note record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/payrollruns/notes/{noteId}',
    description=""" __Activity name :__ GetPayrollRunNoteByNoteId

Get the details of a note
 """,
    tags=[
        'payroll_run_management',
        'employment_note_management',
        'payroll_data_management',
        'note_management',
    ],
)
def get_payroll_run_note_by_note_id(
    note_id: UUID = Path(..., alias='noteId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Details of a payroll run note
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/payrolladministrations/payrollruns/notes/{noteId}',
    description=""" __Activity name :__ PutPayrollRunNoteByNoteId

__Metadata :__ Possible options for fields of the type 'metadata' can be acquired (GET) by adding ` / metadata ` to the PUT URL.
 """,
    tags=['employment_note_management', 'payroll_run_management'],
)
def put_payroll_run_note_by_note_id(
    note_id: UUID = Path(..., alias='noteId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit a payroll run note record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/payrollruns/sepafiles/{sepafileId}',
    description=""" __Activity name :__ GetSepaFileBySepaFileId

Returns the specified SEPA payments file as a XML file. """,
    tags=['sepa_file_operations', 'payment_information_management'],
)
def get_sepa_file_by_sepa_file_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    sepafile_id: UUID = Path(..., alias='sepafileId'),
    payment_type: Optional[PaymentType] = Query('Salary', alias='paymentType'),
    batch_booking: Optional[BatchBooking] = Query(
        'BtchBookgExclude', alias='batchBooking'
    ),
    requested_execution_date: date_aliased = Query(..., alias='requestedExecutionDate'),
):
    """
    Download a SEPA file
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/payrollruns/{payrollrunId}',
    description=""" __Activity name :__ GetPayrollRunByPayrollRunId

Get the details of a single payrollrun
 """,
    tags=['payroll_run_management', 'payroll_data_management'],
)
def get_payroll_run_by_payroll_run_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payrollrun_id: UUID = Path(..., alias='payrollrunId'),
):
    """
    Details of a payrollrun
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/payrollruns/{payrollrunId}/BalanceSheet',
    description=""" __Activity name :__ GetPayrollRunBalanceSheetByPayrollRunId

This endpoint returns per payroll components, marked as relevant for the general ledge (balance sheet), the sum of the values.

If for the given payroll period of the payroll run a "journal profile" is configured the endpoint also returns the ledger account and costcenter/costunit linked to the given payroll component in the "journal profile"
 """,
    tags=['payroll_run_management', 'payroll_data_management'],
)
def get_payroll_run_balance_sheet_by_payroll_run_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payrollrun_id: UUID = Path(..., alias='payrollrunId'),
):
    """
    Get payroll run balance sheet
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/payrollruns/{payrollrunId}/defaultset',
    description=""" Returns the default set of downloads for the payroll run as a PDF file. The default set of downloads can be defined by the user.
 """,
    tags=['payroll_run_management', 'report_downloads', 'payroll_data_management'],
)
def get_default_set_by_payroll_run_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payrollrun_id: UUID = Path(..., alias='payrollrunId'),
):
    """
    Download the default set of downloads for a payroll run
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/payrollruns/{payrollrunId}/errorsandwarnings',
    description=""" __Activity name :__ GetErrorsAndWarningsByPayrollRunId

Returns an overview of errors and warnings that occurred during the payroll run as a PDF file.
 """,
    tags=[
        'payroll_run_management',
        'payroll_data_management',
        'report_downloads',
        'payroll_audit_trail',
    ],
)
def get_errors_and_warnings_by_payroll_run_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payrollrun_id: UUID = Path(..., alias='payrollrunId'),
):
    """
    Download errors and warnings for a payroll run
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/payrollruns/{payrollrunId}/journalentriesperdistributionunitoverviews',
    description=""" __Activity name :__ GetJournalEntriesPerDistributionUnitOverviewsByPayrollRunId

Returns the journal entries by distribution Unit for a payroll run as a PDF file.
 """,
    tags=['journal_run_management', 'payroll_run_management', 'report_downloads'],
)
def download_journal_entries_by_distribution_unit(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payrollrun_id: UUID = Path(..., alias='payrollrunId'),
):
    """
    Download the journal entries by distribution Unit.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/payrollruns/{payrollrunId}/notes',
    description=""" __Activity name :__ GetPayrollRunNotesByPayrollRunId

Get a list of notes, available for the user, for the payroll run. 
 """,
    tags=[
        'payroll_run_management',
        'employment_note_management',
        'payroll_data_management',
    ],
)
def get_payroll_run_notes_by_payroll_run_id(
    payrollrun_id: UUID = Path(..., alias='payrollrunId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Get a list of notes for a payroll run.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/payrolladministrations/payrollruns/{payrollrunId}/notes',
    description=""" __Activity name :__ PostPayrollRunNoteByPayrollRunId

__Metadata:__ Possible options for fields of the type 'metadata' can be acquired(GET)by adding `/metadata` to the POST URL.

__Defaults:__ Default values for a new object can be acquired by adding `/defaults' to the POST URL.
 """,
    tags=['payroll_run_management', 'employment_note_management'],
)
def post_payroll_run_note_by_payroll_run_id(
    payrollrun_id: UUID = Path(..., alias='payrollrunId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Add a note for a payroll run
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/payrollruns/{payrollrunId}/paymentoverviews',
    description=""" __Activity name :__ GetPaymentOverviewsByPayrollRunId

Returns payment overviews for a payroll run as a PDF file. By default the payment overview 1 is returned.
 """,
    tags=['payroll_run_management', 'report_downloads', 'payroll_data_management'],
)
def get_payment_overviews_by_payroll_run_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payrollrun_id: UUID = Path(..., alias='payrollrunId'),
):
    """
    Download payment overviews for a payroll run
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/payrollruns/{payrollrunId}/payrollcontrolregister',
    description=""" __Activity name :__ GetPayrollControlRegisterByPayrollRunId

Returns payroll control register for a payroll run as a PDF file.
 """,
    tags=[
        'payroll_run_management',
        'payroll_data_management',
        'report_downloads',
        'payroll_component_handling',
    ],
)
def get_payroll_control_register_by_payroll_run_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payrollrun_id: UUID = Path(..., alias='payrollrunId'),
):
    """
    Download payroll control register for a payroll run
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/payrollruns/{payrollrunId}/payslips',
    description=""" __Activity name :__ GetPayslipsByPayrollRunId


Returns the payslips for a payroll run as a PDF file. By default the payslips are sorted by `employeeNumber`.
 """,
    tags=['payroll_data_management', 'payslip_management', 'payroll_run_management'],
)
def get_payslips_by_payroll_run_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payrollrun_id: UUID = Path(..., alias='payrollrunId'),
):
    """
    Download payslips for a payroll run
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/payrollruns/{payrollrunId}/results',
    description=""" __Activity name :__ GetPayrollRunResultsByPayrollRunId  

Returns the results for the payroll run
 """,
    tags=[
        'payroll_run_management',
        'payroll_data_management',
        'payroll_variable_management',
    ],
)
def get_payroll_run_results_by_payroll_run_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payrollrun_id: UUID = Path(..., alias='payrollrunId'),
):
    """
    Get results for a payroll run
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/payrollruns/{payrollrunId}/runoverviews',
    description=""" __Activity name :__ GetRunOverviewsByPayrollRunId

Returns run overviews for a payroll run as a PDF file.
 """,
    tags=['payroll_run_management', 'report_downloads', 'payroll_data_management'],
)
def get_run_overviews_by_payroll_run_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payrollrun_id: UUID = Path(..., alias='payrollrunId'),
):
    """
    Download run overviews for a payroll run
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/payrollruns/{payrollrunId}/sepafiles',
    description=""" __Activity name :__ GetSepaFilesByPayrollRunId

Returns the SEPA file(s) for the specified payroll run. """,
    tags=[
        'sepa_file_operations',
        'payroll_run_management',
        'payment_information_management',
        'payroll_data_management',
    ],
)
def get_sepa_files_by_payroll_run_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payrollrun_id: UUID = Path(..., alias='payrollrunId'),
):
    """
    Get a list of SEPA files for a payroll run
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/payrollruns/{payrollrunId}/totalsepafile',
    description=""" __Activity name :__ GetTotalSepaFileByPayrollRunId

Returns the total SEPA payments file as a XML file. This file contains the payments of all the available SEPA payment files available for the specified payroll run. """,
    tags=[
        'sepa_file_operations',
        'payroll_data_management',
        'payment_information_management',
        'payroll_run_management',
    ],
)
def get_total_sepa_file_by_payroll_run_id(
    payrollrun_id: UUID = Path(..., alias='payrollrunId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payment_type: Optional[PaymentType] = Query('Salary', alias='paymentType'),
    batch_booking: Optional[BatchBooking] = Query(
        'BtchBookgExclude', alias='batchBooking'
    ),
    requested_execution_date: date_aliased = Query(..., alias='requestedExecutionDate'),
):
    """
    Download a total SEPA file
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/payrolladministrations/payrollruns/{payrollrunId}/undo',
    description=""" __Activity name :__ UndoPayrollRunByPayrollRunId This is a controller endpoint to perform an action.

In the older Loket GUI this specific action is referred to as 'Verwijderen loonrun' If this action is performed succesfully then the payroll run will be 'deleted' in the sense that its results will be undone. Please note that situations where an approved payroll run would have to be 'undone' should be generally be avoided. Preferably any mistakes or consistencies should be picked out at an earlier stage in the payroll process.

This action may only be performed succesfully of the following requirements are met;

* The payroll run is the very last payroll run that has been approved within this payroll administration
* It is not possible to undo a  payroll run if there is currently a payroll run with status 0  (to be processed) or 1 (awaiting approval) within the payroll administation.
* Additionally, no related (external) information should still be present for the given payroll run. This will be validated by the endpoint.

__Metadata :__  No metadata endpoint available for this controller endpoint.

__Defaults :__ No defaults endpoint available for this controller endpoint. """,
    tags=['payroll_run_management'],
)
def undo_payroll_run_by_payroll_run_id(
    payrollrun_id: UUID = Path(..., alias='payrollrunId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Undo payroll run (verwijderen loonrun)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/payrollruns/{payrollrunId}/wagesheets',
    description=""" __Activity name :__ GetWageSheetsByPayrollRunId

Returns the wage sheets for a payroll run as a PDF file or XLSX file. By default the wage sheets contain information on both the employer and the employees.
 """,
    tags=[
        'payroll_run_management',
        'wage_management',
        'wage_record_management',
        'employment_wage_management',
        'payroll_data_management',
    ],
)
def get_wage_sheets_by_payroll_run_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payrollrun_id: UUID = Path(..., alias='payrollrunId'),
):
    """
    Download wage sheets for a payroll run
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/providers/employers/payrolladministrations/payrolltaxreturns',
    description=""" __Activity name :__ PatchPayrollTaxReturnsByPayrollTaxReturnIds

This endpoints changes the status of the list of the payroll tax returns provided in the request body based on the provided action.
 """,
    tags=[
        'payroll_tax_return_management',
        'payroll_management',
        'payroll_data_management',
    ],
)
def patch_payroll_tax_returns_by_payroll_tax_return_ids(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    body: ProvidersEmployersPayrolladministrationsPayrolltaxreturnsPatchRequest = ...,
):
    """
    Change the status of payroll tax returns
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/providers/employers/payrolladministrations/payrolltaxreturns/{messageReference}',
    description=""" __Activity name :__ PatchPayrollTaxReturnByMessageReference

This endpoints changes the status of the payroll tax returns provided in the path parameters based on the provided action.

Functionally, this endpoint is very similar to PatchPayrollTaxReturnsByPayrollTaxReturnIds endpoint,  however this endpoint takes the messageReference (NL: BERICHTKENMERK) as path id. Instead of payrollTaxReturnId (GUID). AND, in contrast, this endpoint is a SINGLE PATCH endpoint which consumes a path id.  
 """,
    tags=[
        'payroll_tax_return_management',
        'tax_return_management',
        'payroll_data_management',
    ],
)
def patch_payroll_tax_return_by_message_reference(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    message_reference: str = Path(..., alias='messageReference'),
    body: ProvidersEmployersPayrolladministrationsPayrolltaxreturnsMessageReferencePatchRequest = ...,
):
    """
    Change the status of payroll tax returns
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/payrolladministrations/payrolltaxreturns/{messageReference}/sendresponsemessagebymessagereference',
    description=""" __Activity name :__ PostSendResponseMessageByMessageReference

This endpoint is identical to PostSendResponseMessageByPayrollTaxReturnId endpoint,  however this endpoint takes the messageReference (NL: BERICHTKENMERK) as path id. Instead of payrollTaxReturnId (GUID).  
 """,
    tags=[
        'payroll_tax_return_management',
        'payroll_data_management',
        'payroll_run_management',
    ],
)
def post_send_response_message_by_message_reference(
    message_reference: str = Path(..., alias='messageReference'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    body: ProvidersEmployersPayrolladministrationsPayrolltaxreturnsMessageReferenceSendresponsemessagebymessagereferencePostRequest = ...,
):
    """
    Send the response message for the payroll tax return
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/payrolltaxreturns/{payrolltaxreturnId}',
    description=""" __Activity name :__ GetPayrollTaxReturnByPayrollTaxReturnId

The details of a tax return for an administration
 """,
    tags=[
        'payroll_tax_return_management',
        'tax_return_management',
        'payroll_data_management',
    ],
)
def get_payroll_tax_return_by_payroll_tax_return_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payrolltaxreturn_id: UUID = Path(..., alias='payrolltaxreturnId'),
):
    """
    Details of a tax return for an administration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/payrolltaxreturns/{payrolltaxreturnId}/ideal',
    description=""" __Activity name :__ GetIdealUrlByPayrollTaxReturnId

Get URL which allows the user to pay payroll taxes via IDEAL
 """,
    tags=[
        'payroll_tax_return_management',
        'payment_information_management',
        'payroll_data_management',
        'tax_return_management',
    ],
)
def get_ideal_url_by_payroll_tax_return_id(
    payrolltaxreturn_id: UUID = Path(..., alias='payrolltaxreturnId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Pay payroll taxes using IDEAL
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/payrolltaxreturns/{payrolltaxreturnId}/idealPaymentStatus',
    description=""" __Activity name :__ GetIdealPaymentStatusByPayrollTaxReturnId

Get the status of the IDEAL payment
 """,
    tags=['payment_information_management', 'payroll_tax_return_management'],
)
def get_ideal_payment_status_by_payroll_tax_return_id(
    payrolltaxreturn_id: UUID = Path(..., alias='payrolltaxreturnId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Get the status of the IDEAL payment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/payrolltaxreturns/{payrolltaxreturnId}/message',
    description=""" __Activity name :__ GetMessageByPayrollTaxReturnId   

Download the message of the payroll tax return (loonaangiftebericht) in xml. Please note that this does NOT refer to the response message, but to the initial message i.e. loonaangiftebericht.
 """,
    tags=[
        'payroll_tax_return_management',
        'payroll_data_management',
        'report_downloads',
    ],
)
def get_message_by_payroll_tax_return_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payrolltaxreturn_id: UUID = Path(..., alias='payrolltaxreturnId'),
):
    """
    Download the message of a payroll tax return
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/payrolltaxreturns/{payrolltaxreturnId}/overview',
    description=""" __Activity name :__ GetOverviewByPayrollTaxReturnId

Download the payroll tax return overiew
 """,
    tags=['payroll_tax_return_management', 'report_downloads'],
)
def get_overview_by_payroll_tax_return_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payrolltaxreturn_id: UUID = Path(..., alias='payrolltaxreturnId'),
):
    """
    Download the overview report of a payroll tax return
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/payrolladministrations/payrolltaxreturns/{payrolltaxreturnId}/sendresponsemessage',
    description=""" __Activity name :__ PostSendResponseMessageByPayrollTaxReturnId

Send the response message of the payroll tax return (loonaangifte) that was received from the Belastingdienst,  to Loket.nl . 
This is ONLY applicable for the limited group of parties that send and receive the payroll tax return themselves to the Belastingdienst. For the purposes of having those results visible in Loket the corresponding response message can be send to Loket via this endpoint.

What this endpoint does is the following:
* It will receive the xml response message. For the schema (XSD) of this xml response message we refer to the documentation by the Belastingdienst itself
* A set of input validations will be performed.
* If those steps are succesful the xml response message will placed in a designated directory. Where it will be picked up for final processing by a proces that runs about every 15 minutes
* In other words; the result of this action will NOT be immediately visible
 """,
    tags=[
        'payroll_tax_return_management',
        'payroll_data_management',
        'data_new_business_management',
    ],
)
def post_send_response_message_by_payroll_tax_return_id(
    payrolltaxreturn_id: UUID = Path(..., alias='payrolltaxreturnId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    body: ProvidersEmployersPayrolladministrationsPayrolltaxreturnsPayrolltaxreturnIdSendresponsemessagePostRequest = ...,
):
    """
    Send the response message for the payroll tax return
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/upapensiondeclarations/{upaPensionDeclarationId}',
    description=""" __Activity name :__ GetUpaPensionDeclarationByUpaPensionDeclarationId

Details of UPA pension declaration
 """,
    tags=[
        'upa_pension_declaration_management',
        'declaration_management',
        'pension_declarations',
    ],
)
def get_upa_pension_declaration_by_upa_pension_declaration_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    upa_pension_declaration_id: UUID = Path(..., alias='upaPensionDeclarationId'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Detail UPA pension declaration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/providers/employers/payrolladministrations/upapensiondeclarations/{upaPensionDeclarationId}',
    description=""" __Activity name :__ PatchUpaPensionDeclarationByUpaPensionDeclarationId

This endpoints changes the status of the Upa pensiondeclaration based on the provided action.
 """,
    tags=[
        'upa_pension_declaration_management',
        'pension_declarations',
        'declaration_management',
    ],
)
def patch_upa_pension_declaration_by_upa_pension_declaration_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    upa_pension_declaration_id: str = Path(..., alias='upaPensionDeclarationId'),
    body: ProvidersEmployersPayrolladministrationsUpapensiondeclarationsUpaPensionDeclarationIdPatchRequest = ...,
):
    """
    Change the status of a upa pension declaration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/upapensiondeclarations/{upaPensionDeclarationId}/message',
    description=""" __Activity name :__ GetMessageByUpaPensionDeclarationId  

Download the message of the UPA pension declaration (pensioenaangiftebericht) in xml. Please note that this does NOT refer to the response message, but to the initial message i.e. pensioenaangiftebericht.
 """,
    tags=[
        'upa_pension_declaration_management',
        'declaration_management',
        'pension_declarations',
    ],
)
def get_message_by_upa_pension_declaration_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    upa_pension_declaration_id: UUID = Path(..., alias='upaPensionDeclarationId'),
):
    """
    Download the message of a of an UPA pension declaration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/{payrollAdministrationId}/accumulatedbasicjournalresultsreport',
    description=""" __Activity name :__ GetAccumulatedBasicJournalResultsReportByPayrollAdministrationId

Acquire accumulated basic journal results reports (cumulatief journaal niet-verdicht en verdicht) at the payroll administration level. Currently this endpoint supports following report types to be requested:
_Please note: this endpoint may only be used to acquire a report in the pdf-type format_ 
 """,
    tags=['report_downloads', 'payroll_data_management', 'payroll_runs_initiation'],
)
def download_accumulated_journal_results_report(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payroll_administration_id: UUID = Path(..., alias='payrollAdministrationId'),
    report_type: ReportType = Query(..., alias='reportType'),
    grouping_type: GroupingType = Query(..., alias='groupingType'),
    start_period: conint(ge=0) = Query(..., alias='startPeriod'),
    end_period: conint(ge=0) = Query(..., alias='endPeriod'),
):
    """
    Download accumulated basic journal results report
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/{payrollAdministrationId}/accumulationsandbalancesreport',
    description=""" __Activity name :__ GetAccumulationsAndBalancesReportByPayrollAdministrationId

Acquire the reports for either accumulations or balances at the payroll administration level. Currently this endpoint supports following report types to be requested:
* baseForCalculationBalancesAtStartOfYear (grondslag begin jaar)

* leaveBalancesAtStartOfYear (verlof begin jaar)

* leaveAccrualWithinYear (opbouw verlof ulsa)
 """,
    tags=['report_downloads', 'payroll_data_management', 'year_end_statements'],
)
def download_accumulations_balances_report(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payroll_administration_id: UUID = Path(..., alias='payrollAdministrationId'),
    report_type: ReportType2 = Query(..., alias='reportType'),
    report_year: int = Query(..., alias='reportYear'),
    include_employments_that_ended_before_start_of_the_year: Optional[bool] = Query(
        None, alias='includeEmploymentsThatEndedBeforeStartOfTheYear'
    ),
):
    """
    Download accumulations and balances reports
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/{payrollAdministrationId}/annualpayrolltaxreturnreport',
    description=""" __Activity name :__ GetAnnualPayrollTaxReturnReportByPayrollAdministrationId

Acquire the annual payroll tax return report (jaaroverzicht loongaangiftestaat) on payroll administration level, as generated by the reporting service.

_Please note: this endpoint may only be used to acquire a report in the pdf-type format_ 
 """,
    tags=[
        'payroll_tax_return_management',
        'report_downloads',
        'year_end_statements',
        'payroll_data_management',
    ],
)
def download_annual_payroll_tax_report(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payroll_administration_id: UUID = Path(..., alias='payrollAdministrationId'),
    report_year: int = Query(..., alias='reportYear'),
):
    """
    Download annual payroll tax return report
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/{payrollAdministrationId}/annualwagesheetreport',
    description=""" __Activity name :__ GetAnnualWagesheetReportByPayrollAdministrationId

Acquire the annual wage sheet report (verzamelloonstaat) on payroll administration level, as generated by the reporting service.

__Note: __ For the querystring parameters take note of the following logic either reportYear has a value or start and endperiod have a value
 """,
    tags=[
        'wage_management',
        'wage_record_management',
        'employment_wage_management',
        'report_downloads',
        'payroll_data_management',
    ],
)
def get_annual_wagesheet_report_by_payroll_administration_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payroll_administration_id: UUID = Path(..., alias='payrollAdministrationId'),
    report_year: Optional[int] = Query(None, alias='reportYear'),
    start_period: Optional[conint(ge=0)] = Query(None, alias='startPeriod'),
    end_period: Optional[conint(ge=0)] = Query(None, alias='endPeriod'),
):
    """
    Download annual wage sheet report
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/{payrollAdministrationId}/apgpensiondeclarations',
    description=""" __Activity name :__ GetApgPensionDeclarationsByPayrollAdministrationId


A list of APG pension declarations for an administration
 """,
    tags=[
        'apg_pension_declaration_management',
        'pension_declarations',
        'declarations_management',
    ],
)
def get_apg_pension_declarations_by_payroll_administration_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payroll_administration_id: UUID = Path(..., alias='payrollAdministrationId'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of APG pension declarations for an administration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/payrolladministrations/{payrollAdministrationId}/apgpensiondeclarations/initiate',
    description=""" __Activity name :__ PostInitiateApgPensionDeclarationByPayrollAdministrationId


Initiate the pension declaration for the next available period for the payrolladministration. Information about the next available periode can be obtained using the defaults endpoint (/defaults) 
 """,
    tags=[
        'apg_pension_declaration_management',
        'pension_declarations',
        'declaration_management',
    ],
)
def initiate_apg_pension_declaration(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payroll_administration_id: UUID = Path(..., alias='payrollAdministrationId'),
):
    """
    Initiate a APG pension declaration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/{payrollAdministrationId}/attachmentsofearningsreport',
    description=""" __Activity name :__ GetAttachmentsOfEarningsReportByPayrollAdministrationId

Download the attachment of earnings report for the administration
 """,
    tags=['earnings_attachment_management', 'report_downloads', 'payroll_operations'],
)
def get_attachments_of_earnings_report_by_payroll_administration_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payroll_administration_id: UUID = Path(..., alias='payrollAdministrationId'),
    report_year: int = Query(..., alias='reportYear'),
):
    """
    Download attachment of earnings report
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/{payrollAdministrationId}/auditTrail/PayrollPeriodData',
    description=""" __Activity name :__ GetPayrollPeriodDataAuditTrailByPayrollAdministrationId

Get the audit trail for the payroll period data. 
 """,
    tags=[
        'payroll_period_management',
        'payroll_audit_trail',
        'payroll_data_management',
    ],
)
def get_payroll_audit_trail_period_data(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payroll_administration_id: UUID = Path(..., alias='payrollAdministrationId'),
    start_date: constr(pattern=r'date') = Query(..., alias='startDate'),
    end_date: constr(pattern=r'date') = Query(..., alias='endDate'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Get payroll period data audit trail
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/{payrollAdministrationId}/availablepayrollcomponentsets',
    description=""" __Activity name :__ GetAvailablePayrollComponentSetsByPayrollAdministrationId
Get the available payroll components sets that are available at this level.  A payroll component set defines a set of payroll components to be used as a sjabloon preventing the need for users to constatnly select the same set of payroll components. Payroll component set are commonly used when entering payroll period data (variabele gegevens) either for a single employment or for multiple employments (browser variabele gegevens). They are also used as a filter when exporting payroll run results.

Both at the provider level and payroll administration the user may define sets and which components it includes. This endpoint will return an aggregated view of the applicable sets and its corresponding component based on the defined sets at provider and administration level.
 """,
    tags=[
        'payroll_component_handling',
        'payroll_administration_management',
        'payroll_data_management',
    ],
)
def get_available_payroll_component_sets(
    payroll_administration_id: UUID = Path(..., alias='payrollAdministrationId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Available payroll component sets
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/{payrollAdministrationId}/deviatingpremiumswab',
    description=""" __Activity name :__ GetDeviatingPremiumsWabReportByPayrollAdministrationId

The percentage deviation between the contract hours and the actual standard hours to assess whether the low wab premium should be revised to the high wab premium.
 """,
    tags=['report_downloads', 'payroll_data_management'],
)
def get_deviating_premiums_wab_report_by_payroll_administration_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payroll_administration_id: UUID = Path(..., alias='payrollAdministrationId'),
    report_year: int = Query(..., alias='reportYear'),
):
    """
    Download WAB deviations report
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/{payrollAdministrationId}/employmentPayrollDataAuditTrail',
    description=""" __Activity name :__ GetEmploymentPayrollDataAuditTrailByPayrollAdministrationId

Returns the changes that were made in the payroll data for the employments. 

This includes resources such as (allmost all payroll related resources except `payroll period data` which has its own audit trail download):
- Wage
- Working hours
- Bennefits and deductions
- Employment
- Fiscal properties
- Organizational entity """,
    tags=['audit_trail_management', 'payroll_audit_trail', 'payroll_data_management'],
)
def download_payroll_audit_trail_by_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payroll_administration_id: UUID = Path(..., alias='payrollAdministrationId'),
    start_date: constr(pattern=r'date') = Query(..., alias='startDate'),
    end_date: constr(pattern=r'date') = Query(..., alias='endDate'),
):
    """
    Download the audit trail for the employment payroll data
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/{payrollAdministrationId}/journalruns',
    description=""" __Activity name :__ GetJournalRunsByPayrollAdministrationId

Returns the journal runs for a payroll administration.
 """,
    tags=['journal_run_management', 'payroll_administration_management'],
)
def get_journal_runs_by_payroll_administration_id(
    payroll_administration_id: UUID = Path(..., alias='payrollAdministrationId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of journal runs for an administration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/payrolladministrations/{payrollAdministrationId}/journalruns/initiate',
    description=""" __Activity name :__ PostInitiateJournalRunByPayrollAdministrationId This is a controller endpoint to perform an action.

In the older Loket GUI this specific action is referred to as 'journaliseren' If this action is performed succesfully the journal run will be created with status 0 and will be queud for processing. After the initiated run has been picked up and processed by the background process, then the status of the run will be changed accordingly.

This action may be performed for all payroll periods that are *available for the payroll administration* AND that meet one of the following requirements;
* The payroll period is less then 7 years in the past
* There is a journal profile configured for the given payroll period
* There is an approved payroll run for the given payroll period that has no other journalruns except for failed or removed journalruns
* All the payroll runs are processed in order so in order to start a journalrun the previous payrollrun (that should have a journalrun) has to have a succesfull journal run in order to start the next one

__Metadata :__  No metadata endpoint available for this controller endpoint.

__Defaults :__ Defaults endpoint is available for this controller endpoint by adding /defaults. Also, an endpoint is available to retrieve initiation values for a specific period. """,
    tags=['journal_run_management', 'payroll_run_management'],
)
def post_initiate_journal_run_by_payroll_administration_id(
    payroll_administration_id: UUID = Path(..., alias='payrollAdministrationId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Initiate journal run (journaliseren)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/{payrollAdministrationId}/payrollPeriodDataAuditTrail',
    description=""" __Activity name :__ GetPayrollPeriodDataAuditTrailByPayrollAdministrationId

Returns the changes that were made in the payroll period data from the given start up to and including the given end date. """,
    tags=['payroll_audit_trail', 'payroll_data_management', 'audit_trail_management'],
)
def get_payroll_period_data_audit_trail_by_payroll_administration_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payroll_administration_id: UUID = Path(..., alias='payrollAdministrationId'),
    start_date: constr(pattern=r'date') = Query(..., alias='startDate'),
    end_date: constr(pattern=r'date') = Query(..., alias='endDate'),
):
    """
    Download the audit trail for the payroll period data
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/{payrollAdministrationId}/payrollPeriods/{payrollPeriodId}/payrollperioddata',
    description=""" __Activity name :__ GetPayrollPeriodDataByPayrollAdministrationIdAndPayrollPeriodId

Get a list of all payroll period data for all the active employment in the given payroll period for the give payroll administration. Payroll period data relates to a single payroll period.

This endpoint only returns objects for which the employment meets the filter settings set at the user level. Note that filter settings are set for a user <-> employer <-> client combination.

__Metadata :__  Possible options for the query string parameters can be acquired (GET) via the `/metadata` endpoint.  The URI for this endpoint is `../providers/employers/payrolladministrations/{payrollAdministrationId}/payrollPeriods/payrollperioddata/metadata`.

__Defaults :__ Default values for the query string parameters can be acquired via the `/defaults` endpoint.  The URI for this endpoint is `../providers/employers/payrolladministrations/{payrollAdministrationId}/payrollPeriods/payrollperioddata/defaults`.
 """,
    tags=[
        'payroll_period_management',
        'payroll_data_management',
        'payslip_management',
        'payroll_component_handling',
        'payroll_administration_management',
    ],
)
def list_payroll_period_data_by_administration_id(
    payroll_administration_id: UUID = Path(..., alias='payrollAdministrationId'),
    payroll_period_id: int = Path(..., alias='payrollPeriodId'),
    payslip_type: int = Query(..., alias='payslipType'),
    payroll_component_set: Optional[UUID] = Query(None, alias='payrollComponentSet'),
    payroll_component_category: Optional[int] = Query(
        None, alias='payrollComponentCategory'
    ),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of payroll period data on payroll administration level
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/{payrollAdministrationId}/payrolladministrationsettingsreport',
    description=""" __Activity name :__ GetPayrollAdministrationSettingsReportByPayrollAdministrationId

Acquire the payroll administration configuration report (overzicht inrichting salarisverwerking) on payroll administration level for a year, as generated by the reporting service.

_Please note: this endpoint may only be used to acquire a report in the pdf-type format_ 
 """,
    tags=[
        'payroll_data_management',
        'report_downloads',
        'payroll_administration_management',
        'payroll_runs_initiation',
    ],
)
def download_payroll_configuration_report(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payroll_administration_id: UUID = Path(..., alias='payrollAdministrationId'),
    report_year: int = Query(..., alias='reportYear'),
):
    """
    Download payroll administration configuration report
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/{payrollAdministrationId}/payrollcomponents/year/{year}',
    description=""" __Activity name :__ GetPayrollComponentsByPayrollAdministrationIdAndYear
Get the available payroll components for an administration. 
 """,
    tags=[
        'payroll_component_handling',
        'payroll_administration_management',
        'payroll_data_management',
    ],
)
def get_payroll_components_by_payroll_administration_id_and_year(
    payroll_administration_id: UUID = Path(..., alias='payrollAdministrationId'),
    year: int = ...,
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Payroll components
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/{payrollAdministrationId}/payrollperiods',
    description=""" __Activity name :__ GetPayrollPeriodsByPayrollAdministrationId

Returns a list of all payroll periods available for the given payroll administration 
 """,
    tags=[
        'payroll_period_management',
        'payroll_data_management',
        'payroll_run_management',
    ],
)
def get_payroll_periods_by_payroll_administration_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payroll_administration_id: UUID = Path(..., alias='payrollAdministrationId'),
):
    """
    List of all available payroll periods and runs
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/{payrollAdministrationId}/payrollperiods/compare',
    description=""" __Activity name :__ GetComparePayrollPeriodsByPayrollAdministrationId  

Returns the results of given payroll period and the one before so a comparison can be made. Currently only the components 260, 495, 257 are returned 
 """,
    tags=[
        'payroll_period_management',
        'payroll_data_management',
        'payroll_audit_trail',
    ],
)
def get_compare_payroll_periods_by_payroll_administration_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payroll_administration_id: UUID = Path(..., alias='payrollAdministrationId'),
    payroll_period_id: int = Query(..., alias='payrollPeriodId'),
):
    """
    Get the results of the given payroll period and the one before
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/payrolladministrations/{payrollAdministrationId}/payrollperiods/initialise',
    description=""" __Activity name :__ PostInitialisePayrollPeriodByPayrollAdministrationId This is a controller endpoint to perform an action.


In the older Loket GUI this specific action is referred to as 'Automatische processen activeren'. If this action is performed for the chosen payroll period then certain calculations will be performed on the background. The execution depends on the input parameters and the payroll configuration in the given situation.


This action may be performed for all payroll periods that are available for the payroll administration AND that meet one of the following requirements;
* Payroll periods for which an approved payroll run (status = 9) is available
* The very first payroll period in time that does not yet have an approved payroll run(i.e. last payroll period with approved run + 1). Within each year, if available.

In practice, in many instances the second option will be most relevant. Please note that if the action is performed for a year that is not the current active year of payrolling, then the resulting changes may not be fully processed in regards to the full payroll process.


__Metadata :__  No metadata endpoint available for this controller endpoint.

__Defaults :__ Defaults endpoint is available for this controller endpoint. """,
    tags=['payroll_period_management', 'payroll_administration_management'],
)
def post_initialise_payroll_period_by_payroll_administration_id(
    payroll_administration_id: UUID = Path(..., alias='payrollAdministrationId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Initialise Payroll Period (automatische processen)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/{payrollAdministrationId}/payrollperiods/minimized',
    description=""" __Activity name :__ GetPayrollPeriodsMinimizedByPayrollAdministrationId

Returns a list of all payroll periods available for the given payroll administration 
 """,
    tags=['payroll_period_management', 'payroll_data_management'],
)
def get_payroll_periods_minimized_by_payroll_administration_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payroll_administration_id: UUID = Path(..., alias='payrollAdministrationId'),
):
    """
    List of all available payroll periods
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/{payrollAdministrationId}/payrollperiods/{payrollPeriodId}/payrollresults',
    description=""" __Activity name :__ GetPayrollPeriodResultsByPayrollAdministrationIdAndPayrollPeriodId  
  

Returns the payroll results for the payroll period.

__Note :__ This endpoint is related to the `GetPayrollRunResultsByPayrollRunId` endpoint.
Both endpoints return the same output just in a different way. This endpoint returns the current state of the payroll results for the given period where as `GetPayrollRunResultsByPayrollRunId` returns the payroll results for the given payroll run (a payroll run can contain payroll results for multiple payroll periods). It's posible for payroll results to be created after the end of the payroll period it zelf. For example, the payroll periode 01-2020 ends at 31-01-2020 (in case of a monthly payroll period) it is posible that the payroll run for period 07-2020 contains payroll results for the period 01-2020 due to a retroactivity change for that period. This change in the payroll run for payroll period 07-2020 would require the system to reaquire the results for period 01-2020 (as they changed).
 """,
    tags=[
        'payroll_data_management',
        'payroll_period_management',
        'payroll_runs_initiation',
        'payroll_run_management',
    ],
)
def get_payroll_results_for_period(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payroll_administration_id: UUID = Path(..., alias='payrollAdministrationId'),
    payroll_period_id: int = Path(..., alias='payrollPeriodId'),
    payroll_components: Optional[PayrollComponents] = Query(
        None, alias='payrollComponents'
    ),
    payroll_component_set: Optional[UUID] = Query(None, alias='payrollComponentSet'),
):
    """
    Get payroll results for the given payroll period
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/{payrollAdministrationId}/payrollprocessoverview',
    description=""" __Activity name :__ GetPayrollProcessOverviewByPayrollAdministrationId

Get an overview of the status and possible actions for the specified period, including the preceding and subsequent period. The overview contains information about: payroll runs, payroll tax return and pension.
__Metadata :__  Possible options for the query string parameters can be acquired (GET) via the `/metadata` endpoint.  The URI for this endpoint is `../providers/employers/payrolladministrations/{payrollAdministrationId}/payrollprocessoverview/metadata`.

__Defaults :__ Default values for the query string parameters can be acquired via the `/defaults` endpoint.  The URI for this endpoint is `../providers/employers/payrolladministrations/{payrollAdministrationId}/payrollprocessoverview/defaults`.
 """,
    tags=[
        'payroll_administration_management',
        'payroll_data_management',
        'payroll_period_management',
        'payroll_run_management',
    ],
)
def get_payroll_process_overview_by_payroll_administration_id(
    payroll_administration_id: UUID = Path(..., alias='payrollAdministrationId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payroll_period_id_start: int = Query(..., alias='payrollPeriodIdStart'),
    payroll_period_id_end: Optional[int] = Query(None, alias='payrollPeriodIdEnd'),
):
    """
    Process Information about a payroll on administration level
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/{payrollAdministrationId}/payrollruns',
    description=""" __Activity name :__ GetPayrollRunsByPayrollAdministrationId

A list of payroll runs for an administration
 """,
    tags=[
        'payroll_run_management',
        'payroll_administration_management',
        'payroll_data_management',
        'payment_information_management',
    ],
)
def get_payroll_runs_by_payroll_administration_id(
    payroll_administration_id: UUID = Path(..., alias='payrollAdministrationId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of payroll runs for an administration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/payrolladministrations/{payrollAdministrationId}/payrollruns/initiate',
    description=""" __Activity name :__ PostInitiatePayrollRunByPayrollAdministrationId This is a controller endpoint to perform an action.

In the older Loket GUI this specific action is referred to as respectively 'Verlonen' / 'Verlonen periode zonder personeel' / 'Verlonen voorgaande jaren' . If this action is performed succesfully then the payroll run will be created with status 0 and will be cued for further processing. The further processing depends on the input parameters and the payroll configuration in the given situation. After the initiated run has been picked up and processed by the background process, then the status of the run will be changed accordingly.

This action may be performed for all payroll periods that are *available for the payroll administration* AND that meet one of the following requirements;

If typeOfInitiation = 'regular' (Verlonen);
* The very last payroll period for which an approved payroll run (status = 9) is available. Within the given year of payrolling. (This would functionally be a so-called 'correction' run)
* The very first payroll period in time that does not yet have an approved payroll run (i.e. last payroll period with approved run + 1). Within the given year of payrolling, if available
* The provided year may be a maximum of 7 years in the past (based on current datetime)

If typeOfInitiation = 'withoutEmploymentData' (Verlonen zonder personeel);
* The very first payroll period in time that does not yet have an approved payroll run (i.e. last payroll period with approved run + 1). Within the active year of payrolling
* Please note that if this type is selected then the following fields must ALL be set to null; sendEmailToEmployee, textPaySlip, textTariffPaySlip, textPayment, emailAdressPayrollRunStarted, emailFinishedPayrollRun


In general;
* It is not possible to initiate a new payroll run if there is currently a payroll run with status 0  (to be processed) or 1 (awaiting approval) within the payroll administation.


__Metadata :__  No metadata endpoint available for this controller endpoint.

__Defaults :__ Defaults endpoint is available for this controller endpoint by adding /defaults. Also, an endpoint is available to retrieve initiation values for a specific period. """,
    tags=[
        'payroll_runs_initiation',
        'payroll_run_management',
        'payroll_administration_management',
    ],
)
def post_initiate_payroll_run_by_payroll_administration_id(
    payroll_administration_id: UUID = Path(..., alias='payrollAdministrationId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Initiate payroll run (verlonen)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/{payrollAdministrationId}/payrollruns/{periodId}/initiationvalues',
    description=""" __Activity name :__ GetPayrollrunInitiationvaluesByPayrollAdministrationIdAndPeriodId 

Get the initiation values for initiating a payrollrun for a specific period.
 """,
    tags=[
        'payroll_run_management',
        'payroll_runs_initiation',
        'payroll_period_management',
        'payroll_data_management',
    ],
)
def get_payroll_run_initiation_values(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payrollrun_id: UUID = Query(..., alias='payrollrunId'),
    payroll_period_id: int = Query(..., alias='payrollPeriodId'),
    payroll_administration_id: str = Path(..., alias='payrollAdministrationId'),
    period_id: str = Path(..., alias='periodId'),
):
    """
    Initiationvalues of a payrollrun
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/{payrollAdministrationId}/payrolltaxreturns',
    description=""" __Activity name :__ GetPayrollTaxReturnsByPayrollAdministrationId

A list of tax returns for an administration
 """,
    tags=[
        'payroll_tax_return_management',
        'tax_return_management',
        'payroll_administration_management',
    ],
)
def get_payroll_tax_returns_by_payroll_administration_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payroll_administration_id: UUID = Path(..., alias='payrollAdministrationId'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of tax returns for an administration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/payrolladministrations/{payrollAdministrationId}/payrolltaxreturns/initiate',
    description=""" __Activity name :__ PostInitiatePayrollTaxReturnByPayrollAdministrationId

This is a controller endpoint to perform an action. 


 __Metadata :__  
 There is a metadata endpoint that will return process information rather then true metadata. 
 This endpoint is available by simply adding /metadata behind the URI.


 __Defaults :__ Default values for a new object can be acquired (GET) by adding `/defaults' to the POST URL.  """,
    tags=[
        'payroll_tax_return_management',
        'payroll_data_management',
        'declaration_management',
        'tax_return_management',
        'payroll_administration_management',
    ],
)
def post_initiate_payroll_tax_return_by_payroll_administration_id(
    payroll_administration_id: UUID = Path(..., alias='payrollAdministrationId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Initiate payroll tax return (aanmaken loonaangifte)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/{payrollAdministrationId}/payrolltaxreturns/{payrolltaxreturnId}/sepafile',
    description=""" __Activity name :__ GetSepaFileByPayrollAdministrationIdAndPayrollTaxReturnId

Get the Sepa file for the payroll tax return
 """,
    tags=[
        'payroll_tax_return_management',
        'sepa_file_operations',
        'payment_information_management',
    ],
)
def download_sepa_file_for_payroll_tax_return(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payroll_administration_id: UUID = Path(..., alias='payrollAdministrationId'),
    payrolltaxreturn_id: UUID = Path(..., alias='payrolltaxreturnId'),
    requested_execution_date: date_aliased = Query(..., alias='requestedExecutionDate'),
):
    """
    Download the SEPA file for a payroll tax return
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/payrolladministrations/{payrollAdministrationId}/periodreadyforpayroll',
    description=""" __Activity name :__ PostPeriodReadyForPayrollByPayrollAdministrationId

Send an email to inform that the period is ready for payrolling.
 """,
    tags=[
        'payroll_administration_management',
        'email_identity_management',
        'notification_management',
    ],
)
def post_period_ready_for_payroll_by_payroll_administration_id(
    payroll_administration_id: UUID = Path(..., alias='payrollAdministrationId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Send an email to inform the salary administrator
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/{payrollAdministrationId}/upapensiondeclarations',
    description=""" __Activity name :__ GetUpaPensionDeclarationsByPayrollAdministrationId

A list of UPA pension declarations for an administration
 """,
    tags=[
        'upa_pension_declaration_management',
        'pension_declarations',
        'upa_pension_operations',
        'declarations_management',
    ],
)
def get_upa_pension_declarations_by_payroll_administration_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payroll_administration_id: UUID = Path(..., alias='payrollAdministrationId'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of UPA pension declarations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/payrolladministrations/{payrollAdministrationId}/upapensiondeclarations/initiate',
    description=""" __Activity name :__ PostInitiateUpaPensionDeclarationByPayrollAdministrationId

Initiate the pension declaration for the next available period for the payrolladministration. Information about the next available periode can be obtained using the defaults endpoint (/defaults) 
 """,
    tags=[
        'upa_pension_declaration_management',
        'pension_declarations',
        'upa_pension_operations',
    ],
)
def initiate_upa_pension_declaration(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payroll_administration_id: UUID = Path(..., alias='payrollAdministrationId'),
):
    """
    Initiate a UPA pension declaration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/{payrollAdministrationId}/yearendstatements',
    description=""" __Activity name :__ GetYearEndStatementsByPayrollAdministrationId

Get a list of year-end statements (i.e. list of years for which year-end statements are available) for a payrolladministration.

The year-end statements at administration level are effectively a collection of year-end statements for its underlying employments. However it may also be required at the administration level in one call.
 """,
    tags=[
        'year_end_statements',
        'payroll_data_management',
        'payroll_administration_management',
    ],
)
def get_year_end_statements_by_payroll_administration_id(
    payroll_administration_id: UUID = Path(..., alias='payrollAdministrationId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Year-end statements for the payroll administration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/payrolladministrations/{payrollAdministrationId}/yearendstatements/{year}',
    description=""" __Activity name :__ GetYearEndStatementForYearByPayrollAdministrationId

Download the year-end statements of a payroll administration (of its underlying employment) for a year.

The year-end statements at administration level are effectively a collection of year-end statements for its underlying employments. With this endpoint it may also be required at the administration level in one call.

_Please note: this endpoint may only be used to acquire a report in the pdf-type format_ 
 """,
    tags=['year_end_statements', 'payroll_data_management', 'report_downloads'],
)
def get_year_end_statement_for_year_by_payroll_administration_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payroll_administration_id: UUID = Path(..., alias='payrollAdministrationId'),
    year: int = ...,
    include_employee_self_service: Optional[bool] = Query(
        None, alias='includeEmployeeSelfService'
    ),
):
    """
    Download year-end statement of a payroll administration for a year
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/users/downloadrequests',
    description=""" __Activity name:__ GetDownloadRequestsByBearerToken
    

Get the list of download requests for an employment

__Note:__ The module (product) has to be activited for all the employers the user has access to. The same holds true for the permissions (rechten) of the users for these employers.
 """,
    tags=['download_request_management', 'report_downloads'],
)
def get_download_requests_by_bearer_token(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of download requests for an employment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/users/downloadrequests',
    description=""" __Activity name:__ PostDownloadRequestByBearerToken
    

Create a download request for an employment
 """,
    tags=['download_request_management'],
)
def post_download_request_by_bearer_token(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create a download request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/users/downloadrequests/{downloadRequestId}',
    description=""" __Activity name:__ DeleteDownloadRequestByDownloadRequestId

Delete a download request for the employment
 """,
    tags=['download_request_management', 'application_management'],
)
def delete_download_request_by_download_request_id(
    download_request_id: UUID = Path(..., alias='downloadRequestId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a specific download request record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/users/downloadrequests/{downloadRequestId}',
    description=""" __Activity name:__ GetDownloadRequestByDownloadRequestId

Get the details of a download request record
 """,
    tags=['download_request_management', 'report_downloads'],
)
def get_download_request_by_download_request_id(
    download_request_id: UUID = Path(..., alias='downloadRequestId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Details of a download request record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/users/downloadrequests/{downloadRequestId}/file',
    description=""" __Activity name:__ GetFileByDownloadRequestId

Download the file of a download request record
 """,
    tags=['download_request_management', 'report_downloads'],
)
def get_file_by_download_request_id(
    download_request_id: UUID = Path(..., alias='downloadRequestId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Download file of download request
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/users/{employerUserId}/configuredexternaltenant',
    description=""" __Activity name :__ GetConfiguredExternalTenantByEmployerUserId


 Get the external tenant that is configured for this specific user. 
 """,
    tags=[
        'external_tenant_management',
        'user_management',
        'integration_with_external_systems',
    ],
)
def get_configured_external_tenant_by_employer_user_id(
    employer_user_id: UUID = Path(..., alias='employerUserId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Configured external tenant for an employer user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/providers/employers/users/{employerUserId}/configuredexternaltenant',
    description=""" __Activity name :__ PatchConfiguredExternalTenantByEmployerUserId

__Metadata :__  N/A.

__Defaults :__ N/A.

Modify an external tenant to the list of an configured external tenants for an employer user.
An configured external tenant may be removed by sending a request body with both an empty externalTenant object and an empty externalUser object.
 """,
    tags=[
        'external_tenant_management',
        'user_management',
        'integration_with_external_systems',
    ],
)
def patch_configured_external_tenant_by_employer_user_id(
    employer_user_id: UUID = Path(..., alias='employerUserId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Add an external tenant for an employer user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/users/{userId}',
    description=""" __Activity name :__ DeleteEmployerUserByUserId

Delete an existing user
 """,
    tags=['user_management', 'user_account_management'],
)
def delete_employer_user_by_user_id(
    user_id: UUID = Path(..., alias='userId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a specific user record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/users/{userId}',
    description=""" __Activity name :__ GetEmployerUserByUserId

Get the details of an user
 """,
    tags=[
        'user_management',
        'user_account_management',
        'user_profile_management',
        'user_application_set_management',
    ],
)
def get_employer_user_by_user_id(
    user_id: UUID = Path(..., alias='userId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Details of an user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/providers/employers/users/{userId}',
    description=""" __Activity name :__ PatchEmployerUserInviteByUserId

__Metadata :__  Possible options for fields of the type 'metadata' can be acquired via /providers/employers/{employerId}/users/metadata

__Defaults :__ No defaults

Resend or change the status of an invite for an employer user. 
 """,
    tags=['user_management', 'employer_management', 'user_linkage_and_workflow'],
)
def patch_employer_user_invite_by_user_id(
    user_id: UUID = Path(..., alias='userId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Resend or change the status of an invite for an employer user.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/users/{userId}',
    description=""" __Activity name :__ PutEmployerUserByUserId

__Metadata :__  Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the PUT URL.

Edit the details of an user
 """,
    tags=['user_management', 'user_account_management', 'user_profile_management'],
)
def put_employer_user_by_user_id(
    user_id: UUID = Path(..., alias='userId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit the details of an user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/users/{userId}/employers',
    description=""" __Activity name :__ GetLinkedEmployersByUserId


 List of employers accessible by the user
 """,
    tags=[
        'employer_management',
        'employer_data_retrieval',
        'employer_related_operations',
    ],
)
def get_linked_employers_by_user_id(
    user_id: UUID = Path(..., alias='userId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of employers linked to the user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/users/{userId}/integrations',
    description=""" __Activity name:__ GetEmployerUserIntegrationsByUserId
    

List of all the integrations for the employer user
 """,
    tags=[
        'employer_data_retrieval',
        'user_integration_management',
        'employer_management',
    ],
)
def get_employer_user_integrations_by_user_id(
    user_id: UUID = Path(..., alias='userId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    List of all the integrations for the employer user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/users/{userId}/integrations/{applicationId}',
    description=""" __Activity name:__ DeleteEmployerUserIntegrationByUserIdAndApplicationId

Delete an integration
 """,
    tags=['user_management', 'user_integration_management', 'application_management'],
)
def delete_employer_user_integration_by_user_id_and_application_id(
    user_id: UUID = Path(..., alias='userId'),
    application_id: UUID = Path(..., alias='applicationId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete an integration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/users/{userId}/integrations/{applicationId}',
    description=""" __Activity name :__ PutEmployerUserIntegrationByUserIdAndApplicationId

Change the integration
 """,
    tags=[
        'application_management',
        'user_management',
        'user_application_set_management',
    ],
)
def put_employer_user_integration_by_integration_id(
    user_id: UUID = Path(..., alias='userId'),
    application_id: UUID = Path(..., alias='applicationId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Change an integration
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/users/{userId}/integrations/{applicationId}/logo',
    description=""" __Activity name :__ GetEmployerUserIntegrationLogoByUserIdAndApplicationId

This activity is listed twice in the documentation due to the specified version caching path parameter. Including or exluding this parameter results in slightly different behaviour.

__Caching:__ This resource changes very infrequently and can be cached for a longer time.

Get the logo of the application. In case no logo is know the service will return a 404. """,
    tags=['application_management', 'provider_information_retrieval'],
)
def get_employer_user_integration_logo_by_user_id_and_application_id(
    application_id: UUID = Path(..., alias='applicationId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    user_id: str = Path(..., alias='userId'),
):
    """
    Download the application logo
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/users/{userId}/notificationsettings',
    description=""" __Activity name :__ GetEmployerUserNotificationSettingsByUserId 


 List the configuration per notification for the user
 """,
    tags=['notification_management', 'custom_notification_management'],
)
def get_employer_user_notification_settings_by_user_id(
    user_id: UUID = Path(..., alias='userId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    The notification settings for the user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/providers/employers/users/{userId}/notificationsettings',
    description=""" __Activity name :__ PatchEmployerUserNotificationSettingsByUserId

Manage the employer user notifications and `notificationSet`.

__Note:__ Currently the `notificationSet` doesnt do anything in regard to which notifications are enabled or disabled.  It only functions as a guide to the GUI to visualize and save the notifications linked to the `notificationSet`

Only the changes supplied are processed existing records not supplied in the request body will be left unchanged.  e.g. If three notifications are enabled for the user and a patch is performed with in the body one new notification with the `isEnabled` = true. The result will be that the user has 4 enabled notifications.
 """,
    tags=['notification_management', 'employer_management', 'user_management'],
)
def patch_employer_user_notification_settings_by_user_id(
    user_id: UUID = Path(..., alias='userId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Manage the employer user notification settings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/workflows/{workflowId}',
    description=""" __Activity name:__ GetWorkflowByWorkflowId

Get the details of a workflow 
 """,
    tags=['workflow_management'],
)
def get_workflow_by_workflow_id(
    workflow_id: UUID = Path(..., alias='workflowId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Details of a workflow
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/workflows/{workflowId}',
    description=""" __Activity name:__ PutWorkflowByWorkflowId
  

Allows the user to change certain asspects of the workflow

__Metadata :__ Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the POST URL.
 """,
    tags=['workflow_management', 'user_workflow_management'],
)
def put_workflow_by_workflow_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    workflow_id: UUID = Path(..., alias='workflowId'),
    accept: str = Header(..., alias='Accept'),
):
    """
    Change the workflow
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/workflows/{workflowId}/transition',
    description=""" __Activity name:__ TransitionWorkflowByWorkflowId
  

Allows the user to transition the workflow to a different state. 
Use the workflows endpoint and then the `allowedTransitions` element to determine what to submit to this endpoint. """,
    tags=['workflow_management', 'user_workflow_management'],
)
def transition_workflow_by_workflow_id(
    workflow_id: UUID = Path(..., alias='workflowId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Allows the user to transition the workflow.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/workflowtriggermappings/{workflowTriggerMappingId}',
    description=""" __Activity name:__ DeleteWorkflowTriggerMappingByWorkflowTriggerMappingId

Delete a workflow trigger mapping record for the employer
 """,
    tags=['workflow_management'],
)
def delete_fiscal_properties_byworkflow_trigger_id(
    workflow_trigger_mapping_id: UUID = Path(..., alias='workflowTriggerMappingId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a specific workflow trigger mapping record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/workflowtriggermappings/{workflowTriggerMappingId}',
    description=""" __Activity name:__ GetWorkflowTriggerMappingByWorkflowTriggerMappingId

Get the details of a workflow trigger mapping
 """,
    tags=['workflow_management', 'user_management', 'user_workflow_management'],
)
def get_workflow_trigger_mapping_by_workflow_trigger_mapping_id(
    workflow_trigger_mapping_id: UUID = Path(..., alias='workflowTriggerMappingId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Details of a workflow trigger mapping record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/workflowtriggermappings/{workflowTriggerMappingId}',
    description=""" __Activity name:__ PutWorkflowTriggerMappingByWorkflowTriggerMappingId

Edit the details for a workflow trigger mapping record

Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the PUT URL.
 """,
    tags=['workflow_management'],
)
def put_workflow_trigger_by_workflow_trigger_id(
    workflow_trigger_mapping_id: UUID = Path(..., alias='workflowTriggerMappingId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit the details of a workflow trigger mapping record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}',
    description=""" __Activity name :__ GetEmployerByEmployerId

Get the details of a single employers
 """,
    tags=[
        'employer_management',
        'employer_data_retrieval',
        'employer_data_management',
        'employer_related_operations',
    ],
)
def get_employer_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Details of an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/{employerId}',
    description=""" __Activity name:__ PutEmployerByEmployerId

Edit the details of an employer

Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the PUT URL.
 """,
    tags=[
        'employer_management',
        'employer_data_management',
        'employer_note_management',
        'employer_related_operations',
    ],
)
def put_employer_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit the details of an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/actualorganizationalentities',
    description=""" __Activity name:__ GetActualOrganizationalEntitiesByEmployerId
    

Get the list of actual organizational entities for an employer
 """,
    tags=[
        'organizational_entity_management',
        'employer_data_retrieval',
        'employer_management',
        'employer_data_management',
    ],
)
def get_actual_organizational_entities_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    reference_date: Optional[date_aliased] = Query(None, alias='referenceDate'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of actual organizational entities for an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/actualwages',
    description=""" __Activity name:__ GetActualWagesByEmployerId
    

Get the list of actual wages for an employer
 """,
    tags=['wage_management', 'employer_data_retrieval', 'employment_management'],
)
def get_actual_wages_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    reference_date: Optional[date_aliased] = Query(None, alias='referenceDate'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of actual wages for an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/actualworkinghours',
    description=""" __Activity name:__ GetActualWorkingHoursByEmployerId
    

Get the list of actual working hours for an employer
 """,
    tags=[
        'working_hours_management',
        'employer_data_retrieval',
        'wage_management',
        'employee_hours_management',
    ],
)
def get_actual_working_hours_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    reference_date: Optional[date_aliased] = Query(None, alias='referenceDate'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of actual working hours for an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/administrations',
    description=""" __Activity name :__ GetAdministrationsByEmployerId

Get a list of all administrations (both payroll and non-payroll) for an employer. This endpoint only returns properties that are shared between payroll and non-payroll administrations. For more detailed properties, use the respective endpoints for payroll and non-payroll administrations.
 """,
    tags=[
        'employer_management',
        'employer_data_retrieval',
        'employer_related_operations',
        'payroll_administration_management',
    ],
)
def get_administrations_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of administrations for an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/announcements',
    description=""" __Activity name :__ GetAnnouncementsByEmployerId

Get a list of announcements for an employer. The list contains a isRead parameter.
 """,
    tags=[
        'announcement_management',
        'employer_data_retrieval',
        'employer_related_operations',
    ],
)
def get_announcements_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Get a list of announcements for an employer.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/applications',
    description=""" __Activity name:__ GetAvailableApplicationsByEmployerId
    

List of all the applications available to the employer.
 """,
    tags=[
        'application_management',
        'employer_data_retrieval',
        'user_management',
        'employer_management',
    ],
)
def get_available_applications_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    List of all the applications available to the employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/applications/{applicationId}/users',
    description=""" __Activity name:__ GetLinkedUsersByEmployerIdAndApplicationId
    

List of all users that are configred to have both access to the employer and have an connection with the application.
 """,
    tags=['user_management', 'user_linkage_and_workflow', 'employer_data_retrieval'],
)
def get_linked_users_by_employer_id_and_application_id(
    employer_id: UUID = Path(..., alias='employerId'),
    application_id: UUID = Path(..., alias='applicationId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    List of all the users linking the applications and the employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/assessments',
    description=""" __Activity name :__ GetAssessmentsByEmployerId


Retrieve a list of assessments.
 """,
    tags=[
        'employer_data_retrieval',
        'audit_and_assessment_handling',
        'user_linkage_and_workflow',
    ],
)
def get_assessments_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of assessments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/assignedworkflows',
    description=""" __Activity name:__ GetAssignedWorkflowsByEmployerId
    

Get the list workflows that are assigned to the user or the role of the user.
 """,
    tags=[
        'workflow_management',
        'user_management',
        'user_application_set_management',
        'user_workflow_management',
    ],
)
def get_assigned_workflows_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Workflows assigned to the user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/auditTrail/EmployeeData',
    description=""" __Activity name :__ GetEmployeeDataAuditTrailByEmployerId

Get the mutations for the all the tables linked to the employee (this includes employment and underlying entities).
 """,
    tags=[
        'audit_trail_management',
        'employee_management',
        'employment_record_management',
    ],
)
def get_employee_data_audit_trail_by_employer_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    employer_id: UUID = Path(..., alias='employerId'),
    start_date: constr(pattern=r'date') = Query(..., alias='startDate'),
    end_date: constr(pattern=r'date') = Query(..., alias='endDate'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Get the employee data audit trail
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/authorizations',
    description=""" __Activity name :__ GetAuthorizationsByEmployerId

Get the array of activities the user is authenticated for with regard to the specified employer
 """,
    tags=[
        'user_management',
        'employer_management',
        'employer_data_retrieval',
        'employment_management',
    ],
)
def get_authorizations_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    List of authorized activities with regard to the employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/benefitinkindtypes',
    description=""" __Activity name :__ GetBenefitInKindTypesByEmployerId

Get a list of the benefit in kind types for an employer.

__Note:__ The benefit in kind types defined at the employer level can be used as value for the field typeOfBenefitInKind in the BenefitInKind resource at the employment level.
 """,
    tags=[
        'benefit_in_kind_management',
        'benefit_in_kind_type_management',
        'employer_management',
        'employer_data_management',
    ],
)
def get_benefit_in_kind_types_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List benefit in kind types for an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/{employerId}/benefitinkindtypes',
    description=""" __Activity name :__ PostBenefitInKindTypeByEmployerId
 """,
    tags=['benefit_in_kind_type_management', 'employer_data_management'],
)
def post_benefit_in_kind_type_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Add an benefit in kind type for an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/billableitems',
    description=""" __Activity name :__ GetBillableItemsByEmployerId

Get a list of all billable items for the employer. 
 """,
    tags=['billable_item_management'],
)
def get_billable_items_by_employer_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    employer_id: UUID = Path(..., alias='employerId'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of billable items
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/conceptemployees',
    description=""" __Activity name :__ GetConceptEmployeesByEmployerId

Get a list of all concept employee for the given employer. Concept employee can be used as a template/prefill when creating a new employee/employment.  <br/> This function may also be used in case one does not have all the required fields to create a new employee/employment. The validations are disabled for a concept employee allowing one to create a concept employee filling only a subset of available fields, then later "promoting" the Concept employee in loket.nl to employee/employment. 
 """,
    tags=[
        'employee_concept_management',
        'employee_management',
        'employer_data_retrieval',
    ],
)
def get_concept_employees_by_employer_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    employer_id: UUID = Path(..., alias='employerId'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of concept employee for an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/{employerId}/conceptemployees',
    description=""" __Activity name :__ PostConceptEmployeeByEmployerId

Create a concept employee for an employer

* Possible options (metadata) for generic fields of the type "metadata" can be acquired (GET) by adding `/metadata` to the URL.
* Possible options dependent on a specific payrollAdministration can be acquired via `../providers/employers/conceptemployees/metadata/payrolladministration/{payrollAdministrationId}`.
* Possible options for payGrade can be acquired via `../providers/employers/conceptemployees/metadata/payrolladministration/{payrollAdministrationId}/payscale/{payScaleKey}`.
A `payGrade` has time based values dictating the wage for a given period. These values can be acquired by performing another metadata request to GET `../providers/employers/conceptemployees/metadata/payrolladministration/{payrollAdministrationId}/payscale/{payScaleKey}/paygrade/{payGradeKey}`. This endpoint has the optional parameter "date" that may be used to specifying a measure date.

__Defaults :__ Default values for a new object can be acquired by adding `/defaults` to the POST URL. 

        
Default values that are dependent on the selected payroll administration can be acquired by adding `/providers/employers/conceptemployees/defaults/payrolladministration/{payrollAdministrationId}` to the POST URL.

__NonPayrollAdministrations__ For nonPayrollAdministrations the equivalent MetaData-endpoints are also available as described above. However NO specific defaults endpoint is available for the nonPayrollAdministration.
 """,
    tags=[
        'employee_concept_management',
        'employment_management',
        'employee_management',
    ],
)
def post_concept_employee_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create a concept employee for an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/conceptemployees/selfservice',
    description=""" __Activity name :__ GetConceptEmployeeSelfServiceByEmployerId

Get a list of all the Concept employee's and their status regarding to ESS (werknemer.loket).
 """,
    tags=[
        'employee_management',
        'employee_self_service_management',
        'employer_data_retrieval',
        'employee_concept_management',
    ],
)
def get_concept_employee_self_service_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of Concept employee's and their ESS (WNL) status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/contractcodes',
    description=""" __Activity name :__ GetContractCodesByEmployerId


Get a list of the contract codes for an employer.

__Note:__ The contract codes defined at the employer level can be used as value for the field contractCode in the WorkingHours and ConceptEmployee resource.
 """,
    tags=[
        'contract_code_management',
        'employer_data_management',
        'employer_management',
    ],
)
def get_contract_codes_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List contract codes for an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/{employerId}/contractcodes',
    description=""" __Activity name :__ PostContractCodeByEmployerId
 """,
    tags=[
        'contract_code_management',
        'employer_data_management',
        'employer_management',
    ],
)
def post_contract_code_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Add a contract code for an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/customfields',
    description=""" __Activity name :__ GetCustomFieldsByEmployerId

Get a list of the custom fields for an employer.

__Note:__ The custom fields defined at the employer level can be used at the employee and employment level.
 """,
    tags=[
        'custom_field_management',
        'employment_custom_fields_management',
        'employee_custom_field_management',
    ],
)
def get_custom_fields_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List custom fields for an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/{employerId}/customfields',
    description=""" __Activity name :__ PostCustomFieldByEmployerId
 """,
    tags=['custom_field_management', 'employer_data_management'],
)
def post_custom_field_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Add a custom field for an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/customholidays',
    description=""" __Activity name :__ GetCustomHolidaysByEmployerId

Get a list of the custom holidays for an employer.

__Note:__ The custom holidays defined at the employer level can be used at the employee and employment level.
 """,
    tags=[
        'custom_holiday_management',
        'employer_related_operations',
        'leave_management_operations',
    ],
)
def get_custom_holidays_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List custom holidays for an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/{employerId}/customholidays',
    description=""" __Activity name :__ PostCustomHolidayByEmployerId
 """,
    tags=[
        'custom_holiday_management',
        'employer_data_management',
        'leave_management_operations',
    ],
)
def post_custom_holiday_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Add a custom holiday for an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/dashboard',
    description=""" __Activity name :__ GetEmployerDashboardByEmployerId

Get the url for the Qlik dashboard for this employer.
Please note: the Qlik dashboard is only accessible for users with an assigned Qlik dashboard licenses.
 """,
    tags=[
        'employer_management',
        'dashboard_management',
        'employer_data_retrieval',
        'employer_data_management',
    ],
)
def get_employer_dashboard_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Dashboard of an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/dashboardLicenses',
    description=""" __Activity name :__ GetDashboardLicensesByEmployerId


 Get the list dashboard licenses
 """,
    tags=['dashboard_management', 'employer_data_retrieval', 'employer_management'],
)
def get_dashboard_licenses_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Get the list dashboard licenses
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/{employerId}/dashboardLicenses',
    description=""" __Activity name:__ PutDashboardLicensesByEmployerId

Edit the dashboard licenses

__Metadata :__ There is no metadata endpoint for this resource.
 """,
    tags=['dashboard_management', 'employer_management', 'employer_data_management'],
)
def put_dashboard_licenses_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit the dashboard license
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/datanewbusinesstoken',
    description=""" __Activity name :__ GetDataNewBusinessTokenByEmployerId

Get a token for calling the Data New Business (DNB) API.  DNB is a part of Van Spaendonck and with its API, DNB provides users data-based insights such as the salary checker. 
 """,
    tags=['data_new_business_management', 'employer_data_retrieval'],
)
def get_data_new_business_token_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Get Data New Business token for an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/departments',
    description=""" __Activity name :__ GetDepartmentsByEmployerId

Get a list of all departments for the employer. This is the point where the departments available for use at employment level (organizational entity) are managed.
 """,
    tags=['department_management', 'employer_data_management'],
)
def get_departments_by_employer_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    employer_id: UUID = Path(..., alias='employerId'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of departments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/{employerId}/departments',
    description=""" __Activity name:__ PostDepartmentByEmployerId
    

Create a department for an employer

__Metadata :__ Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the POST URL.

__Defaults:__ No default values
 """,
    tags=['department_management', 'employer_management', 'employer_data_management'],
)
def post_department_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create a department for an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/documents',
    description=""" __Activity name :__ GetDocumentsByEmployerId

Get a list of documents within the employer dossier (werkgeverdossier). Via Qwoater.
 """,
    tags=['document_management', 'dossier_management', 'employer_data_retrieval'],
)
def get_documents_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Get a list of employer dossier documents
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/{employerId}/documents',
    description=""" __Activity name :__ PostDocumentByEmployerId

__Metadata:__ Possible options for fields of the type 'metadata' can be acquired(GET)by adding `/metadata` to the POST URL.

Upload a document within the employer dossier (werkgeverdossier). Via Qwoater.
 """,
    tags=[
        'dossier_management',
        'document_management',
        'concept_employee_dossier_management',
    ],
)
def post_document_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Upload a document to the employer dossier
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/documents/authorizations',
    description=""" __Activity name :__ GetDossierAuthorizationsByEmployerId

Get the authorizations per role and per category. Via Qwoater.
 """,
    tags=['application_management', 'user_management'],
)
def get_dossier_authorizations_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of authorizations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/{employerId}/documents/authorizations',
    description=""" __Activity name:__ PutDossierAuthorizationsByEmployerId

Edit the authorizations. Categories not included in de request will be set to inaccessible for all roles.
 """,
    tags=[
        'application_management',
        'user_management',
        'user_application_set_management',
    ],
)
def put_dossier_authorizations_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    body: ProvidersEmployersEmployerIdDocumentsAuthorizationsPutRequest = ...,
):
    """
    Edit the authorization matrix
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/{employerId}/documents/completedossier',
    description=""" __Activity name:__ DeleteCompleteDossierByEmployerId

Delete all documents in the dossier of an employer and the underlying employments
 """,
    tags=['dossier_management', 'employee_management', 'employer_management'],
)
def delete_complete_dossier_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Delete complete dossier
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/{employerId}/documents/completedossier/initiate',
    description=""" __Activity name:__ PostInitiateCompleteDossierByEmployerId

Initiate the proces to generate a zip file containing the complete dossier. (via Qwoater)
 """,
    tags=[
        'dossier_management',
        'employer_data_retrieval',
        'document_management',
        'employment_document_management',
    ],
)
def post_initiate_complete_dossier_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Generate complete dossier
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/{employerId}/documents/{documentId}',
    description=""" __Activity name:__ DeleteDocumentByEmployerIdAndDocumentId

Delete a document in the employer dossier
 """,
    tags=[
        'dossier_management',
        'document_management',
        'employment_document_management',
    ],
)
def delete_document_by_employer_id_and_document_id(
    employer_id: UUID = Path(..., alias='employerId'),
    document_id: str = Path(..., alias='documentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Delete a document in the employer dossier
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/documents/{documentId}',
    description=""" __Activity name :__ GetDocumentByEmployerIdAndDocumentId

Download the file of a given employer dossier entry. Via Qwoater.
 """,
    tags=[
        'document_management',
        'dossier_management',
        'employment_document_management',
        'employer_data_retrieval',
    ],
)
def get_document_by_employer_id_and_document_id(
    employer_id: UUID = Path(..., alias='employerId'),
    document_id: str = Path(..., alias='documentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
):
    """
    Download employer dossier document
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/{employerId}/documents/{documentId}',
    description=""" __Activity name:__ PutDocumentByEmployerIdAndDocumentId

Edit the details for a document in the employer dossier
 """,
    tags=['dossier_management', 'employer_management', 'employer_data_management'],
)
def put_document_by_employer_id_and_document_id(
    employer_id: UUID = Path(..., alias='employerId'),
    document_id: str = Path(..., alias='documentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Edit the details of an employer dossier document
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/documents/{documentId}/audittrail',
    description=""" __Activity name :__ GetAuditTrailByEmployerIdAndDocumentId

Get audittrail for the document in the employer dossier.
 """,
    tags=['document_management', 'audit_trail_management', 'dossier_management'],
)
def get_audit_trail_by_employer_id_and_document_id(
    document_id: str = Path(..., alias='documentId'),
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Get audittrail for the document in the employer dossier
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/documenttemplates',
    description=""" __Activity name :__ GetDocumentTemplatesByEmployerId

Get a list of document templates within the employer dossier (werkgeverdossier). Via Qwoater. Note that the 'category' field contains the category of the template.
 """,
    tags=['dossier_management', 'employment_template_handling', 'document_management'],
)
def get_document_templates_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Get a list of document templates
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/{employerId}/documenttemplates',
    description=""" __Activity name :__ PostDocumentTemplateByEmployerId

__Metadata:__ Possible options for fields of the type 'metadata' can be acquired(GET)by adding `/metadata` to the POST URL.

Upload a document template within the employer dossier (werkgeverdossier). Via Qwoater.
 """,
    tags=['dossier_management', 'document_management', 'employment_template_handling'],
)
def post_document_template_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Upload a document template to the employer dossier
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/{employerId}/documenttemplates/{documentId}',
    description=""" __Activity name:__ DeleteDocumentTemplateByEmployerIdAndDocumentId

Delete a document template in the employer dossier
 """,
    tags=[
        'dossier_management',
        'document_management',
        'employment_document_management',
    ],
)
def delete_document_template_by_employer_id_and_document_id(
    employer_id: UUID = Path(..., alias='employerId'),
    document_id: str = Path(..., alias='documentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Delete a document template in the employer dossier
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/documenttemplates/{documentId}',
    description=""" __Activity name :__ GetDocumentTemplateByEmployerIdAndDocumentId

Download the document template of a given template entry. Via Qwoater.
 """,
    tags=[
        'document_management',
        'employment_document_management',
        'dossier_management',
    ],
)
def get_document_template_by_employer_id_and_document_id(
    employer_id: UUID = Path(..., alias='employerId'),
    document_id: str = Path(..., alias='documentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
):
    """
    Download template document
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/{employerId}/documenttemplates/{documentId}',
    description=""" __Activity name:__ PutDocumentTemplateByEmployerIdAndDocumentId

Edit the details for a document template in the employer dossier
 """,
    tags=['dossier_management', 'document_management', 'employment_template_handling'],
)
def put_document_template_by_employer_id_and_document_id(
    employer_id: UUID = Path(..., alias='employerId'),
    document_id: str = Path(..., alias='documentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Edit the details of an document template
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/{employerId}/documenttemplates/{documentId}/generatedocuments',
    description=""" __Activity name :__ PostGenerateDocumentsByEmployerIdAndDocumentId

__Metadata:__ Available templates can be acquired(GET) at Employer level(/v2/providers/employers/{employerId}/documenttemplates/generatedocument/metadata).

Generate documents for a selection of employments and store it in the employment dossier. Via Qwoater. (One document is generated and stored for each selected employment)
 """,
    tags=[
        'employment_document_management',
        'document_management',
        'dossier_management',
    ],
)
def post_generate_documents_by_employer_id_and_document_id(
    employer_id: UUID = Path(..., alias='employerId'),
    document_id: str = Path(..., alias='documentId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Generate documents for selected employments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/educationfurtherindications',
    description=""" __Activity name :__ GetEducationFurtherIndicationsByEmployerId

Get a list of the education further indications for an employer.

__Note:__ The education further indications defined at the employer level can be used as value for the field furtherIndication in the Education resource at the employee level.
 """,
    tags=[
        'education_indication_management',
        'education_management',
        'employee_education_management',
    ],
)
def get_education_further_indications_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List education further indications for an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/{employerId}/educationfurtherindications',
    description=""" __Activity name :__ PostEducationFurtherIndicationByEmployerId
 """,
    tags=[
        'education_indication_management',
        'education_management',
        'employee_education_management',
    ],
)
def post_education_further_indication_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Add an education further indication for an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/educationtypes',
    description=""" __Activity name :__ GetEducationTypesByEmployerId

Get a list of the education types for an employer.

__Note:__ The education types defined at the employer level can be used as value for the field typeOfEducation in the Education resource at the employee level.
 """,
    tags=[
        'education_management',
        'education_type_management',
        'employee_education_management',
    ],
)
def get_education_types_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List education types for an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/{employerId}/educationtypes',
    description=""" __Activity name :__ PostEducationTypeByEmployerId
 """,
    tags=[
        'education_type_management',
        'education_management',
        'employee_education_management',
    ],
)
def post_education_type_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Add an education type for an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/emailidentities',
    description=""" __Activity name:__ GetEmailIdentitiesByEmployerId
    

Get the list of EmailIdentities for an employer. 
 """,
    tags=[
        'employer_contact_management',
        'email_identity_management',
        'employer_data_retrieval',
    ],
)
def get_email_identities_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of EmailIdentities for an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/{employerId}/emailidentities',
    description=""" __Activity name:__ PostEmailIdentityByEmployerId
    

Create an EmailIdentity for an employer.
 """,
    tags=[
        'employer_contact_management',
        'email_identity_management',
        'employer_management',
    ],
)
def post_email_identity_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create an EmailIdentity for an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/{employerId}/emailidentities/verify',
    description=""" __Activity name:__ PostVerifyEmailIdentityByEmployerId
    

Verify an EmailIdentity for an employer. The verficationstatus will we saved and used by Loket when sending email. 
 """,
    tags=['email_identity_management', 'employer_contact_management'],
)
def post_verify_email_identity_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Verify an EmailIdentity for an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/emailtemplates',
    description=""" __Activity name :__ GetEmailTemplatesByEmployerId

Get a list of the email templates for an employer.

__Note:__ Email templates can be defined on employer, provider and loket level. This endpoint returns for each emailtype the email template which is currently in use for the employer.
 """,
    tags=[
        'email_template_management',
        'employer_management',
        'employer_data_retrieval',
    ],
)
def get_email_templates_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List email templates for an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/{employerId}/emailtemplates/{emailTemplateId}',
    description=""" __Activity name :__ DeleteEmailTemplateByEmployerIdAndEmailTemplateId

Delete an existing email template record
 """,
    tags=['email_template_management', 'provider_management'],
)
def delete_email_template_by_employer_id_and_email_template_id(
    emailtemplate_id: UUID = Query(..., alias='emailtemplateId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
    employer_id: str = Path(..., alias='employerId'),
    email_template_id: str = Path(..., alias='emailTemplateId'),
):
    """
    Delete an email template record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/emailtemplates/{emailTemplateId}',
    description=""" __Activity name :__ GetEmailTemplateByEmployerIdAndEmailTemplateId

Get the details of an email template. The available email template placeholders can be aquired by adding /metadata to the url.
 """,
    tags=[
        'email_template_management',
        'employer_management',
        'employee_and_family_management',
    ],
)
def get_email_template_by_employer_id_and_email_template_id(
    employer_id: UUID = Path(..., alias='employerId'),
    emailtemplate_id: UUID = Query(..., alias='emailtemplateId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
    email_template_id: str = Path(..., alias='emailTemplateId'),
):
    """
    Details of an email template
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/{employerId}/emailtemplates/{emailTemplateId}',
    description=""" __Activity name :__ PutEmailTemplateByEmployerIdAndEmailTemplateId

Edit the email template. The subject, body and senderEmail can be editted. 
 """,
    tags=[
        'email_template_management',
        'employer_management',
        'notification_management',
    ],
)
def put_email_template_by_employer_id_and_email_template_id(
    emailtemplate_id: UUID = Query(..., alias='emailtemplateId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
    employer_id: str = Path(..., alias='employerId'),
    email_template_id: str = Path(..., alias='emailTemplateId'),
):
    """
    Edit an email template record
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/employees',
    description=""" __Activity name :__ GetEmployeesByEmployerId

Get a list of all employees for the given employer
 """,
    tags=[
        'employee_management',
        'employer_data_retrieval',
        'employee_and_family_management',
        'employee_absence_management',
        'employer_management',
    ],
)
def get_employees_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
    x__report_input: Optional[str] = Header(None, alias='X-ReportInput'),
):
    """
    List of employees for an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/employees/actualpartners',
    description=""" __Activity name:__ GetActualPartnersByEmployerId
    

Get the list of Actual partners for all employees of an employer
 """,
    tags=[
        'employer_management',
        'partner_management',
        'employee_and_family_management',
    ],
)
def get_actual_partners_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    reference_date: Optional[date_aliased] = Query(None, alias='referenceDate'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of Partners for an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/employees/children',
    description=""" __Activity name:__ GetChildrenByEmployerId
    

Get the list of Children for all employees of an employer
 """,
    tags=['employee_family_management', 'child_management'],
)
def get_children_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    reference_date: Optional[date_aliased] = Query(None, alias='referenceDate'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of Children for an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/employees/contacts',
    description=""" __Activity name:__ GetContactsByEmployerId
    

Get the list of Contacts for all employees of an employer
 """,
    tags=[
        'employer_contact_management',
        'contact_management',
        'employee_contact_management',
    ],
)
def get_contacts_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    reference_date: Optional[date_aliased] = Query(None, alias='referenceDate'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of Contacts for an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/employees/employments',
    description=""" __Activity name :__ GetEmploymentsByEmployerId

Get a list of employments for an employer

This endpoint only returns the employments that meet the filter settings set at the user level. Note that filter settings are set for a user <-> employer <-> client combination.
 """,
    tags=[
        'employment_management',
        'employer_management',
        'employer_related_operations',
    ],
)
def get_employments_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of employments for an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/employees/employments/WageProposals',
    description=""" __Activity name :__ GetWageProposalsByEmployerId

Returns a list of wage proposals for the employments of the employer.
A wage proposal is created when an employment reaches the criteria set for the next tier of wage. 
E.G the minimum wage is linked to the age of a person so a wage proposal is created 60 days befor the birthday of an employment linked to the minimum wage and configured for wage proposals.
Via this functionality the created wage proposal can be approved or rejected resulting in either a new wage record updated to reflect the correct wage or in case of a rejection the employment is disabled for wage proposals.
 """,
    tags=['wage_management', 'employer_related_operations', 'employment_management'],
)
def get_wage_proposals_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of wage proposals for the employments of an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/employees/employments/actualbenefitsanddeductions',
    description=""" __Activity name:__ GetActualBenefitsAndDeductionsByEmployerId
    

Get the list of actual benefitsanddeductions for an employer
 """,
    tags=[
        'benefits_and_deductions_management',
        'employer_related_operations',
        'employer_data_retrieval',
    ],
)
def get_actual_benefits_and_deductions_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    reference_date: Optional[date_aliased] = Query(None, alias='referenceDate'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of actual benefitsanddeductions for an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/{employerId}/employees/employments/benefitsanddeductions',
    description=""" __Activity name :__ PostCollectiveBenefitsAndDeductionsByEmployerId

Create new benefits and deduction records for multiple employments of an employer
 """,
    tags=['benefits_and_deductions_management', 'employment_management'],
)
def post_collective_benefits_and_deductions_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create benefits and deductions for multiple employments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/employees/employments/calendar/absences',
    description=""" __Activity name :__ GetCalendarAbsencesByEmployerId

For a calendar, this endpoint return the absence calendar items PER specific employment.

This endpoint only returns objects for which the employment meets the filter settings set at the user level. Note that filter settings are set for a user <-> employer <-> client combination.
 """,
    tags=[
        'employee_absence_management',
        'absence_management',
        'leave_management_operations',
    ],
)
def get_calendar_absences_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
    start_date: date_aliased = Query(..., alias='startDate'),
    end_date: date_aliased = Query(..., alias='endDate'),
):
    """
    List absences per employment (for calendar)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/employees/employments/calendar/availablehours',
    description=""" __Activity name :__ GetCalendarAvailableHoursByEmployerId

For a calendar, this endpoint returns the availability of an employment expressed as a pattern for both odd and even weeks. Note that multiple patterns can be active in the time period that is requested using the query parameter `startDate` and `endDate`. While multiple patterns can be returned, on any date only one pattern is active. The patterns do not overlap.

The available hours for a day are determined by the bi-weekly work pattern (as defined in the Working Hours resource) if such a work pattern is present for the employment. If no bi-weekly work pattern is present and the employment is NOT an on-call employment than the number of standard hours (either shiftHours or deviatingHoursPerWeek) is equally divided over the working days within each week (Monday through Friday).

This endpoint only returns objects for which the employment meets the filter settings set at the user level. Note that filter settings are set for a user <-> employer <-> client combination.
 """,
    tags=[
        'working_hours_management',
        'employment_record_management',
        'employee_hours_management',
        'leave_management_operations',
    ],
)
def get_calendar_available_hours_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
    start_date: date_aliased = Query(..., alias='startDate'),
    end_date: date_aliased = Query(..., alias='endDate'),
):
    """
    List available hours per employment (for calendar)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/employees/employments/calendar/leave',
    description=""" __Activity name :__ GetCalendarLeaveByEmployerId

This endpoint return the leave calendar items for each employment. Please note: this endpoint only will return calendar items based on leave of the type 'opname'.

This endpoint only returns objects for which the employment meets the filter settings set at the user level. Note that filter settings are set for a user <-> employer <-> client combination.
 """,
    tags=['leave_management', 'leave_management_operations'],
)
def get_calendar_leave_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
    start_date: date_aliased = Query(..., alias='startDate'),
    end_date: date_aliased = Query(..., alias='endDate'),
):
    """
    List leave per employment (for calendar)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/employees/employments/calendar/leaverequests',
    description=""" __Activity name :__ GetCalendarLeaveRequestsByEmployerId

For a calendar, this endpoint return the leave requests calendar items PER specific employment.

Please note: this endpoint only will return calendar items based on leave request with status 'ingediend'.

This endpoint only returns objects for which the employment meets the filter settings set at the user level. Note that filter settings are set for a user <-> employer <-> client combination.
 """,
    tags=[
        'leave_management',
        'leave_management_operations',
        'employment_management',
        'employee_absence_management',
    ],
)
def get_calendar_leave_requests_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
    start_date: date_aliased = Query(..., alias='startDate'),
    end_date: date_aliased = Query(..., alias='endDate'),
):
    """
    List leave requests per employment (for calendar)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/employees/employments/comprehensive',
    description=""" __Activity name :__ GetEmploymentsComprehensiveByEmployerId

Get a list of employments for an employer.  With this version we introduced the "Comprehensive" resource which contains additional entities. 

This endpoint only returns the employments that meet the filter settings set at the user level. Note that filter settings are set for a user <-> employer <-> client combination.
 """,
    tags=['employment_management', 'employer_data_retrieval', 'employee_management'],
)
def get_employments_comprehensive_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    reference_date: Optional[date_aliased] = Query(None, alias='referenceDate'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of employments with additional entities
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/employees/employments/declarations',
    description=""" __Activity name :__ GetDeclarationsByEmployerId

Returns a list of declarations for the employments of the employer
 """,
    tags=[
        'employee_management',
        'declarations_management',
        'employer_data_retrieval',
        'employee_and_family_management',
    ],
)
def get_declarations_for_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of declarations for the employees of an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/employees/employments/declarations/withattachment',
    description=""" __Activity name :__ GetDeclarationsWithAttachmentByEmployerId

Get a list of all declarationId's of declarations that have an attachment to it. 

The attachment is stored in Qwoater, and thus on the background a call to Qwoater will be performed to check whether an attachment is available for a declaration.

If an attachment is available then a call may be performed to the other endpoint to actually start downloading the attachment for this declaration.
 """,
    tags=[
        'declarations_management',
        'earnings_attachment_management',
        'declaration_management',
    ],
)
def get_declarations_with_attachment_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Get a list of declarations with attachment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/employees/employments/lastmodifiedversionnumbers',
    description=""" __Activity name :__ GetEmploymentLastModifiedVersionNumbersByEmployerId

This endpoint is similar to the GetEmployerLastModifiedVersionNumbersByUser endpoint described above. Please check out that description for required context.

In addition to the version on employer level, this endpoint allows you to check if this employment has any changes since your last synchronization. Consequently, this endpoint may be used to further decrease the amount of required calls when performing a synchronization.

As can be seen in the set of 'underlying' tables, also changes in Employee information corresponding to the Employment is reflected in the version number.

**How to use**

*Recommended usage*
* Perform all recommended steps in the description of the employer version number endpoint
* Use the exact SAME filter parameter to this endpoint. The resulting list will contain only the employment for which changes have occured since your last synchronization.
 """,
    tags=['employer_data_retrieval', 'employment_management', 'employer_management'],
)
def get_employment_last_modified_version_numbers_by_user(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of employment version numbers
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/employees/employments/leaverequests',
    description=""" __Activity name :__ GetLeaveRequestsByEmployerId

Returns a list of leave requests for the employments of the employer
 """,
    tags=[
        'leave_management',
        'leave_management_operations',
        'employee_absence_management',
    ],
)
def get_leave_requests_for_employer(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of leave requests for the employees of an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/employees/employments/minimized',
    description=""" __Activity name :__ GetEmploymentsMinimizedByEmployerId

Get a list of employments for an employer.  With this version we introduced the "Minimized" resource which contains fewer fields.  This version should increase performance when requesting employments for large employer.

This endpoint only returns the employments that meet the filter settings set at the user level. Note that filter settings are set for a user <-> employer <-> client combination.
 """,
    tags=[
        'employer_data_retrieval',
        'employment_record_management',
        'employment_management',
        'employee_management',
    ],
)
def get_employments_minimized_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of employments with fewer fields for performance reasons
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/{employerId}/employees/employments/wages',
    description=""" __Activity name :__ PostCollectiveWageByEmployerId

Create new grosswage records for multiple employments of an employer
 """,
    tags=['employment_wage_management', 'wage_management', 'wage_record_management'],
)
def post_collective_wage_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create wages for multiple employments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/employees/selfservice',
    description=""" __Activity name :__ GetEmployeeSelfServiceByEmployerId

Get a list of all the employee's and their status regarding to ESS (werknemer.loket).
 """,
    tags=[
        'employee_management',
        'employee_self_service_management',
        'employer_data_retrieval',
    ],
)
def get_employee_self_service_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of employee's and their ESS (WNL) status
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/providers/employers/{employerId}/employees/selfservice',
    description=""" __Activity name :__ PatchEmployeeSelfServiceAccessByEmployerId

This endpoint allows the user to change the status of access to ESS for several employees of the employer.
 """,
    tags=[
        'employee_access_management',
        'employee_management',
        'employee_self_service_management',
    ],
)
def patch_employee_self_service_access_by_employer_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    employer_id: str = Path(..., alias='employerId'),
):
    """
    Change the ESS access for several employees
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/employmenttemplates',
    description=""" __Activity name :__ GetEmploymentTemplatesByEmployerId
Get the employment templates that are available at this employer's level. 

An employment templates (werknemersjabloon) provides as predefined set of values for a new employment.  This is mostly when creating a new employee or employment as this allows the user to apply the template's values and augment this with any specific values.
 """,
    tags=[
        'employment_template_handling',
        'employer_management',
        'employment_management',
    ],
)
def get_employment_templates_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Employment templates
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/externaltenants',
    description=""" __Activity name:__ GetExternalTenantsByEmployerId
    

Get a list of external tenants that are available within the scope of this employer.
An external tenant may be registered for a Loket user, and may be used to login to Loket using Azure Active Directory. 
 """,
    tags=[
        'external_tenant_management',
        'employer_management',
        'employer_data_retrieval',
        'integration_with_external_systems',
    ],
)
def get_external_tenants_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Get available external tenants (employer scope)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/functions',
    description=""" __Activity name :__ GetFunctionsByEmployerId

Get a list of all functions for the employer. This is the point where the functions available for use at employment level (organizational entity) are managed.
 """,
    tags=['employer_data_retrieval', 'employer_management', 'user_management'],
)
def get_functions_by_employer_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    employer_id: UUID = Path(..., alias='employerId'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of functions
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/{employerId}/functions',
    description=""" __Activity name:__ PostFunctionByEmployerId
    

Create a function for an employer

__Metadata:__ No metadata

__Defaults:__ No default values
 """,
    tags=[
        'employer_management',
        'employer_data_retrieval',
        'user_management',
        'employer_related_operations',
    ],
)
def post_function_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create a function for an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/{employerId}/leave',
    description=""" __Activity name:__ PostCollectiveLeaveByEmployerId

Post leave for a set of employments under an employer.

__Metadata :__ There is no metadata endpoint for this resource.

__Defaults :__ Defaults are available at /defaults.
 """,
    tags=['leave_management', 'leave_management_operations', 'employment_management'],
)
def post_collective_leave_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Post leave for multiple employments.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/leave/proposedleavehours',
    description=""" __Activity name :__ GetProposedLeaveHoursByEmployerId

Returns the numberOfHours (only in hours) calculated based on the employments working- hours/schedual 

__Note:__  The function will only work if the employment is either linked to no leave policy or linked to only leave policy(s) that use hours as the unit of leave.

Further more how the leave hours are calculated can be managed in the leave policy with the `applyLeaveSchedule` and `working hours` resource with the field `calculateUsingWorkPattern.leaveHours` The order is as follows. If calculateUsingWorkPattern.leaveHours is true the work patern from workinghours is used otherwise if applyLeaveSchedule is set to true the `leavePattern` is used otherwise the workinghours are used
 """,
    tags=[
        'leave_management',
        'leave_management_operations',
        'employment_management',
        'employer_related_operations',
    ],
)
def get_proposed_leave_hours_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    start_date: Optional[constr(pattern=r'date')] = Query(None, alias='startDate'),
    end_date: Optional[constr(pattern=r'date')] = Query(None, alias='endDate'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Get the proposed number of leave hours for all employments of an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/leavePolicies',
    description=""" __Activity name :__ GetLeavePoliciesByEmployerId <br/>  <br/>  Returns all the leave policies for the given employer.
 """,
    tags=['leave_management', 'leave_policy_management', 'leave_management_operations'],
)
def get_leave_policies_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of all the leave policies
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/providers/employers/{employerId}/leavePolicies',
    description=""" __Activity name :__ PatchCopyLeavePolicyByEmployerId

Add a leave policy based on an existing leave policy at providerlevel. (Create a copy)
 """,
    tags=['leave_policy_management', 'leave_management_operations'],
)
def patch_copy_leave_policy_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create a leave policy based on an existing leave policy
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/{employerId}/leavePolicies',
    description=""" __Activity name :__ PostLeavePolicyByEmployerId

Add a leave policy
 """,
    tags=[
        'leave_policy_management',
        'leave_management_operations',
        'absence_management',
    ],
)
def post_leave_policy_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create a leave policy
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/leavebalances',
    description=""" __Activity name :__ GetLeaveBalancesByEmployerId <br/>  <br/>  Returns the yearly leave balances for all employments
 """,
    tags=['leave_management', 'leave_management_operations'],
)
def get_leave_balances_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    reference_date: Optional[date_aliased] = Query(None, alias='referenceDate'),
    leave_type: Optional[LeaveType20] = Query(None, alias='leaveType'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    The leave balance for all employments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/leavebalances/grouped',
    description=""" __Activity name :__ GetLeaveBalancesGroupedByEmployerId <br/>  <br/>  Returns the yearly leave balances total per leave type and total per groupBy
 """,
    tags=['leave_management', 'leave_management_operations', 'employment_management'],
)
def get_leave_balances_grouped_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    reference_date: Optional[date_aliased] = Query(None, alias='referenceDate'),
    leave_type: Optional[LeaveType23] = Query(None, alias='leaveType'),
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
    group_by: GroupBy = Query(..., alias='groupBy'),
):
    """
    Summed up leave balance total and grouped by
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/leavetypes',
    description=""" __Activity name :__ GetLeaveTypesByEmployerId

Get a list of all leavetypes for the employer
 """,
    tags=['leave_management', 'leave_management_operations', 'leave_policy_management'],
)
def get_leave_types_by_employer_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    employer_id: UUID = Path(..., alias='employerId'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of leave types
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/leavetypes/{leaveTypeId}',
    description=""" __Activity name:__ GetLeaveTypeByEmployerIdAndLeaveTypeId

Get the details of a leave type
 """,
    tags=['leave_policy_management', 'leave_management_operations', 'leave_management'],
)
def get_leave_type_by_employer_id_and_leave_type_id(
    leave_type_id: UUID = Path(..., alias='leaveTypeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    employer_id: str = Path(..., alias='employerId'),
):
    """
    Details of a leave type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/{employerId}/leavetypes/{leaveTypeId}',
    description=""" __Activity name:__ PutLeaveTypeByEmployerIdAndLeaveTypeId

Edit the details for a leave type

__Metadata :__ There is no metadata endpoint for this resource.
 """,
    tags=['leave_management', 'leave_management_operations', 'leave_policy_management'],
)
def put_leave_type_by_employer_id_and_leave_type_id(
    leave_type_id: UUID = Path(..., alias='leaveTypeId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
    employer_id: str = Path(..., alias='employerId'),
):
    """
    Edit the details of a leave type
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/providers/employers/{employerId}/logo',
    description=""" __Activity name:__ DeleteEmployerLogoByEmployerId

Delete the logo of an employer
 """,
    tags=['application_management', 'employer_logo_management'],
)
def delete_employer_logo_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Delete the employer logo
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/logo',
    description=""" __Activity name :__ GetEmployerLogoByEmployerId

This activity is listed twice in the documentation due to the specified version caching path parameter. Including or exluding this parameter results in slightly different behaviour.

__Caching:__ This resource changes very infrequently and can be cached for a longer period.

Get the logo of the employer. In case no logo is know the service will return a 404.
 """,
    tags=['employer_logo_management', 'application_management', 'employer_management'],
)
def get_employer_logo_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Logo of an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/{employerId}/logo',
    description=""" __Activity name :__ PostEmployerLogoByEmployerId

Upload a logo for the employer.
 """,
    tags=['application_management', 'employer_logo_management'],
)
def post_employer_logo_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Upload a logo for the employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/logo/{version}',
    description=""" __Activity name :__ GetEmployerLogoByEmployerId

This activity is listed twice in the documentation due to the specified version caching path parameter. Including or exluding this parameter results in slightly different behaviour.

__Caching:__ This resource changes very infrequently and can be cached for a longer period.

Get the logo of the employer. In case no logo is know the service will return a 404.
 """,
    tags=[
        'application_management',
        'employer_logo_management',
        'company_information_retrieval',
    ],
)
def get_employer_logo_by_employer_id_and_version(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    version: UUID = ...,
):
    """
    Logo of an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/modules',
    description=""" __Activity name :__ GetModulesByEmployerId

Get the array of the modules enabled for the specified employer. A module enables a certain functionality for the given employer. These are typically called 'producten' in Loket.
 """,
    tags=[
        'employer_data_retrieval',
        'employer_management',
        'user_management',
        'application_management',
    ],
)
def get_modules_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    List of modules enabled for the employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/nationalholidays',
    description=""" __Activity name :__ GetNationalHolidaysByEmployerId

Get a list of all national holidays for the employer
 """,
    tags=['national_holiday_management'],
)
def get_national_holidays_by_employer_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    employer_id: UUID = Path(..., alias='employerId'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of national holidays
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/nationalholidays/{nationalHolidayId}',
    description=""" __Activity name:__ GetNationalHolidaysByEmployerIdAndNationalHolidayId

Get the details of a national holiday
 """,
    tags=['national_holiday_management', 'employee_management'],
)
def get_national_holidays_by_employer_id_and_national_holiday_id(
    national_holiday_id: UUID = Path(..., alias='nationalHolidayId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    employer_id: str = Path(..., alias='employerId'),
):
    """
    Details of a national holiday
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/providers/employers/{employerId}/nationalholidays/{nationalHolidayId}',
    description=""" __Activity name:__ PutNationalHolidayByEmployerIdAndNationalHolidayId

Edit the details for a national holiday

__Metadata :__ There is no metadata endpoint for this resource.
 """,
    tags=['national_holiday_management'],
)
def put_national_holiday_by_employer_id_and_national_holiday_id(
    national_holiday_id: UUID = Path(..., alias='nationalHolidayId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
    employer_id: str = Path(..., alias='employerId'),
):
    """
    Edit the details of a national holidays
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/notes',
    description=""" __Activity name :__ GetEmployerNotesByEmployerId

Get a list of notes, available for the user, for the employer. 
 """,
    tags=['employer_note_management', 'note_management', 'employment_notes_management'],
)
def get_employer_notes_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Get a list of notes for an employer.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/{employerId}/notes',
    description=""" __Activity name :__ PostEmployerNoteByEmployerId

__Metadata:__ Possible options for fields of the type 'metadata' can be acquired(GET)by adding `/metadata` to the POST URL.

__Defaults:__ Default values for a new object can be acquired by adding `/defaults' to the POST URL.
 """,
    tags=[
        'employer_note_management',
        'note_management',
        'employer_management',
        'employment_notes_management',
    ],
)
def post_employer_note_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Add a note for an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/notifications',
    description=""" __Activity name :__ GetNotificationsByEmployerId

Get a list of unread notifications for an employer
 """,
    tags=['notification_management', 'employer_data_retrieval'],
)
def get_notifications_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Get a list of notifications for an employer.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/payrolladministrations',
    description=""" __Activity name :__ GetPayrollAdministrationsByEmployerId

Get a list of all payroll administrations for an employer
 """,
    tags=[
        'payroll_administration_management',
        'payroll_data_management',
        'wage_management',
    ],
)
def get_payroll_administrations_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of payroll administrations for an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/proforma',
    description=""" __Activity name :__ GetProformaStatusByEmployerId

Get the status of proforma for this employer
 """,
    tags=['proforma_management', 'employer_data_retrieval'],
)
def get_proforma_status_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Get the status of proforma for this employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/{employerId}/proforma/initialize',
    description=""" __Activity name:__ PostInitializeProformaByEmployerId

Initialize a proforma environment (request the copying of data from live to proforma).

__Metadata :__ None

__Defaults :__ None
 """,
    tags=['proforma_management', 'application_management'],
)
def post_initialize_proforma_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Initialize the proforma environment
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/providerlogo',
    description=""" __Activity name :__ GetProviderLogoByEmployerId

This activity is listed twice in the documentation due to the specified version caching path parameter. Including or exluding this parameter results in slightly different behaviour.

Get the (deviating) provider logo of the employers. In case no logo is know the service will return a 404.

__Caching:__ This resource changes very infrequently and can be cached for a longer time. """,
    tags=[
        'application_management',
        'provider_management',
        'provider_information_retrieval',
        'employer_logo_management',
    ],
)
def get_provider_logo_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Provider logo
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/providerlogo/{version}',
    description=""" __Activity name :__ GetProviderLogoByEmployerId

This activity is listed twice in the documentation due to the specified version caching path parameter. Including or exluding this parameter results in slightly different behaviour.

Get the (deviating) provider logo of the employers. In case no logo is know the service will return a 404.

__Caching:__ This resource changes very infrequently and can be cached for a longer time. """,
    tags=[
        'application_management',
        'provider_management',
        'provider_information_retrieval',
        'employer_logo_management',
    ],
)
def get_provider_logo_by_employer_id_and_version(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    version: UUID = ...,
):
    """
    Provider logo
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/useraccessibledepartments',
    description=""" __Activity name :__ GetUserAccessibleDepartmentsByEmployerId

Get a list of all departments for the employer, which are accesible for the current user. 
 """,
    tags=['department_management', 'employer_data_management', 'user_management'],
)
def get_user_accessible_departments_by_employer_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    employer_id: UUID = Path(..., alias='employerId'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of user accessible departments
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/users',
    description=""" __Activity name :__ GetEmployerUsersByEmployerId


 Get the list of users of the employer
 """,
    tags=['user_management', 'employer_data_retrieval', 'employee_management'],
)
def get_employer_users_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of users for an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/{employerId}/users',
    description=""" __Activity name :__ PostEmployerUserByEmployerId

__Metadata :__  Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the POST URL.

__Defaults :__ Default values for a new object can be acquired by adding `/defaults' to the POST URL. 

Add an SSO or Azure AD user for an employer. 
 """,
    tags=[
        'user_management',
        'employer_management',
        'email_identity_management',
        'integration_with_external_systems',
    ],
)
def post_employer_user_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create an SSO or Azure AD user for an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/users/departments',
    description=""" __Activity name:__ GetEmployerUsersLinkedDepartmentsByEmployerId

Get the list of departments that the user has access to
 """,
    tags=[
        'department_management',
        'department_access_management',
        'user_management',
        'employer_data_retrieval',
    ],
)
def get_employer_users_linked_departments_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Get the list of departments that the user has access to
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/{employerId}/users/invite',
    description=""" __Activity name :__ PostInviteEmployerUserByEmployerId

__Metadata :__  Possible options for fields of the type 'metadata' can be acquired via /providers/employers/{employerId}/users/metadata

__Defaults :__ Default values for a new object can be acquired by via /providers/employers/{employerId}/users/defaults

Send an invite to an user for an employer. 
 """,
    tags=[
        'employer_contact_management',
        'user_management',
        'notification_management',
        'email_identity_management',
    ],
)
def post_invite_employer_user_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Send an invite for an employer user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/{employerId}/users/link',
    description=""" __Activity name :__ PostLinkExistingUserByEmployerId

__Metadata :__  No metadata endpoint

__Defaults :__ No default values 

Link an existing employer user to this employer. 
 """,
    tags=['user_management', 'employer_management', 'user_linkage_and_workflow'],
)
def post_link_existing_user_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Link an existing employer user to this employer.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/users/{userId}/authorizations',
    description=""" __Activity name :__ GetEmployerUserAuthorizationsByEmployerIdAndUserId 


 List the available authorizations for the user - employer combination. Note that the employer user can have a different set of authorizations per employer.


 =============== This endpoint is not yet available ===============
 """,
    tags=[
        'user_management',
        'user_application_set_management',
        'application_management',
    ],
)
def get_employer_user_authorizations_by_employer_id_and_user_id(
    employer_id: UUID = Path(..., alias='employerId'),
    user_id: UUID = Path(..., alias='userId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    The authorizations for the user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/providers/employers/{employerId}/users/{userId}/authorizations',
    description=""" __Activity name :__ PatchEmployerUserAuthorizationsByUserId

Manage the employer user authorizations and `authorizationSet`.


Only the changes supplied are processed existing records not supplied in the request body will be left unchanged.  e.g. If three authorizations are enabled for the user and a patch is performed with in the body one new authorization with the `isEnabled` = true. The result will be that the user has 4 enabled authorizations.
 """,
    tags=[
        'user_management',
        'employer_management',
        'user_account_management',
        'user_application_set_management',
    ],
)
def patch_employer_user_authorizations_by_user_id(
    employer_id: UUID = Path(..., alias='employerId'),
    user_id: UUID = Path(..., alias='userId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Manage the employer user authorizations
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/providers/employers/{employerId}/users/{userId}/departments',
    description=""" __Activity name:__ PatchEmployerUserLinkedDepartmentsByEmployerIdAndUserId

This endpoint enables the user to link or unlink multiple 'linkages' with one call.
 """,
    tags=[
        'department_management',
        'department_access_management',
        'user_management',
        'user_linkage_and_workflow',
    ],
)
def link_or_unlink_user_departments(
    employer_id: UUID = Path(..., alias='employerId'),
    user_id: UUID = Path(..., alias='userId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    body: ProvidersEmployersEmployerIdUsersUserIdDepartmentsPatchRequest = ...,
):
    """
    Link or unlink departments from an user.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/workflows',
    description=""" __Activity name:__ GetWorkflowsByEmployerId
    

Get the list of all workflows for an employer. All as in both open as finished workflows are returned.
 """,
    tags=['workflow_management', 'employer_management', 'employer_data_retrieval'],
)
def get_workflows_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Workflows for the employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/employers/{employerId}/workflowtriggermappings',
    description=""" __Activity name:__ GetWorkflowTriggerMappingsByEmployerId
    

Get the list workflow triggers that are mapped to a workflowTemplate.  Workflow triggers are triggers that trigger a workflow. With this resource one can manage which trigger will trigger what workflow.
 """,
    tags=['workflow_management', 'user_integration_management'],
)
def get_workflow_trigger_mappings_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Workflowtrigger to workflowtemplate mapping
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/employers/{employerId}/workflowtriggermappings',
    description=""" __Activity name:__ PostWorkflowTriggerMappingByEmployerId
    

Create a workflow trigger mapping record for an employer

__Metadata :__ Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the POST URL.
 """,
    tags=['workflow_management', 'employer_management'],
)
def post_workflow_trigger_mapping_by_employer_id(
    employer_id: UUID = Path(..., alias='employerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create a workflow trigger mapping record for an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/leavePolicies/{leavePolicyId}',
    description=""" __Activity name :__ GetProviderLeavePolicyByLeavePolicyId

Returns one leave policy """,
    tags=['leave_policy_management', 'leave_management_operations'],
)
def get_provider_leave_policy_by_leave_policy_id(
    leave_policy_id: UUID = Path(..., alias='leavePolicyId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    A single leave policy
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/leavePolicies/{leavePolicyId}/agebasedleave',
    description=""" __Activity name :__ GetProviderAgeBasedLeaveByLeavePolicyId <br/>  <br/>  Returns the age based leave for the given leave policy at provider level.
 """,
    tags=['age_based_leave_management', 'leave_management', 'leave_policy_management'],
)
def get_provider_age_based_leave_by_leave_policy_id(
    leave_policy_id: UUID = Path(..., alias='leavePolicyId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Age based leave
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/leavePolicies/{leavePolicyId}/wagebasedleave',
    description=""" __Activity name :__ GetProviderWageBasedLeaveByLeavePolicyId <br/>  <br/>  Returns the wage based leave for the given leave policy at provider level.
 """,
    tags=['wage_based_leave_management', 'leave_policy_management', 'leave_management'],
)
def get_provider_wage_based_leave_by_leave_policy_id(
    leave_policy_id: UUID = Path(..., alias='leavePolicyId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Wage based leave
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/leavePolicies/{leavePolicyId}/yearsofservicebasedleave',
    description=""" __Activity name :__ GetProviderYearsOfServiceBasedLeaveByLeavePolicyId <br/>  <br/>  Returns the years of service based leave for the given leave policy at providerlevel.
 """,
    tags=[
        'years_of_service_leave_management',
        'leave_policy_management',
        'leave_management_operations',
    ],
)
def get_provider_years_of_service_based_leave_by_leave_policy_id(
    leave_policy_id: UUID = Path(..., alias='leavePolicyId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    years of service based leave
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/notificationsets/{notificationSetId}',
    description=""" __Activity name :__ GetNotificationSetByNotificationSetId 


 Details of an notification set. 
 """,
    tags=['notification_management'],
)
def get_notification_set_by_notification_set_id(
    notification_set_id: UUID = Path(..., alias='notificationSetId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Details of a notification set
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/users/{providerUserId}/configuredexternaltenant',
    description=""" __Activity name :__ GetConfiguredExternalTenantByProviderUserId


 Get the external tenant that is configured for this specific user. 
 """,
    tags=['external_tenant_management', 'user_management', 'provider_management'],
)
def get_configured_external_tenant_by_provider_user_id(
    provider_user_id: UUID = Path(..., alias='providerUserId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
):
    """
    Configured external tenant for a provider user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.patch(
    '/providers/users/{providerUserId}/configuredexternaltenant',
    description=""" __Activity name :__ PatchConfiguredExternalTenantByProviderUserId

__Metadata :__  N/A.

__Defaults :__ N/A.

Modify an external tenant to the list of an configured external tenants for an employer user.
An configured external tenant may be removed by sending a request body with both an empty externalTenant object and an empty externalUser object.
 """,
    tags=['external_tenant_management', 'provider_management'],
)
def patch_configured_external_tenant_by_provider_user_id(
    provider_user_id: UUID = Path(..., alias='providerUserId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Add an external tenant for a provider user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/{providerId}/applicationsets',
    description=""" __Activity name:__ GetApplicationsetsByProviderId
    

Get the list of Applicationsets for a provider. 
 """,
    tags=[
        'application_management',
        'provider_management',
        'application_set_management',
        'provider_information_retrieval',
    ],
)
def get_applicationsets_by_provider_id(
    provider_id: UUID = Path(..., alias='providerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of applicationsets for a provider
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/{providerId}/applicationsets',
    description=""" __Activity name:__ PostApplicationSetByProviderId
    

Create an applicationset for a provider.
 """,
    tags=[
        'application_management',
        'provider_management',
        'application_set_management',
    ],
)
def post_application_set_by_provider_id(
    provider_id: UUID = Path(..., alias='providerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create an applicationset for a provider
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/{providerId}/authorizations',
    description=""" __Activity name :__ GetAuthorizationsByProviderId




Get the array of activities the user is authenticated for with regard to the specified provider. This endpoint is only accessible for providerusers.
 """,
    tags=['provider_management', 'authorization_management'],
)
def get_authorizations_by_provider_id(
    provider_id: UUID = Path(..., alias='providerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    List of authorized activities with regard to the provider
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/{providerId}/authorizationsets',
    description=""" __Activity name :__ GetAuthorizationSetsByProviderId 


 List the available authorization sets. 
 """,
    tags=[
        'application_management',
        'user_management',
        'user_application_set_management',
    ],
)
def get_authorization_sets_by_provider_id(
    provider_id: UUID = Path(..., alias='providerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of authorization sets
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/{providerId}/billableitems',
    description=""" __Activity name :__ GetBillableItemsByProviderId

Get a list of all billable items for the provider. 
 """,
    tags=['billable_item_management', 'provider_information_retrieval'],
)
def get_billable_items_by_provider_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    provider_id: UUID = Path(..., alias='providerId'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of billable items
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/{providerId}/emailidentities',
    description=""" __Activity name:__ GetEmailIdentitiesByProviderId
    

Get the list of EmailIdentities for a provider. 
 """,
    tags=['provider_management', 'email_identity_management'],
)
def get_email_identities_by_provider_id(
    provider_id: UUID = Path(..., alias='providerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of EmailIdentities for a provider
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/{providerId}/emailidentities',
    description=""" __Activity name:__ PostEmailIdentityByProviderId
    

Create an EmailIdentity for a provider.
 """,
    tags=['provider_management', 'email_identity_management'],
)
def post_email_identity_by_provider_id(
    provider_id: UUID = Path(..., alias='providerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create an EmailIdentity for a provider
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/{providerId}/emailidentities/verify',
    description=""" __Activity name:__ PostVerifyEmailIdentityByProviderId
    

Verify an EmailIdentity for a provider. The verficationstatus will we saved and used by Loket when sending email. 
 """,
    tags=['provider_management', 'email_identity_management'],
)
def post_verify_email_identity_by_provider_id(
    provider_id: UUID = Path(..., alias='providerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Verify an EmailIdentity for a provider
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/{providerId}/emailtemplates',
    description=""" __Activity name :__ GetEmailTemplatesByProviderId

Get a list of the email templates for an provider.

__Note:__ Email templates can be defined on employer, provider and loket level. This endpoint returns for each emailtype the email template which is currently in use for the provider.
 """,
    tags=['email_template_management', 'provider_management'],
)
def get_email_templates_by_provider_id(
    provider_id: UUID = Path(..., alias='providerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List email templates for an provider
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/{providerId}/emailtemplates/{emailTemplateId}',
    description=""" __Activity name :__ GetEmailTemplateByProviderIdAndEmailTemplateId

Get the details of an email template. The available email template placeholders can be aquired by adding /metadata to the url.
 """,
    tags=['email_template_management', 'provider_management'],
)
def get_email_template_by_provider_id_and_email_template_id(
    provider_id: UUID = Path(..., alias='providerId'),
    emailtemplate_id: UUID = Query(..., alias='emailtemplateId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
    email_template_id: str = Path(..., alias='emailTemplateId'),
):
    """
    Details of an email template
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/providers/{providerId}/employers',
    description=""" __Activity name :__ PostEmployerByProviderId

Create an employee for the provider (administratiekantoor) identified by the given providerId.
Please take note of the following; a newly created Employer is not immediately accessible for the user. As this would require adding the Employer to a specific Loket team (which is a separate activity)

__Metadata :__  Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the POST URL.

__Defaults :__ Default values for a new object can be acquired by adding `/defaults' to the POST URL. """,
    tags=['employer_management', 'user_management', 'application_management'],
)
def post_employer_by_provider_id(
    provider_id: UUID = Path(..., alias='providerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create an employer
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/{providerId}/externaltenants',
    description=""" __Activity name:__ GetExternalTenantsByProviderId
    

Get a list of external tenants that are available within the scope of this provider.
An external tenant may be registered for a Loket user, and may be used to login to Loket using Azure Active Directory. 
 """,
    tags=[
        'external_tenant_management',
        'provider_management',
        'user_management',
        'integration_with_external_systems',
    ],
)
def get_external_tenants_by_provider_id(
    provider_id: UUID = Path(..., alias='providerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Get available external tenants (provider scope)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/{providerId}/leavePolicies',
    description=""" __Activity name :__ GetProviderLeavePoliciesByProviderId <br/>  <br/>  Returns all the leave policies for the given provider. These leave policies can be used to define a leave policy at employer level.
 """,
    tags=['leave_policy_management', 'leave_management_operations'],
)
def get_provider_leave_policies_by_provider_id(
    provider_id: UUID = Path(..., alias='providerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of all the leave policies at provider level.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/{providerId}/logo',
    description=""" __Activity name :__ GetProviderLogo

This activity is listed twice in the documentation due to the specified version caching path parameter. Including or exluding this parameter results in slightly different behaviour.

__Caching:__ This resource changes very infrequently and can be cached for a longer time.

Get the logo of the provider of the user. In case no logo is know the service will return a 404. """,
    tags=[
        'application_management',
        'provider_management',
        'provider_information_retrieval',
    ],
)
def get_provider_logo(
    provider_id: UUID = Path(..., alias='providerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Download the provider logo
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/{providerId}/logo/{version}',
    description=""" __Activity name :__ GetProviderLogo

This activity is listed twice in the documentation due to the specified version caching path parameter. Including or exluding this parameter results in slightly different behaviour.

__Caching:__ This resource changes very infrequently and can be cached for a longer time.

Get the logo of the provider of the user. In case no logo is know the service will return a 404. """,
    tags=[
        'application_management',
        'provider_management',
        'provider_information_retrieval',
    ],
)
def get_provider_logo_by_version(
    provider_id: UUID = Path(..., alias='providerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    version: UUID = ...,
):
    """
    Download the provider logo
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/{providerId}/notificationsets',
    description=""" __Activity name :__ GetNotificationSetsByProviderId 


 List the available notification sets. 
 """,
    tags=['notification_management', 'application_management'],
)
def get_notification_sets_by_provider_id(
    provider_id: UUID = Path(..., alias='providerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of notification sets
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/providers/{providerId}/payrollprocessstatus',
    description=""" __Activity name :__ GetPayrollProcessStatusByProviderId

__Metadata :__  Possible options for fields of the type 'metadata' can be acquired (GET) by adding `/metadata` to the POST URL.

__Defaults :__ The default value for payrollPeriod.payrollPeriodId can be acquired by adding `/defaults' to the POST URL. 

Returns an array of objects. Each object contains information about the payroll administration and the payroll processes status.
 """,
    tags=[
        'payroll_data_management',
        'payroll_period_management',
        'provider_management',
        'payroll_administration_management',
        'employee_management',
    ],
)
def get_payroll_process_status_by_provider_id(
    provider_id: UUID = Path(..., alias='providerId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    payroll_period_id: int = Query(..., alias='payrollPeriodId'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Payroll status for each administration.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/qwoater/employers',
    description=""" __Activity name :__ GetQwoaterEmployersByUser

Returns a list of employerIds that have at least one Qwoater product enabled with the corresponding providerId and lastModifiedVersionNumber for the employer.

**What does the 'last modified' version number reflect**

The sequence number of an employer is a sequential number that reflects whether any changes have occurred in any of its UNDERLYING employments.

More precisely, it reflects the sequence number after the latest change of any database record that relates to an employment within this employer.   What we consider to be 'underlying' employment data is based on a predefined set of tables, and of course given id.  This predefined set of tables can be found [here](../TablesLastModifiedVersionNumber.xlsx)

The scope of this predefined set is to represent 'static' employment data (vaste gegevens), and thus excludes payroll period data (variabele gegevens).

**When to use**

This endpoint is most useful for integrations that regularly synchronize Loket employment data with another system.  As there are no webhooks available, in practice these integrations would need to regularly poll all data to see whether there any changes in the employment data.  The most elementary approach of getting all employment data every time you sync acquires a LOT of calls, in some cases even millions per day.  Even though we can handle quite a lot, this is not always the desired way for both client and server. Hence, this endpoint enables an alternative solution to set up such an integration.

**How to use**

With every update (including additions and deletions) the version number will increase. I.e. the version number will NEVER decrease over time.  (Please note this is not only true within the context of a single employer (or any other entity) but applies to all changes in the database).
Consequently, in practice one would use this endpoint to check if any empLoyer version numbers have increased by applying the filter query parameter to the version field, for example `?filter=lastModifiedVersionNumber gt 70429274`.

*Recommended usage*

* Perform your regular synchronization of static employment data
* Store the highest version number, for which you have now processed all changes. (You may use the following parameter to do this `?orderBy=-lastModifiedVersionNumber` )
* Next time you want to perform synchronization. Call this endpoint with parameter `?filter=lastModifiedVersionNumber gt {{YourVersionNumber}}`
* Only get employment information for employers that are included in that filtered list. (exclude all other employers as you already know there have been no changes since the last synchronization)
 """,
    tags=[
        'employer_data_retrieval',
        'employer_management',
        'employer_data_management',
        'employer_related_operations',
    ],
)
def get_qwoater_employers_by_user(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of employers using Qwoater
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/rdwservices/additionaltaxliability',
    description=""" __Activity name:__ GetAdditionalTaxliabilityByLicensePlateNumber

This endpoint allows the user to acquire values for specific properties in the company car resource. This endpoint will require a license plate number (vehicle registration number), and will return aggregated data based on its RDW-registration.
 """,
    tags=['tax_liability_management', 'company_car_management'],
)
def get_additional_taxliability_by_license_plate_number(
    license_plate_number: str = Query(..., alias='licensePlateNumber'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Acquire the additional tax liability by the license plate number (company car)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user',
    description=""" __Activity name:__ GetUserByToken
    

Properties of the current user.
 """,
    tags=['user_management', 'user_account_management', 'user_profile_management'],
)
def get_user_by_token(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Get current user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/user',
    description=""" __Activity name:__ PutUserByToken
    

Edit some of the properties of the current user. Metadata can be acquired by adding /metadata to the path.
 """,
    tags=['user_management', 'user_account_management', 'user_profile_management'],
)
def put_user_by_token(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Edit current user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/filtersettings/{employerId}',
    description=""" __Activity name:__ GetUserFilterSettingsByEmployerId
    

The User Filter settings for the current user for the employer. These settings are used by the backend to automaticaly filter the list of employments. 
 """,
    tags=['user_account_management', 'user_profile_management', 'user_management'],
)
def get_user_filter_settings_by_employer_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    employer_id: str = Path(..., alias='employerId'),
):
    """
    Get user filter settings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/user/filtersettings/{employerId}',
    description=""" __Activity name:__ PutUserFilterSettingsByEmployerId
    

Edit the filter settings for the current user for the employer.

Metadata can be acquired by adding /metadata to the path.
 """,
    tags=['user_management', 'user_account_management', 'user_profile_management'],
)
def put_user_filter_settings_by_employer_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    employer_id: str = Path(..., alias='employerId'),
):
    """
    Edit the user filter settings
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/user/photo',
    description=""" __Activity name :__ DeleteUserPhotoByToken

Photo of the user to use as an avatar/profile picture
 """,
    tags=['employee_photo_management', 'user_management', 'user_profile_management'],
)
def delete_user_photo_by_token(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Delete user photo
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/user/photo',
    description=""" __Activity name :__ GetUserPhotoByToken

Photo of the user to use as an avatar/profile picture

__Caching:__ This resource changes very infrequently and can be cached for a longer time.
 """,
    tags=['employee_photo_management', 'user_management', 'user_profile_management'],
)
def get_user_photo_by_token(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Photo of an user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/user/photo',
    description=""" __Activity name :__ PostUserPhotoByToken

Photo of the user to use as an avatar/profile picture
 """,
    tags=['user_photo_management', 'user_profile_management'],
)
def post_user_photo_by_token(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Post user photo
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/users/applicationsets/{applicationSetId}',
    description=""" __Activity name:__ DeleteUserApplicationSetByApplicationSetId

Delete an applicationset for the user
 """,
    tags=['application_management', 'user_application_set_management'],
)
def delete_user_application_set_by_application_set_id(
    application_set_id: UUID = Path(..., alias='applicationSetId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Delete a specific applicationset for a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/users/applicationsets/{applicationSetId}',
    description=""" __Activity name:__ PutUserApplicationSetByApplicationSetId


 Edit the details for an applicationset.
 """,
    tags=['application_management', 'user_application_set_management'],
)
def put_user_application_set_by_application_set_id(
    application_set_id: UUID = Path(..., alias='applicationSetId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    if__match: Optional[str] = Header(None, alias='If-Match'),
):
    """
    Edit the details of an applicationset for a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/initiatedworkflows',
    description=""" __Activity name:__ GetInitiatedWorkflowsByBearerToken
    

Get the workflows that are initiated by the user.
 """,
    tags=['workflow_management', 'user_workflow_management'],
)
def get_initiated_workflows_by_bearer_token(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Workflows initiated by the user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/integrations',
    description=""" __Activity name:__ GetIntegrationsByBearerToken
    

List of all the integrations for the logon user
 """,
    tags=['user_management', 'user_integration_management'],
)
def get_integrations_by_bearer_token(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    List of all the integrations for the logon user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{userId}/applicationsets',
    description=""" __Activity name:__ GetApplicationsetsByUserId
    

Get the list of Applicationsets for a user. 
 """,
    tags=['application_management', 'user_application_set_management'],
)
def get_applicationsets_by_user_id(
    user_id: UUID = Path(..., alias='userId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of applicationsets for a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/users/{userId}/applicationsets',
    description=""" __Activity name:__ PostApplicationSetByUserId
    

Create an applicationset for a user.
 """,
    tags=['application_management', 'user_application_set_management'],
)
def post_application_set_by_user_id(
    user_id: UUID = Path(..., alias='userId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Create an applicationset for a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/users/{userId}/yourcampusurl',
    description=""" __Activity name :__ GetYourcampusUrlByUserId

Get a URL to access the Yourcampus portal for a user
 """,
    tags=['user_management', 'user_integration_management'],
)
def get_yourcampus_url_by_user_id(
    user_id: UUID = Path(..., alias='userId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
):
    """
    Get Yourcampus URL for a user
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/wageprojection/cladata/{collectiveLaborAgreementId}',
    description=""" __Activity name :__ GetClaDataForWageProjectionByCollectiveLaborAgreementId

Get de configuration of a specific Collective labor agreement. This configuration (data) can then be used (as input) to perform a wage calculation or wage projection with.
 """,
    tags=['wage_projection_management', 'collective_labor_agreement_management'],
)
def get_default_wage_projection_by_cla_id(
    collective_labor_agreement_id: UUID = Path(..., alias='collectiveLaborAgreementId'),
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    Wage projection Collective labor agreements defaults
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/wageprojection/collectivelaboragreements',
    description=""" __Activity name :__ GetCollectiveLaborAgreementsByUserId

Get a list of all collective labor agreements (CLA) accessible to the current user
 """,
    tags=['collective_labor_agreement_management'],
)
def get_collective_labor_agreements_by_user_id(
    authorization: constr(pattern=r'^Bearer\s[\w-]+$') = Header(
        ..., alias='Authorization'
    ),
    accept: str = Header(..., alias='Accept'),
    filter: Optional[str] = None,
    order_by: Optional[constr(pattern=r'^-?\w+(,-?\w+)*$')] = Query(
        None, alias='orderBy'
    ),
    page_number: Optional[int] = Query(1, alias='pageNumber'),
    page_size: Optional[int] = Query(250, alias='pageSize'),
):
    """
    List of collective labor agreements (CLA)
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
